/* ------------------------------------------------------------------------------
 *
 *     This code was generated by CGW X-Script Code Generator.
 *
 *     Archymeta Information Technologies Co., Ltd.
 *
 *     Changes to this file, especially those bit flags, may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * 
 ------------------------------------------------------------------------------ */

define(['knockout', 'config', 'queryModels' ], function (ko, config, q) {

    var Order_DetailView = function (data) {
        var self = this;
        self.IsViewModel = true;
        self.data = data;
        self.DistinctString = data !== null ? data.DistinctString : "";
        self.LookupQuery = data !== null ? "?OrderID=" + self.data.OrderID + "&ProductID=" + self.data.ProductID : "";

        self.CreateSet = function () {
            return new Order_DetailSet();
        };

        self.OrderID = data.OrderID;
        self.ProductID = data.ProductID;
        self.Quantity = data.Quantity;
        self.Discount = data.Discount;
        self.UnitPrice = data.UnitPrice;
        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.OrderID == data.OrderID && self.ProductID == data.ProductID;
        }

        if (data.OrderRef == null) {
            self.OrderRef = ko.observable(null);
            self.IsOrderRefMaterialized = ko.observable(false);
        } else {
            self.IsOrderRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order', function (m) {
                self.OrderRef = ko.observable(new m.entityView(data.OrderRef));
                self.IsOrderRefMaterialized(true);
            });
        }
        self.OrderRefSummary = ko.pureComputed(function () {
            if (self.IsOrderRefMaterialized() && data !== null) {
                return self.OrderRef.DistinctString;
            } else {
                return "";
            }
        });

        self.MaterializeOrderRef = function () {
            if (self.IsOrderRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/MaterializeOrderRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.OrderRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order', function (m) {
                            self.OrderRef(new m.entityView(dref));
                            self.IsOrderRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        if (data.ProductRef == null) {
            self.ProductRef = ko.observable(null);
            self.IsProductRefMaterialized = ko.observable(false);
        } else {
            self.IsProductRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Product', function (m) {
                self.ProductRef = ko.observable(new m.entityView(data.ProductRef));
                self.IsProductRefMaterialized(true);
            });
        }
        self.ProductRefSummary = ko.pureComputed(function () {
            if (self.IsProductRefMaterialized() && data !== null) {
                return self.ProductRef.DistinctString;
            } else {
                return "";
            }
        });

        self.MaterializeProductRef = function () {
            if (self.IsProductRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/MaterializeProductRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.ProductRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Product', function (m) {
                            self.ProductRef(new m.entityView(dref));
                            self.IsProductRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.shallowDataCopy = function() {
            return {
                OrderID: self.data.OrderID,
                ProductID: self.data.ProductID,
                Quantity: self.data.Quantity,
                Discount: self.data.Discount,
                UnitPrice: self.data.UnitPrice
            };
        }

        self.IsEntitySelected = ko.observable(false);
    }

    var Order_Detail = function (data) {
        var self = this;
        self.IsViewModel = false;
        self.TobeLoadMsg = ko.observable('to be loaded ...');
        self.Initializing = true;
        self.data = data;
        self.IsPersisted = ko.observable(data !== null);
        self.IsNewAddition = ko.observable(false);
        self.UpdateIndex = -1;
        self.DistinctString = ko.observable(data !== null ? data.DistinctString : "");
        self.LookupQuery = data !== null ? "entityedit?OrderID=" + self.data.OrderID + "&ProductID=" + self.data.ProductID : "";

        self.CreateSet = function () {
            return new Order_DetailSet();
        };

        self.OrderID = data.OrderID;
        self.ProductID = data.ProductID;
        self.Quantity = data.Quantity;
        self.Discount = ko.observable(data !== null ? data.Discount : null).extend({ required: true });
        self.IsDiscountModified = ko.observable(data !== null ? data.IsDiscountModified : true);
        self.Discount.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsDiscountModified(self.data == null || self.data.Discount !== val);
             }
         });
        self.IsDiscountValid = ko.observable(true);
        self.DiscountCss = ko.pureComputed(function () {
            if (!self.IsDiscountValid()) {
                return "invalid";
            } else if (self.IsDiscountModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.UnitPrice = ko.observable(data !== null ? data.UnitPrice : null).extend({ required: true });
        self.IsUnitPriceModified = ko.observable(data !== null ? data.IsUnitPriceModified : true);
        self.UnitPrice.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsUnitPriceModified(self.data == null || self.data.UnitPrice !== val);
             }
         });
        self.UnitPriceCss = ko.pureComputed(function () {
            if (self.IsUnitPriceModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.IsEntityChanged = ko.observable(false);

        self.IfEntityChanged = ko.pureComputed(function () {
            return self.IsDiscountModified() || self.IsUnitPriceModified();
        });

        self.IsEntityModified = function () {
            return self.IsDiscountModified() || self.IsUnitPriceModified();
        }

        self.IsEntityComplete = function () {
            return self.Quantity !== null && self.Discount() !== null && self.UnitPrice() !== null;
        };

        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.OrderID() == data.OrderID() && self.ProductID() == data.ProductID();
        }

        self.GetUpdatedData = function () {
            if (self.data == null) {
                return self.GetNewData();
            }
            var d = self.NewDataCopy();
            if (self.IsDiscountModified() || self.IsUnitPriceModified()) {
                if (self.IsDiscountModified()) {
                    d.Discount = self.Discount();
                    d.IsDiscountModified = true;
                }
                if (self.IsUnitPriceModified()) {
                    d.UnitPrice = self.UnitPrice();
                    d.IsUnitPriceModified = true;
                }
                d.IsEntityChanged = true;
                return d;
            } else {
                return null;
            }
        };

        self.GetNewData = function () {
            if (self.Quantity == null) {
                throw "Quantity is required!";
            }    
            else if (self.Discount() == null) {
                throw "Discount is required!";
            }    
            else if (self.UnitPrice() == null) {
                throw "UnitPrice is required!";
            }    
            var d = {
                "OrderID": self.OrderID,
                "ProductID": self.ProductID,
                "Quantity": self.Quantity,
                "Discount": self.Discount(),
                "IsDiscountModified": true,
                "UnitPrice": self.UnitPrice(),
                "IsUnitPriceModified": true,
                "IsEntityChanged": true,
                "IsPersisted": false
            };
            return d;
        };

        self.NewDataCopy = function () {
            var d = {
                "OrderID": self.data.OrderID,
                "ProductID": self.data.ProductID,
                "Quantity": self.data.Quantity,
                "Discount": self.data.Discount,
                "IsDiscountModified": self.IsDiscountModified(),
                "UnitPrice": self.data.UnitPrice,
                "IsUnitPriceModified": self.IsUnitPriceModified(),
                "IsEntityChanged": self.data.IsEntityChanged,
                "IsPersisted": self.data.IsPersisted
            };
            return d;
        };

        self.UpdateData = function (dsrc) {
            if (self.data == null ) {
                return;
            }
            self.data.Discount = dsrc.Discount;
            self.Discount(dsrc.Discount);
            self.IsDiscountModified(false);
            self.data.UnitPrice = dsrc.UnitPrice;
            self.UnitPrice(dsrc.UnitPrice);
            self.IsUnitPriceModified(false);
        };

        self.ResetData = function () {
            if (self.data == null ) {
                return;
            }
            if (self.IsDiscountModified()) {
                self.Discount(self.data.Discount);
            }
            if (self.IsUnitPriceModified()) {
                self.UnitPrice(self.data.UnitPrice);
            }
        };

        self.shallowDataCopy = function() {
            return {
                OrderID: self.data.OrderID,
                ProductID: self.data.ProductID,
                Quantity: self.data.Quantity,
                Discount: self.data.Discount,
                UnitPrice: self.data.UnitPrice
            };
        }

        if (data == null) {
            self.IsOrderRefMaterialized = ko.observable(true);
            self.OrderRef = ko.observable(null);
        } else if (data.OrderRef == null) {
            self.IsOrderRefMaterialized = ko.observable(false);
            self.OrderRef = ko.observable(null);
        } else {
            self.IsOrderRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order', function (m) {
                self.OrderRef = ko.observable(new m.entity(data.OrderRef));
                self.IsOrderRefMaterialized(true);
            });
        }

        self.OrderRefSummary = ko.pureComputed(function () {
            if (self.IsOrderRefMaterialized() && data !== null) {
                return self.OrderRef().DistinctString;
            } else {
                return self.TobeLoadMsg();
            }
        });

        self.MaterializeOrderRef = function () {
            if (self.IsOrderRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/MaterializeOrderRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.OrderRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order', function (m) {
                            self.OrderRef(new m.entityEdit(m));
                            self.IsOrderRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        if (data == null) {
            self.IsProductRefMaterialized = ko.observable(true);
            self.ProductRef = ko.observable(null);
        } else if (data.ProductRef == null) {
            self.IsProductRefMaterialized = ko.observable(false);
            self.ProductRef = ko.observable(null);
        } else {
            self.IsProductRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Product', function (m) {
                self.ProductRef = ko.observable(new m.entity(data.ProductRef));
                self.IsProductRefMaterialized(true);
            });
        }

        self.ProductRefSummary = ko.pureComputed(function () {
            if (self.IsProductRefMaterialized() && data !== null) {
                return self.ProductRef().DistinctString;
            } else {
                return self.TobeLoadMsg();
            }
        });

        self.MaterializeProductRef = function () {
            if (self.IsProductRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/MaterializeProductRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.ProductRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Product', function (m) {
                            self.ProductRef(new m.entityEdit(m));
                            self.IsProductRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsEntitySelected = ko.observable(false);
        self.Initializing = false;
    }

    var Order_DetailPage = function (s, edit) {
        var self = this;
        var editPage = edit;
        self.set = s;
        self.Index_ = ko.observable();
        self.PageNumber = ko.pureComputed(function () {
            return self.Index_() + 1;
        });
        self.FirstItem = ko.observable({});
        self.LastItem = ko.observable({});
        self.CurrentItem = ko.observable(null);
        self.IsLastPage = ko.observable(false);
        self.IsDataLoaded = ko.observable(false);
        self.IsPageSelected = ko.observable(false);
        self.Items =  ko.observableArray([]);
        self.GetPageItems = function (s) {
            if (self.IsDataLoaded()) 
                return $.Deferred().resolve();
            var qexpr = s.getQueryExpr();
            var lastItem = null;
            var ipage = self.Index_();
            if (self.Index_() > 0) {
                var blk = s.PageBlocks()[s.CurrBlockIndex()];
                if (blk.Pages()[0].Index_() !== ipage) {
                    for (var i = 0; i < blk.Pages().length; i++) {
                        if (blk.Pages()[i].Index_() == ipage - 1) {
                            lastItem = blk.Pages()[i].LastItem();
                            break;
                        }
                    }
                } else {
                    var prvb = s.PageBlocks()[s.CurrBlockIndex() - 1];
                    lastItem = prvb.Pages()[prvb.Pages().length - 1].LastItem();
                }
            }
            self.Items.removeAll();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/GetPageItems",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: s.set, qexpr: qexpr, prevlast: lastItem })
            }).pipe(
                function (items) {
                    for (var i = 0; i < items.length; i++) {
                        if (editPage)
                            self.Items.push(new Order_Detail(items[i]));
                        else
                            self.Items.push(new Order_DetailView(items[i]));
                    }
                    self.IsDataLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        }
    }

    var Order_DetailPageBlock = function (s, idx0, data, edit) {
        var self = this;
        var set = s;
        self.BlockIndex = ko.observable(0);
        self.BlockNumber = ko.pureComputed(function () { return self.BlockIndex() + 1; });
        self.IsBlockSelected = ko.pureComputed(function() {
            return set.CurrBlockIndex() == self.BlockIndex();
        });
        self.IsLastBlock = ko.observable(data.IsLastBlock);
        self.BlockCount = data.BlockCount;
        self.Pages = ko.observableArray([]);
        if (data.Pages) {
            for (var i = 0; i < data.Pages.length; i++ ) {
                var pdata = data.Pages[i];
                var page = new Order_DetailPage(s, edit);
                page.Index_(idx0 + pdata.Index_);
                page.FirstItem(pdata.FirstItem);
                page.LastItem(pdata.LastItem);
                page.IsLastPage(pdata.IsLastPage);
                self.Pages.push(page);
            }
        }
        self.LastPage = function () {
            return self.Pages().length == 0 ? null : self.Pages()[self.Pages().length - 1];
        };
    }

    var Order_DetailSettings = function (settings) {
        var self = this;
        self.data = settings || {};
        self.data.show_OrderID = self.data.show_OrderID || true;
        self.show_OrderID = ko.observable(self.data.show_OrderID);
        self.show_OrderID.subscribe(function (v) {
            self.data.show_OrderID = v;
        });
        self.data.collapse_OrderID = self.data.collapse_OrderID || false;
        self.collapse_OrderID = ko.observable(self.data.collapse_OrderID);
        self.collapse_OrderID.subscribe(function (v) {
            self.data.collapse_OrderID = v;
        });
        self.data.width_OrderID = self.data.width_OrderID || 'auto';
        self.width_OrderID = ko.observable(self.data.width_OrderID);
        self.width_OrderID.subscribe(function (v) {
            self.data.width_OrderID = v;
        });
        self.data.show_ProductID = self.data.show_ProductID || true;
        self.show_ProductID = ko.observable(self.data.show_ProductID);
        self.show_ProductID.subscribe(function (v) {
            self.data.show_ProductID = v;
        });
        self.data.collapse_ProductID = self.data.collapse_ProductID || false;
        self.collapse_ProductID = ko.observable(self.data.collapse_ProductID);
        self.collapse_ProductID.subscribe(function (v) {
            self.data.collapse_ProductID = v;
        });
        self.data.width_ProductID = self.data.width_ProductID || 'auto';
        self.width_ProductID = ko.observable(self.data.width_ProductID);
        self.width_ProductID.subscribe(function (v) {
            self.data.width_ProductID = v;
        });
        self.data.show_Quantity = self.data.show_Quantity || true;
        self.show_Quantity = ko.observable(self.data.show_Quantity);
        self.show_Quantity.subscribe(function (v) {
            self.data.show_Quantity = v;
        });
        self.data.collapse_Quantity = self.data.collapse_Quantity || false;
        self.collapse_Quantity = ko.observable(self.data.collapse_Quantity);
        self.collapse_Quantity.subscribe(function (v) {
            self.data.collapse_Quantity = v;
        });
        self.data.width_Quantity = self.data.width_Quantity || 'auto';
        self.width_Quantity = ko.observable(self.data.width_Quantity);
        self.width_Quantity.subscribe(function (v) {
            self.data.width_Quantity = v;
        });
        self.data.show_Discount = self.data.show_Discount || true;
        self.show_Discount = ko.observable(self.data.show_Discount);
        self.show_Discount.subscribe(function (v) {
            self.data.show_Discount = v;
        });
        self.data.collapse_Discount = self.data.collapse_Discount || false;
        self.collapse_Discount = ko.observable(self.data.collapse_Discount);
        self.collapse_Discount.subscribe(function (v) {
            self.data.collapse_Discount = v;
        });
        self.data.width_Discount = self.data.width_Discount || 'auto';
        self.width_Discount = ko.observable(self.data.width_Discount);
        self.width_Discount.subscribe(function (v) {
            self.data.width_Discount = v;
        });
        self.data.show_UnitPrice = self.data.show_UnitPrice || true;
        self.show_UnitPrice = ko.observable(self.data.show_UnitPrice);
        self.show_UnitPrice.subscribe(function (v) {
            self.data.show_UnitPrice = v;
        });
        self.data.collapse_UnitPrice = self.data.collapse_UnitPrice || false;
        self.collapse_UnitPrice = ko.observable(self.data.collapse_UnitPrice);
        self.collapse_UnitPrice.subscribe(function (v) {
            self.data.collapse_UnitPrice = v;
        });
        self.data.width_UnitPrice = self.data.width_UnitPrice || 'auto';
        self.width_UnitPrice = ko.observable(self.data.width_UnitPrice);
        self.width_UnitPrice.subscribe(function (v) {
            self.data.width_UnitPrice = v;
        });
    };

    var Order_DetailSet = function () {
        var self = this;
        self.set = {};

        var jsonstr = localStorage.getItem('Northwind');
        if (typeof jsonstr == 'undefined' || jsonstr == null) {
            self.settings = new Order_DetailSettings();
            var settings = { };
            settings.UIView = { };
            settings.UIView.Order_DetailSet = self.settings.data;
            localStorage.setItem('Northwind', JSON.stringify(settings));
        } else {
            var settings = JSON.parse(jsonstr);
            self.settings = new Order_DetailSettings(settings.UIView.Order_DetailSet);
        }

        self.PageSize_ = ko.observable(config.defaultPageSize);
        self.PageWindowSize = ko.observable(config.defaultPageBlockSize);
        self.PageBlockSize = ko.observable(config.defaultPageBlockSize);
        self.SetKindName = "Table";
        self.EntityName = "Order_Detail";
        self.TotalEntities = ko.observable(0);
        self.EntityCount = ko.observable(0);
        self.PageCount = ko.observable(0);
        self.PagesWindow = ko.observableArray([]);
        self.CurrentPage = ko.observable({});
        self.IsQueryStateChanged = ko.observable(false);
        self.BaseUrl = "";
        self.CurrentSorters = ko.observable(null);
        self.CurrentFilters = ko.observable(null);
        self.SortersStack = [];
        self.FiltersStack = [];
        self.SorterPath = ko.observableArray();
        self.FilterPath = ko.observableArray();
        self.PageBlocks = ko.observableArray([]);
        self.CurrBlockIndex = ko.observable(0);
        self.CurrentBlock = ko.pureComputed(function () {
            if (self.CurrBlockIndex() < 0 || self.CurrBlockIndex() >= self.PageBlocks().length - 1)
                return null;
            else
                return self.PageBlocks()[self.CurrBlockIndex()];
        });
        self.PrevBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx > 0) {
                return self.PageBlocks()[idx - 1];
            } else {
                return null;
            }
        });
        self.NextLoadedBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return self.PageBlocks()[idx + 1];
            } else {
                return null;
            }
        });
        self.MoreNextBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return true;
            } else {
                return self.PageBlocks().length > 0 && !self.PageBlocks()[self.PageBlocks().length - 1].IsLastBlock();
            }
        });
        self.LastPageBlock = ko.pureComputed(function () {
            return self.PageBlocks().length == 0 ? null : self.PageBlocks()[self.PageBlocks().length - 1];
        });

        self.ResetPageState = function () {
            self.CurrBlockIndex(0);
            self.PageBlocks.removeAll();
            self.IsQueryStateChanged(false)
        };

        self.IsFilteredView = ko.observable(false);

        self.HasFilteredView = ko.pureComputed(function () {
            return self.CurrentFilters() !== null && self.FilterClosed();
        });

        self.FilteredViewUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'Order_DetailSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'Order_DetailSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilteredEditUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'Order_DetailSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'Order_DetailSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilterClosed = ko.observable(false);

        self.RefreshSetState = function(qc) {
            self.IsQueryStateChanged(true);
            self.ResetPageState();
            self.PagesWindow.removeAll();
            if (typeof self.CurrentPage().Items !== 'undefined')
                self.CurrentPage().Items.removeAll();
        }

        self.GetSetInfo = function (tkfilter, _filter) {
            self.BaseUrl = config.baseUrl;
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/GetSetInfo",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ filter: _filter == null ? null : decodeURIComponent(_filter) })
            }).pipe(
                function (content) {
                    self.set = content;
                    self.IsFilteredView(typeof _filter !== 'undefined' && _filter !== null && _filter !== '');
                    self.TotalEntities(self.set.EntityCount);
                    self.CurrentSorters(new q.TokenOptions());
                    for (var i = 0; i < self.set.Sorters.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(self.set.Sorters[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    self.CurrentSorters().CanBeClosed = true;
                    self.CurrentSorters().isLocal = false;
                    return $.Deferred().resolve(self);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.getQueryExpr = function () {
            var sorters = [];
            var filters = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                sorters.push(self.SorterPath()[i]);
            for (var i = 0; i < self.FilterPath().length; i++)
                filters.push(self.FilterPath()[i]);
            return new q.QueryExpression(sorters, filters);
        }

        self.GetNextSorterOps = function (tkfilter) {
            var qtokens = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                qtokens.push(self.SorterPath()[i]);
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/GetNextSorterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ sorters: qtokens  })
            }).pipe(
                function (content) {
                    self.SortersStack.push(self.CurrentSorters());
                    self.CurrentSorters(new q.TokenOptions());
                    self.CurrentSorters().Hint = content.Hint;
                    self.CurrentSorters().CurrentExpr(content.CurrentExpr);
                    self.CurrentSorters().QuoteVal = content.QuoteVal;
                    self.CurrentSorters().CanBeClosed = content.CanBeClosed;
                    self.CurrentSorters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.GetNextFilterOps = function (tkfilter) {
            var qexpr = self.getQueryExpr();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/GetNextFilterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ qexpr: qexpr, tkstr: ""  })
            }).pipe(
                function (content) {
                    if (self.CurrentFilters() !== null)
                        self.FiltersStack.push(self.CurrentFilters());
                    self.FilterClosed(content.CanBeClosed);
                    self.CurrentFilters(new q.TokenOptions());
                    self.CurrentFilters().Hint = content.Hint;
                        self.CurrentFilters().CurrentExpr(content.CurrentExpr);
                    self.CurrentFilters().QuoteVal = content.QuoteVal;
                    self.CurrentFilters().CanBeClosed = content.CanBeClosed;
                    self.CurrentFilters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, true)) {
                            self.CurrentFilters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.NextPageBlock = function (qexpr, last, edit) {
            if (self.IsQueryStateChanged())
                self.ResetPageState();
            if (self.CurrBlockIndex() < self.PageBlocks().length) {
                return $.Deferred().resolve();
            }
            self.set.PageBlockSize = self.PageBlockSize();
            self.set.PageSize_ = self.PageSize_();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/NextPageBlock",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, qexpr: qexpr, prevlast: last  })
            }).pipe(
                function (data) {
                    if (last == null) 
                        self.EntityCount(data.TotalEntities);
                    self.PageCount(data.TotalPages);
                    if (data.Pages.length == 0) {
                        var lpb = self.LastPageBlock();
                        if (lpb !== null) {
                            lpb.IsLastBlock(true);
                            var lp = lpb.LastPage();
                            if (lp !== null) {
                                lp.IsLastPage(true);
                                self.CurrBlockIndex(self.CurrBlockIndex() - 1);
                            }
                        } else {
                            self.PagesWindow.removeAll();
                        }
                    }
                    else {
                        var idx0 = 0;
                        for (var i = 0; i < self.CurrBlockIndex(); i++ ) {
                            idx0 += self.PageBlocks()[i].BlockCount;
                        }
                        var pb = new Order_DetailPageBlock(self, idx0, data, edit);
                        pb.BlockIndex(self.PageBlocks().length);
                        self.PageBlocks.push(pb);
                        self.PagesWindow.removeAll();
                        for (var i = 0; i < pb.Pages().length; i++) {
                            self.PagesWindow.push(pb.Pages()[i]);
                        }
                    }
                    self.IsQueryStateChanged(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.AddOrUpdateEntities = function (changed) {
            if (changed == null || changed.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/AddOrUpdateEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: changed })
            }).pipe(
                function (data) {
                    //...
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.DeleteEntities = function (deleted) {
            if (deleted == null || deleted.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/DeleteEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: deleted })
            }).pipe(
                function (data) {
                    //..
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.LoadEntityByKey = function(OrderID, ProductID, isView) {
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/Order_DetailSet/LoadEntityByKey",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ OrderID: OrderID, ProductID: ProductID })
            }).pipe(
                function (data) {
                    if (isView)
                        return $.Deferred().resolve(new Order_DetailView(data));
                    else
                        return $.Deferred().resolve(new Order_Detail(data));
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        }

    }

    return {
        entityView: Order_DetailView,
        entityEdit: Order_Detail,
        entityPage: Order_DetailPage,
        entityPageBlock: Order_DetailPageBlock,
        settings: Order_DetailSettings,
        entitySet: Order_DetailSet
    }
})