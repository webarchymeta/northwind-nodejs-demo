/* ------------------------------------------------------------------------------
 *
 *     This code was generated by CGW X-Script Code Generator.
 *
 *     Archymeta Information Technologies Co., Ltd.
 *
 *     Changes to this file, especially those bit flags, may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * 
 ------------------------------------------------------------------------------ */

define(['knockout', 'config', 'queryModels' ], function (ko, config, q) {

    var dt = new Date();
    var utcoff = dt.getTimezoneOffset() * 60000;
    var getDateVal = function (val) {
        if (val == null) {
            return null;
        }
        var tv = val.substr(6);
        tv = tv.substr(0, tv.length - 2);
        var ms = parseInt(tv);
        return new Date(ms);
    };
    var toJsonDate = function (dt) {
        if (dt == null) {
            return null;
        }
        var str = "/Date(";
        str += (dt.getTime()).toString();
        var off = utcoff > 0 ? dt.getTimezoneOffset() : -dt.getTimezoneOffset();
        var h = off / 60;
        var hstr = h > 9 ? h.toString() : '0' + h.toString();
        var m = off % 60;
        var mstr = m > 9 ? m.toString() : '0' + m.toString();
        if (utcoff > 0) {
            str += '-' + hstr + mstr;
        } else {
            str += '+' + hstr + mstr;
        }
        return str + ")/";
    };

    var OrderView = function (data) {
        var self = this;
        self.IsViewModel = true;
        self.data = data;
        self.DistinctString = data !== null ? data.DistinctString : "";
        self.LookupQuery = data !== null ? "?OrderID=" + self.data.OrderID : "";

        self.CreateSet = function () {
            return new OrderSet();
        };

        self.OrderID = data.OrderID;
        self.CustomerID = data.CustomerID;
        self.ShipVia = data.ShipVia;
        self.EmployeeID = data.EmployeeID;
        self.Freight = data.Freight;
        self.OrderDate = getDateVal(data.OrderDate);
        self.ShipName = data.ShipName;
        self.RequiredDate = getDateVal(data.RequiredDate);
        self.ShipAddress = data.ShipAddress;
        self.ShipCity = data.ShipCity;
        self.ShipCountry = data.ShipCountry;
        self.ShippedDate = getDateVal(data.ShippedDate);
        self.ShipPostalCode = data.ShipPostalCode;
        self.ShipRegion = data.ShipRegion;
        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.OrderID == data.OrderID;
        }

        if (data.CustomerRef == null) {
            self.CustomerRef = ko.observable(null);
            self.IsCustomerRefMaterialized = ko.observable(data.CustomerID == null);
        } else {
            self.IsCustomerRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Customer', function (m) {
                self.CustomerRef = ko.observable(new m.entityView(data.CustomerRef));
                self.IsCustomerRefMaterialized(true);
            });
        }
        self.CustomerRefSummary = ko.pureComputed(function () {
            if (self.IsCustomerRefMaterialized() && data !== null) {
                return self.CustomerRef() ? self.CustomerRef.DistinctString : '';
            } else {
                return "";
            }
        });

        self.MaterializeCustomerRef = function () {
            if (self.IsCustomerRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/MaterializeCustomerRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.CustomerRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Customer', function (m) {
                            self.CustomerRef(new m.entityView(dref));
                            self.IsCustomerRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        if (data.EmployeeRef == null) {
            self.EmployeeRef = ko.observable(null);
            self.IsEmployeeRefMaterialized = ko.observable(data.EmployeeID == null);
        } else {
            self.IsEmployeeRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Employee', function (m) {
                self.EmployeeRef = ko.observable(new m.entityView(data.EmployeeRef));
                self.IsEmployeeRefMaterialized(true);
            });
        }
        self.EmployeeRefSummary = ko.pureComputed(function () {
            if (self.IsEmployeeRefMaterialized() && data !== null) {
                return self.EmployeeRef() ? self.EmployeeRef.DistinctString : '';
            } else {
                return "";
            }
        });

        self.MaterializeEmployeeRef = function () {
            if (self.IsEmployeeRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/MaterializeEmployeeRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.EmployeeRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Employee', function (m) {
                            self.EmployeeRef(new m.entityView(dref));
                            self.IsEmployeeRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        if (data.ShipperRef == null) {
            self.ShipperRef = ko.observable(null);
            self.IsShipperRefMaterialized = ko.observable(data.ShipVia == null);
        } else {
            self.IsShipperRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Shipper', function (m) {
                self.ShipperRef = ko.observable(new m.entityView(data.ShipperRef));
                self.IsShipperRefMaterialized(true);
            });
        }
        self.ShipperRefSummary = ko.pureComputed(function () {
            if (self.IsShipperRefMaterialized() && data !== null) {
                return self.ShipperRef() ? self.ShipperRef.DistinctString : '';
            } else {
                return "";
            }
        });

        self.MaterializeShipperRef = function () {
            if (self.IsShipperRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/MaterializeShipperRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.ShipperRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Shipper', function (m) {
                            self.ShipperRef(new m.entityView(dref));
                            self.IsShipperRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsAllOrder_DetailsMaterialized = ko.observable(false);
        if (data.Order_Details == null) {
            self.Order_Details = ko.observable(null);
            self.IsOrder_DetailsMaterialized = ko.observable(false);
        } else {
            self.IsOrder_DetailsMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order_Detail', function (m) {
                self.Order_Details = ko.observable(new m.entitySet(data.Order_Details));
                self.IsOrder_DetailsMaterialized(true);
            });
        }
        self.ChangedOrder_Details = ko.observableArray();

        if (data !== null && data.ChangedOrder_Details !== null) {
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order_Detail', function (m) {
                for (var i = 0; i < data.ChangedOrder_Details.length; i++) {
                    self.ChangedOrder_Details.push(new m.entityView(data.ChangedOrder_Details[i]));
                }
                self.IsAllOrder_DetailsMaterialized(true);
            });
        }

        self.MaterializeOrder_Details = function () {
            if (self.IsOrder_DetailsMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/MaterializeOrder_Details",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.Order_Details = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order_Detail', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.Order_Details(s);
                            self.IsOrder_DetailsMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.MaterializeAllOrder_Details = function () {
            if (self.IsAllOrder_DetailsMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/MaterializeAllOrder_Details",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (list) {
                    if (list !== null) {
                        self.data.ChangedOrder_Details = list;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order_Detail', function (m) {
                            for (var i = 0; i < list.length; i++) {
                                self.ChangedOrder_Details.push(new m.entityView(list[i]));
                            }
                            self.IsAllOrder_DetailsMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.shallowDataCopy = function() {
            return {
                OrderID: self.data.OrderID,
                CustomerID: self.data.CustomerID,
                ShipVia: self.data.ShipVia,
                EmployeeID: self.data.EmployeeID,
                Freight: self.data.Freight,
                OrderDate: self.data.OrderDate,
                ShipName: self.data.ShipName,
                RequiredDate: self.data.RequiredDate,
                ShipAddress: self.data.ShipAddress,
                ShipCity: self.data.ShipCity,
                ShipCountry: self.data.ShipCountry,
                ShippedDate: self.data.ShippedDate,
                ShipPostalCode: self.data.ShipPostalCode,
                ShipRegion: self.data.ShipRegion
            };
        }

        self.IsEntitySelected = ko.observable(false);
    }

    var Order = function (data) {
        var self = this;
        self.IsViewModel = false;
        self.TobeLoadMsg = ko.observable('to be loaded ...');
        self.Initializing = true;
        self.data = data;
        self.IsPersisted = ko.observable(data !== null);
        self.IsNewAddition = ko.observable(false);
        self.UpdateIndex = -1;
        self.DistinctString = ko.observable(data !== null ? data.DistinctString : "");
        self.LookupQuery = data !== null ? "entityedit?OrderID=" + self.data.OrderID : "";

        self.CreateSet = function () {
            return new OrderSet();
        };

        self.OrderID = data.OrderID;
        self.CustomerID = data.CustomerID;
        self.ShipVia = data.ShipVia;
        self.EmployeeID = ko.observable(data !== null ? data.EmployeeID : null);
        self.IsEmployeeIDModified = ko.observable(data !== null ? data.IsEmployeeIDModified : true);
        self.EmployeeID.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsEmployeeIDModified(self.data == null || self.data.EmployeeID !== val);
             }
         });
        self.EmployeeIDCss = ko.pureComputed(function () {
            if (self.IsEmployeeIDModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.Freight = data.Freight;
        self.OrderDate = ko.observable(data !== null ? getDateVal(data.OrderDate) : null);
        self.ShipName = data.ShipName;
        self.RequiredDate = ko.observable(data !== null ? getDateVal(data.RequiredDate) : null);
        self.IsRequiredDateModified = ko.observable(data !== null ? data.IsRequiredDateModified : true);
        self.RequiredDate.subscribe(function (val) {
             if (!self.Initializing) {
                 if (self.data == null) {
                     self.IsRequiredDateModified(true);
                 } else if (self.data.RequiredDate !== null && val !== null) {
                     var diff = getDateVal(self.data.RequiredDate) - val;
                     self.IsRequiredDateModified(diff < -999 || diff > 999);
                 } else if (self.data.RequiredDate == null && val == null) {
                     self.IsRequiredDateModified(false);
                 } else {
                     self.IsRequiredDateModified(true);
                 }
             }
         });
        self.RequiredDateCss = ko.pureComputed(function () {
            if (self.IsRequiredDateModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.ShipAddress = ko.observable(data !== null ? data.ShipAddress : null);
        self.IsShipAddressModified = ko.observable(data !== null ? data.IsShipAddressModified : true);
        self.ShipAddress.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsShipAddressModified(self.data == null || self.data.ShipAddress !== val);
             }
         });
        self.ShipAddressCss = ko.pureComputed(function () {
            if (self.IsShipAddressModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.ShipCity = ko.observable(data !== null ? data.ShipCity : null);
        self.IsShipCityModified = ko.observable(data !== null ? data.IsShipCityModified : true);
        self.ShipCity.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsShipCityModified(self.data == null || self.data.ShipCity !== val);
             }
         });
        self.ShipCityCss = ko.pureComputed(function () {
            if (self.IsShipCityModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.ShipCountry = ko.observable(data !== null ? data.ShipCountry : null);
        self.IsShipCountryModified = ko.observable(data !== null ? data.IsShipCountryModified : true);
        self.ShipCountry.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsShipCountryModified(self.data == null || self.data.ShipCountry !== val);
             }
         });
        self.ShipCountryCss = ko.pureComputed(function () {
            if (self.IsShipCountryModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.ShippedDate = ko.observable(data !== null ? getDateVal(data.ShippedDate) : null);
        self.IsShippedDateModified = ko.observable(data !== null ? data.IsShippedDateModified : true);
        self.ShippedDate.subscribe(function (val) {
             if (!self.Initializing) {
                 if (self.data == null) {
                     self.IsShippedDateModified(true);
                 } else if (self.data.ShippedDate !== null && val !== null) {
                     var diff = getDateVal(self.data.ShippedDate) - val;
                     self.IsShippedDateModified(diff < -999 || diff > 999);
                 } else if (self.data.ShippedDate == null && val == null) {
                     self.IsShippedDateModified(false);
                 } else {
                     self.IsShippedDateModified(true);
                 }
             }
         });
        self.ShippedDateCss = ko.pureComputed(function () {
            if (self.IsShippedDateModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.ShipPostalCode = ko.observable(data !== null ? data.ShipPostalCode : null);
        self.IsShipPostalCodeModified = ko.observable(data !== null ? data.IsShipPostalCodeModified : true);
        self.ShipPostalCode.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsShipPostalCodeModified(self.data == null || self.data.ShipPostalCode !== val);
             }
         });
        self.ShipPostalCodeCss = ko.pureComputed(function () {
            if (self.IsShipPostalCodeModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.ShipRegion = ko.observable(data !== null ? data.ShipRegion : null);
        self.IsShipRegionModified = ko.observable(data !== null ? data.IsShipRegionModified : true);
        self.ShipRegion.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsShipRegionModified(self.data == null || self.data.ShipRegion !== val);
             }
         });
        self.ShipRegionCss = ko.pureComputed(function () {
            if (self.IsShipRegionModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.IsEntityChanged = ko.observable(false);

        self.IfEntityChanged = ko.pureComputed(function () {
            return self.IsEmployeeIDModified() || self.IsRequiredDateModified() || self.IsShipAddressModified() || self.IsShipCityModified() || self.IsShipCountryModified() || self.IsShippedDateModified() || self.IsShipPostalCodeModified() || self.IsShipRegionModified();
        });

        self.IsEntityModified = function () {
            return self.IsEmployeeIDModified() || self.IsRequiredDateModified() || self.IsShipAddressModified() || self.IsShipCityModified() || self.IsShipCountryModified() || self.IsShippedDateModified() || self.IsShipPostalCodeModified() || self.IsShipRegionModified();
        }

        self.IsEntityComplete = function () {
            return true;
        };

        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.OrderID() == data.OrderID();
        }

        self.GetUpdatedData = function () {
            if (self.data == null) {
                return self.GetNewData();
            }
            var d = self.NewDataCopy();
            if (self.IsEmployeeIDModified() || self.IsRequiredDateModified() || self.IsShipAddressModified() || self.IsShipCityModified() || self.IsShipCountryModified() || self.IsShippedDateModified() || self.IsShipPostalCodeModified() || self.IsShipRegionModified()) {
                if (self.IsEmployeeIDModified()) {
                    d.EmployeeID = self.EmployeeID();
                    d.IsEmployeeIDModified = true;
                }
                if (self.IsRequiredDateModified()) {
                    d.RequiredDate = toJsonDate(self.RequiredDate());
                    d.IsRequiredDateModified = true;
                }
                if (self.IsShipAddressModified()) {
                    d.ShipAddress = self.ShipAddress();
                    d.IsShipAddressModified = true;
                }
                if (self.IsShipCityModified()) {
                    d.ShipCity = self.ShipCity();
                    d.IsShipCityModified = true;
                }
                if (self.IsShipCountryModified()) {
                    d.ShipCountry = self.ShipCountry();
                    d.IsShipCountryModified = true;
                }
                if (self.IsShippedDateModified()) {
                    d.ShippedDate = toJsonDate(self.ShippedDate());
                    d.IsShippedDateModified = true;
                }
                if (self.IsShipPostalCodeModified()) {
                    d.ShipPostalCode = self.ShipPostalCode();
                    d.IsShipPostalCodeModified = true;
                }
                if (self.IsShipRegionModified()) {
                    d.ShipRegion = self.ShipRegion();
                    d.IsShipRegionModified = true;
                }
                d.IsEntityChanged = true;
                return d;
            } else {
                return null;
            }
        };

        self.GetNewData = function () {
            var d = {
                "CustomerID": self.CustomerID,
                "ShipVia": self.ShipVia,
                "EmployeeID": self.EmployeeID(),
                "IsEmployeeIDModified": true,
                "Freight": self.Freight,
                "OrderDate": toJsonDate(self.OrderDate),
                "ShipName": self.ShipName,
                "RequiredDate": toJsonDate(self.RequiredDate()),
                "IsRequiredDateModified": true,
                "ShipAddress": self.ShipAddress(),
                "IsShipAddressModified": true,
                "ShipCity": self.ShipCity(),
                "IsShipCityModified": true,
                "ShipCountry": self.ShipCountry(),
                "IsShipCountryModified": true,
                "ShippedDate": toJsonDate(self.ShippedDate()),
                "IsShippedDateModified": true,
                "ShipPostalCode": self.ShipPostalCode(),
                "IsShipPostalCodeModified": true,
                "ShipRegion": self.ShipRegion(),
                "IsShipRegionModified": true,
                "IsEntityChanged": true,
                "IsPersisted": false
            };
            return d;
        };

        self.NewDataCopy = function () {
            var d = {
                "OrderID": self.data.OrderID,
                "CustomerID": self.data.CustomerID,
                "ShipVia": self.data.ShipVia,
                "EmployeeID": self.data.EmployeeID,
                "IsEmployeeIDModified": self.IsEmployeeIDModified(),
                "Freight": self.data.Freight,
                "OrderDate": self.data.OrderDate,
                "ShipName": self.data.ShipName,
                "RequiredDate": self.data.RequiredDate,
                "IsRequiredDateModified": self.IsRequiredDateModified(),
                "ShipAddress": self.data.ShipAddress,
                "IsShipAddressModified": self.IsShipAddressModified(),
                "ShipCity": self.data.ShipCity,
                "IsShipCityModified": self.IsShipCityModified(),
                "ShipCountry": self.data.ShipCountry,
                "IsShipCountryModified": self.IsShipCountryModified(),
                "ShippedDate": self.data.ShippedDate,
                "IsShippedDateModified": self.IsShippedDateModified(),
                "ShipPostalCode": self.data.ShipPostalCode,
                "IsShipPostalCodeModified": self.IsShipPostalCodeModified(),
                "ShipRegion": self.data.ShipRegion,
                "IsShipRegionModified": self.IsShipRegionModified(),
                "IsEntityChanged": self.data.IsEntityChanged,
                "IsPersisted": self.data.IsPersisted
            };
            return d;
        };

        self.UpdateData = function (dsrc) {
            if (self.data == null ) {
                return;
            }
            self.data.EmployeeID = dsrc.EmployeeID;
            self.EmployeeID(dsrc.EmployeeID);
            self.IsEmployeeIDModified(false);
            self.data.RequiredDate = dsrc.RequiredDate;
            self.RequiredDate(getDateVal(dsrc.RequiredDate));
            self.IsRequiredDateModified(false);
            self.data.ShipAddress = dsrc.ShipAddress;
            self.ShipAddress(dsrc.ShipAddress);
            self.IsShipAddressModified(false);
            self.data.ShipCity = dsrc.ShipCity;
            self.ShipCity(dsrc.ShipCity);
            self.IsShipCityModified(false);
            self.data.ShipCountry = dsrc.ShipCountry;
            self.ShipCountry(dsrc.ShipCountry);
            self.IsShipCountryModified(false);
            self.data.ShippedDate = dsrc.ShippedDate;
            self.ShippedDate(getDateVal(dsrc.ShippedDate));
            self.IsShippedDateModified(false);
            self.data.ShipPostalCode = dsrc.ShipPostalCode;
            self.ShipPostalCode(dsrc.ShipPostalCode);
            self.IsShipPostalCodeModified(false);
            self.data.ShipRegion = dsrc.ShipRegion;
            self.ShipRegion(dsrc.ShipRegion);
            self.IsShipRegionModified(false);
        };

        self.ResetData = function () {
            if (self.data == null ) {
                return;
            }
            if (self.IsEmployeeIDModified()) {
                self.EmployeeID(self.data.EmployeeID);
            }
            if (self.IsRequiredDateModified()) {
                self.RequiredDate(getDateVal(self.data.RequiredDate));
            }
            if (self.IsShipAddressModified()) {
                self.ShipAddress(self.data.ShipAddress);
            }
            if (self.IsShipCityModified()) {
                self.ShipCity(self.data.ShipCity);
            }
            if (self.IsShipCountryModified()) {
                self.ShipCountry(self.data.ShipCountry);
            }
            if (self.IsShippedDateModified()) {
                self.ShippedDate(getDateVal(self.data.ShippedDate));
            }
            if (self.IsShipPostalCodeModified()) {
                self.ShipPostalCode(self.data.ShipPostalCode);
            }
            if (self.IsShipRegionModified()) {
                self.ShipRegion(self.data.ShipRegion);
            }
        };

        self.shallowDataCopy = function() {
            return {
                OrderID: self.data.OrderID,
                CustomerID: self.data.CustomerID,
                ShipVia: self.data.ShipVia,
                EmployeeID: self.data.EmployeeID,
                Freight: self.data.Freight,
                OrderDate: self.data.OrderDate,
                ShipName: self.data.ShipName,
                RequiredDate: self.data.RequiredDate,
                ShipAddress: self.data.ShipAddress,
                ShipCity: self.data.ShipCity,
                ShipCountry: self.data.ShipCountry,
                ShippedDate: self.data.ShippedDate,
                ShipPostalCode: self.data.ShipPostalCode,
                ShipRegion: self.data.ShipRegion
            };
        }

        if (data == null) {
            self.IsCustomerRefMaterialized = ko.observable(true);
            self.CustomerRef = ko.observable(null);
        } else if (data.CustomerRef == null) {
            self.IsCustomerRefMaterialized = ko.observable(data.CustomerID == null);
            self.CustomerRef = ko.observable(null);
        } else {
            self.IsCustomerRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Customer', function (m) {
                self.CustomerRef = ko.observable(new m.entity(data.CustomerRef));
                self.IsCustomerRefMaterialized(true);
            });
        }

        self.CustomerRefSummary = ko.pureComputed(function () {
            if (self.IsCustomerRefMaterialized() && data !== null) {
                return self.CustomerRef() ? self.CustomerRef().DistinctString : '';
            } else {
                return self.TobeLoadMsg();
            }
        });

        self.MaterializeCustomerRef = function () {
            if (self.IsCustomerRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/MaterializeCustomerRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.CustomerRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Customer', function (m) {
                            self.CustomerRef(new m.entityEdit(m));
                            self.IsCustomerRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        if (data == null) {
            self.IsEmployeeRefMaterialized = ko.observable(true);
            self.EmployeeRef = ko.observable(null);
        } else if (data.EmployeeRef == null) {
            self.IsEmployeeRefMaterialized = ko.observable(data.EmployeeID == null);
            self.EmployeeRef = ko.observable(null);
        } else {
            self.IsEmployeeRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Employee', function (m) {
                self.EmployeeRef = ko.observable(new m.entity(data.EmployeeRef));
                self.IsEmployeeRefMaterialized(true);
            });
        }

        self.EmployeeRefSummary = ko.pureComputed(function () {
            if (self.IsEmployeeRefMaterialized() && data !== null) {
                return self.EmployeeRef() ? self.EmployeeRef().DistinctString : '';
            } else {
                return self.TobeLoadMsg();
            }
        });

        self.MaterializeEmployeeRef = function () {
            if (self.IsEmployeeRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/MaterializeEmployeeRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.EmployeeRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Employee', function (m) {
                            self.EmployeeRef(new m.entityEdit(m));
                            self.IsEmployeeRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        if (data == null) {
            self.IsShipperRefMaterialized = ko.observable(true);
            self.ShipperRef = ko.observable(null);
        } else if (data.ShipperRef == null) {
            self.IsShipperRefMaterialized = ko.observable(data.ShipVia == null);
            self.ShipperRef = ko.observable(null);
        } else {
            self.IsShipperRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Shipper', function (m) {
                self.ShipperRef = ko.observable(new m.entity(data.ShipperRef));
                self.IsShipperRefMaterialized(true);
            });
        }

        self.ShipperRefSummary = ko.pureComputed(function () {
            if (self.IsShipperRefMaterialized() && data !== null) {
                return self.ShipperRef() ? self.ShipperRef().DistinctString : '';
            } else {
                return self.TobeLoadMsg();
            }
        });

        self.MaterializeShipperRef = function () {
            if (self.IsShipperRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/MaterializeShipperRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.ShipperRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Shipper', function (m) {
                            self.ShipperRef(new m.entityEdit(m));
                            self.IsShipperRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsOrder_DetailsMaterialized = ko.observable(data == null);

        self.Order_Details = ko.observable(data !== null ? data.Order_Details : null);

        self.MaterializeOrder_Details = function () {
            if (self.IsOrder_DetailsMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/MaterializeOrder_Details",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.Order_Details = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order_Detail', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.Order_Details(s);
                            self.IsOrder_DetailsMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsEntitySelected = ko.observable(false);
        self.Initializing = false;
    }

    var OrderPage = function (s, edit) {
        var self = this;
        var editPage = edit;
        self.set = s;
        self.Index_ = ko.observable();
        self.PageNumber = ko.pureComputed(function () {
            return self.Index_() + 1;
        });
        self.FirstItem = ko.observable({});
        self.LastItem = ko.observable({});
        self.CurrentItem = ko.observable(null);
        self.IsLastPage = ko.observable(false);
        self.IsDataLoaded = ko.observable(false);
        self.IsPageSelected = ko.observable(false);
        self.Items =  ko.observableArray([]);
        self.GetPageItems = function (s) {
            if (self.IsDataLoaded()) 
                return $.Deferred().resolve();
            var qexpr = s.getQueryExpr();
            var lastItem = null;
            var ipage = self.Index_();
            if (self.Index_() > 0) {
                var blk = s.PageBlocks()[s.CurrBlockIndex()];
                if (blk.Pages()[0].Index_() !== ipage) {
                    for (var i = 0; i < blk.Pages().length; i++) {
                        if (blk.Pages()[i].Index_() == ipage - 1) {
                            lastItem = blk.Pages()[i].LastItem();
                            break;
                        }
                    }
                } else {
                    var prvb = s.PageBlocks()[s.CurrBlockIndex() - 1];
                    lastItem = prvb.Pages()[prvb.Pages().length - 1].LastItem();
                }
            }
            self.Items.removeAll();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/GetPageItems",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: s.set, qexpr: qexpr, prevlast: lastItem })
            }).pipe(
                function (items) {
                    for (var i = 0; i < items.length; i++) {
                        if (editPage)
                            self.Items.push(new Order(items[i]));
                        else
                            self.Items.push(new OrderView(items[i]));
                    }
                    self.IsDataLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        }
    }

    var OrderPageBlock = function (s, idx0, data, edit) {
        var self = this;
        var set = s;
        self.BlockIndex = ko.observable(0);
        self.BlockNumber = ko.pureComputed(function () { return self.BlockIndex() + 1; });
        self.IsBlockSelected = ko.pureComputed(function() {
            return set.CurrBlockIndex() == self.BlockIndex();
        });
        self.IsLastBlock = ko.observable(data.IsLastBlock);
        self.BlockCount = data.BlockCount;
        self.Pages = ko.observableArray([]);
        if (data.Pages) {
            for (var i = 0; i < data.Pages.length; i++ ) {
                var pdata = data.Pages[i];
                var page = new OrderPage(s, edit);
                page.Index_(idx0 + pdata.Index_);
                page.FirstItem(pdata.FirstItem);
                page.LastItem(pdata.LastItem);
                page.IsLastPage(pdata.IsLastPage);
                self.Pages.push(page);
            }
        }
        self.LastPage = function () {
            return self.Pages().length == 0 ? null : self.Pages()[self.Pages().length - 1];
        };
    }

    var OrderSettings = function (settings) {
        var self = this;
        self.data = settings || {};
        self.data.show_OrderID = self.data.show_OrderID || true;
        self.show_OrderID = ko.observable(self.data.show_OrderID);
        self.show_OrderID.subscribe(function (v) {
            self.data.show_OrderID = v;
        });
        self.data.collapse_OrderID = self.data.collapse_OrderID || false;
        self.collapse_OrderID = ko.observable(self.data.collapse_OrderID);
        self.collapse_OrderID.subscribe(function (v) {
            self.data.collapse_OrderID = v;
        });
        self.data.width_OrderID = self.data.width_OrderID || 'auto';
        self.width_OrderID = ko.observable(self.data.width_OrderID);
        self.width_OrderID.subscribe(function (v) {
            self.data.width_OrderID = v;
        });
        self.data.show_CustomerID = self.data.show_CustomerID || true;
        self.show_CustomerID = ko.observable(self.data.show_CustomerID);
        self.show_CustomerID.subscribe(function (v) {
            self.data.show_CustomerID = v;
        });
        self.data.collapse_CustomerID = self.data.collapse_CustomerID || false;
        self.collapse_CustomerID = ko.observable(self.data.collapse_CustomerID);
        self.collapse_CustomerID.subscribe(function (v) {
            self.data.collapse_CustomerID = v;
        });
        self.data.width_CustomerID = self.data.width_CustomerID || 'auto';
        self.width_CustomerID = ko.observable(self.data.width_CustomerID);
        self.width_CustomerID.subscribe(function (v) {
            self.data.width_CustomerID = v;
        });
        self.data.show_ShipVia = self.data.show_ShipVia || true;
        self.show_ShipVia = ko.observable(self.data.show_ShipVia);
        self.show_ShipVia.subscribe(function (v) {
            self.data.show_ShipVia = v;
        });
        self.data.collapse_ShipVia = self.data.collapse_ShipVia || false;
        self.collapse_ShipVia = ko.observable(self.data.collapse_ShipVia);
        self.collapse_ShipVia.subscribe(function (v) {
            self.data.collapse_ShipVia = v;
        });
        self.data.width_ShipVia = self.data.width_ShipVia || 'auto';
        self.width_ShipVia = ko.observable(self.data.width_ShipVia);
        self.width_ShipVia.subscribe(function (v) {
            self.data.width_ShipVia = v;
        });
        self.data.show_EmployeeID = self.data.show_EmployeeID || true;
        self.show_EmployeeID = ko.observable(self.data.show_EmployeeID);
        self.show_EmployeeID.subscribe(function (v) {
            self.data.show_EmployeeID = v;
        });
        self.data.collapse_EmployeeID = self.data.collapse_EmployeeID || false;
        self.collapse_EmployeeID = ko.observable(self.data.collapse_EmployeeID);
        self.collapse_EmployeeID.subscribe(function (v) {
            self.data.collapse_EmployeeID = v;
        });
        self.data.width_EmployeeID = self.data.width_EmployeeID || 'auto';
        self.width_EmployeeID = ko.observable(self.data.width_EmployeeID);
        self.width_EmployeeID.subscribe(function (v) {
            self.data.width_EmployeeID = v;
        });
        self.data.show_Freight = self.data.show_Freight || true;
        self.show_Freight = ko.observable(self.data.show_Freight);
        self.show_Freight.subscribe(function (v) {
            self.data.show_Freight = v;
        });
        self.data.collapse_Freight = self.data.collapse_Freight || false;
        self.collapse_Freight = ko.observable(self.data.collapse_Freight);
        self.collapse_Freight.subscribe(function (v) {
            self.data.collapse_Freight = v;
        });
        self.data.width_Freight = self.data.width_Freight || 'auto';
        self.width_Freight = ko.observable(self.data.width_Freight);
        self.width_Freight.subscribe(function (v) {
            self.data.width_Freight = v;
        });
        self.data.show_OrderDate = self.data.show_OrderDate || true;
        self.show_OrderDate = ko.observable(self.data.show_OrderDate);
        self.show_OrderDate.subscribe(function (v) {
            self.data.show_OrderDate = v;
        });
        self.data.collapse_OrderDate = self.data.collapse_OrderDate || false;
        self.collapse_OrderDate = ko.observable(self.data.collapse_OrderDate);
        self.collapse_OrderDate.subscribe(function (v) {
            self.data.collapse_OrderDate = v;
        });
        self.data.width_OrderDate = self.data.width_OrderDate || 'auto';
        self.width_OrderDate = ko.observable(self.data.width_OrderDate);
        self.width_OrderDate.subscribe(function (v) {
            self.data.width_OrderDate = v;
        });
        self.data.show_ShipName = self.data.show_ShipName || true;
        self.show_ShipName = ko.observable(self.data.show_ShipName);
        self.show_ShipName.subscribe(function (v) {
            self.data.show_ShipName = v;
        });
        self.data.collapse_ShipName = self.data.collapse_ShipName || false;
        self.collapse_ShipName = ko.observable(self.data.collapse_ShipName);
        self.collapse_ShipName.subscribe(function (v) {
            self.data.collapse_ShipName = v;
        });
        self.data.width_ShipName = self.data.width_ShipName || 'auto';
        self.width_ShipName = ko.observable(self.data.width_ShipName);
        self.width_ShipName.subscribe(function (v) {
            self.data.width_ShipName = v;
        });
        self.data.show_RequiredDate = self.data.show_RequiredDate || true;
        self.show_RequiredDate = ko.observable(self.data.show_RequiredDate);
        self.show_RequiredDate.subscribe(function (v) {
            self.data.show_RequiredDate = v;
        });
        self.data.collapse_RequiredDate = self.data.collapse_RequiredDate || false;
        self.collapse_RequiredDate = ko.observable(self.data.collapse_RequiredDate);
        self.collapse_RequiredDate.subscribe(function (v) {
            self.data.collapse_RequiredDate = v;
        });
        self.data.width_RequiredDate = self.data.width_RequiredDate || 'auto';
        self.width_RequiredDate = ko.observable(self.data.width_RequiredDate);
        self.width_RequiredDate.subscribe(function (v) {
            self.data.width_RequiredDate = v;
        });
        self.data.show_ShipAddress = self.data.show_ShipAddress || true;
        self.show_ShipAddress = ko.observable(self.data.show_ShipAddress);
        self.show_ShipAddress.subscribe(function (v) {
            self.data.show_ShipAddress = v;
        });
        self.data.collapse_ShipAddress = self.data.collapse_ShipAddress || false;
        self.collapse_ShipAddress = ko.observable(self.data.collapse_ShipAddress);
        self.collapse_ShipAddress.subscribe(function (v) {
            self.data.collapse_ShipAddress = v;
        });
        self.data.width_ShipAddress = self.data.width_ShipAddress || 'auto';
        self.width_ShipAddress = ko.observable(self.data.width_ShipAddress);
        self.width_ShipAddress.subscribe(function (v) {
            self.data.width_ShipAddress = v;
        });
        self.data.show_ShipCity = self.data.show_ShipCity || true;
        self.show_ShipCity = ko.observable(self.data.show_ShipCity);
        self.show_ShipCity.subscribe(function (v) {
            self.data.show_ShipCity = v;
        });
        self.data.collapse_ShipCity = self.data.collapse_ShipCity || false;
        self.collapse_ShipCity = ko.observable(self.data.collapse_ShipCity);
        self.collapse_ShipCity.subscribe(function (v) {
            self.data.collapse_ShipCity = v;
        });
        self.data.width_ShipCity = self.data.width_ShipCity || 'auto';
        self.width_ShipCity = ko.observable(self.data.width_ShipCity);
        self.width_ShipCity.subscribe(function (v) {
            self.data.width_ShipCity = v;
        });
        self.data.show_ShipCountry = self.data.show_ShipCountry || true;
        self.show_ShipCountry = ko.observable(self.data.show_ShipCountry);
        self.show_ShipCountry.subscribe(function (v) {
            self.data.show_ShipCountry = v;
        });
        self.data.collapse_ShipCountry = self.data.collapse_ShipCountry || false;
        self.collapse_ShipCountry = ko.observable(self.data.collapse_ShipCountry);
        self.collapse_ShipCountry.subscribe(function (v) {
            self.data.collapse_ShipCountry = v;
        });
        self.data.width_ShipCountry = self.data.width_ShipCountry || 'auto';
        self.width_ShipCountry = ko.observable(self.data.width_ShipCountry);
        self.width_ShipCountry.subscribe(function (v) {
            self.data.width_ShipCountry = v;
        });
        self.data.show_ShippedDate = self.data.show_ShippedDate || true;
        self.show_ShippedDate = ko.observable(self.data.show_ShippedDate);
        self.show_ShippedDate.subscribe(function (v) {
            self.data.show_ShippedDate = v;
        });
        self.data.collapse_ShippedDate = self.data.collapse_ShippedDate || false;
        self.collapse_ShippedDate = ko.observable(self.data.collapse_ShippedDate);
        self.collapse_ShippedDate.subscribe(function (v) {
            self.data.collapse_ShippedDate = v;
        });
        self.data.width_ShippedDate = self.data.width_ShippedDate || 'auto';
        self.width_ShippedDate = ko.observable(self.data.width_ShippedDate);
        self.width_ShippedDate.subscribe(function (v) {
            self.data.width_ShippedDate = v;
        });
        self.data.show_ShipPostalCode = self.data.show_ShipPostalCode || true;
        self.show_ShipPostalCode = ko.observable(self.data.show_ShipPostalCode);
        self.show_ShipPostalCode.subscribe(function (v) {
            self.data.show_ShipPostalCode = v;
        });
        self.data.collapse_ShipPostalCode = self.data.collapse_ShipPostalCode || false;
        self.collapse_ShipPostalCode = ko.observable(self.data.collapse_ShipPostalCode);
        self.collapse_ShipPostalCode.subscribe(function (v) {
            self.data.collapse_ShipPostalCode = v;
        });
        self.data.width_ShipPostalCode = self.data.width_ShipPostalCode || 'auto';
        self.width_ShipPostalCode = ko.observable(self.data.width_ShipPostalCode);
        self.width_ShipPostalCode.subscribe(function (v) {
            self.data.width_ShipPostalCode = v;
        });
        self.data.show_ShipRegion = self.data.show_ShipRegion || true;
        self.show_ShipRegion = ko.observable(self.data.show_ShipRegion);
        self.show_ShipRegion.subscribe(function (v) {
            self.data.show_ShipRegion = v;
        });
        self.data.collapse_ShipRegion = self.data.collapse_ShipRegion || false;
        self.collapse_ShipRegion = ko.observable(self.data.collapse_ShipRegion);
        self.collapse_ShipRegion.subscribe(function (v) {
            self.data.collapse_ShipRegion = v;
        });
        self.data.width_ShipRegion = self.data.width_ShipRegion || 'auto';
        self.width_ShipRegion = ko.observable(self.data.width_ShipRegion);
        self.width_ShipRegion.subscribe(function (v) {
            self.data.width_ShipRegion = v;
        });
    };

    var OrderSet = function () {
        var self = this;
        self.set = {};

        var jsonstr = localStorage.getItem('Northwind');
        if (typeof jsonstr == 'undefined' || jsonstr == null) {
            self.settings = new OrderSettings();
            var settings = { };
            settings.UIView = { };
            settings.UIView.OrderSet = self.settings.data;
            localStorage.setItem('Northwind', JSON.stringify(settings));
        } else {
            var settings = JSON.parse(jsonstr);
            self.settings = new OrderSettings(settings.UIView.OrderSet);
        }

        self.PageSize_ = ko.observable(config.defaultPageSize);
        self.PageWindowSize = ko.observable(config.defaultPageBlockSize);
        self.PageBlockSize = ko.observable(config.defaultPageBlockSize);
        self.SetKindName = "Table";
        self.EntityName = "Order";
        self.TotalEntities = ko.observable(0);
        self.EntityCount = ko.observable(0);
        self.PageCount = ko.observable(0);
        self.PagesWindow = ko.observableArray([]);
        self.CurrentPage = ko.observable({});
        self.IsQueryStateChanged = ko.observable(false);
        self.BaseUrl = "";
        self.CurrentSorters = ko.observable(null);
        self.CurrentFilters = ko.observable(null);
        self.SortersStack = [];
        self.FiltersStack = [];
        self.SorterPath = ko.observableArray();
        self.FilterPath = ko.observableArray();
        self.PageBlocks = ko.observableArray([]);
        self.CurrBlockIndex = ko.observable(0);
        self.CurrentBlock = ko.pureComputed(function () {
            if (self.CurrBlockIndex() < 0 || self.CurrBlockIndex() >= self.PageBlocks().length - 1)
                return null;
            else
                return self.PageBlocks()[self.CurrBlockIndex()];
        });
        self.PrevBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx > 0) {
                return self.PageBlocks()[idx - 1];
            } else {
                return null;
            }
        });
        self.NextLoadedBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return self.PageBlocks()[idx + 1];
            } else {
                return null;
            }
        });
        self.MoreNextBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return true;
            } else {
                return self.PageBlocks().length > 0 && !self.PageBlocks()[self.PageBlocks().length - 1].IsLastBlock();
            }
        });
        self.LastPageBlock = ko.pureComputed(function () {
            return self.PageBlocks().length == 0 ? null : self.PageBlocks()[self.PageBlocks().length - 1];
        });

        self.ResetPageState = function () {
            self.CurrBlockIndex(0);
            self.PageBlocks.removeAll();
            self.IsQueryStateChanged(false)
        };

        self.IsFilteredView = ko.observable(false);

        self.HasFilteredView = ko.pureComputed(function () {
            return self.CurrentFilters() !== null && self.FilterClosed();
        });

        self.FilteredViewUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'OrderSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'OrderSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilteredEditUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'OrderSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'OrderSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilterClosed = ko.observable(false);

        self.RefreshSetState = function(qc) {
            self.IsQueryStateChanged(true);
            self.ResetPageState();
            self.PagesWindow.removeAll();
            if (typeof self.CurrentPage().Items !== 'undefined')
                self.CurrentPage().Items.removeAll();
        }

        self.GetSetInfo = function (tkfilter, _filter) {
            self.BaseUrl = config.baseUrl;
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/GetSetInfo",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ filter: _filter == null ? null : decodeURIComponent(_filter) })
            }).pipe(
                function (content) {
                    self.set = content;
                    self.IsFilteredView(typeof _filter !== 'undefined' && _filter !== null && _filter !== '');
                    self.TotalEntities(self.set.EntityCount);
                    self.CurrentSorters(new q.TokenOptions());
                    for (var i = 0; i < self.set.Sorters.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(self.set.Sorters[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    self.CurrentSorters().CanBeClosed = true;
                    self.CurrentSorters().isLocal = false;
                    return $.Deferred().resolve(self);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.getQueryExpr = function () {
            var sorters = [];
            var filters = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                sorters.push(self.SorterPath()[i]);
            for (var i = 0; i < self.FilterPath().length; i++)
                filters.push(self.FilterPath()[i]);
            return new q.QueryExpression(sorters, filters);
        }

        self.GetNextSorterOps = function (tkfilter) {
            var qtokens = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                qtokens.push(self.SorterPath()[i]);
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/GetNextSorterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ sorters: qtokens  })
            }).pipe(
                function (content) {
                    self.SortersStack.push(self.CurrentSorters());
                    self.CurrentSorters(new q.TokenOptions());
                    self.CurrentSorters().Hint = content.Hint;
                    self.CurrentSorters().CurrentExpr(content.CurrentExpr);
                    self.CurrentSorters().QuoteVal = content.QuoteVal;
                    self.CurrentSorters().CanBeClosed = content.CanBeClosed;
                    self.CurrentSorters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.GetNextFilterOps = function (tkfilter) {
            var qexpr = self.getQueryExpr();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/GetNextFilterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ qexpr: qexpr, tkstr: ""  })
            }).pipe(
                function (content) {
                    if (self.CurrentFilters() !== null)
                        self.FiltersStack.push(self.CurrentFilters());
                    self.FilterClosed(content.CanBeClosed);
                    self.CurrentFilters(new q.TokenOptions());
                    self.CurrentFilters().Hint = content.Hint;
                        self.CurrentFilters().CurrentExpr(content.CurrentExpr);
                    self.CurrentFilters().QuoteVal = content.QuoteVal;
                    self.CurrentFilters().CanBeClosed = content.CanBeClosed;
                    self.CurrentFilters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, true)) {
                            self.CurrentFilters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.NextPageBlock = function (qexpr, last, edit) {
            if (self.IsQueryStateChanged())
                self.ResetPageState();
            if (self.CurrBlockIndex() < self.PageBlocks().length) {
                return $.Deferred().resolve();
            }
            self.set.PageBlockSize = self.PageBlockSize();
            self.set.PageSize_ = self.PageSize_();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/NextPageBlock",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, qexpr: qexpr, prevlast: last  })
            }).pipe(
                function (data) {
                    if (last == null) 
                        self.EntityCount(data.TotalEntities);
                    self.PageCount(data.TotalPages);
                    if (data.Pages.length == 0) {
                        var lpb = self.LastPageBlock();
                        if (lpb !== null) {
                            lpb.IsLastBlock(true);
                            var lp = lpb.LastPage();
                            if (lp !== null) {
                                lp.IsLastPage(true);
                                self.CurrBlockIndex(self.CurrBlockIndex() - 1);
                            }
                        } else {
                            self.PagesWindow.removeAll();
                        }
                    }
                    else {
                        var idx0 = 0;
                        for (var i = 0; i < self.CurrBlockIndex(); i++ ) {
                            idx0 += self.PageBlocks()[i].BlockCount;
                        }
                        var pb = new OrderPageBlock(self, idx0, data, edit);
                        pb.BlockIndex(self.PageBlocks().length);
                        self.PageBlocks.push(pb);
                        self.PagesWindow.removeAll();
                        for (var i = 0; i < pb.Pages().length; i++) {
                            self.PagesWindow.push(pb.Pages()[i]);
                        }
                    }
                    self.IsQueryStateChanged(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.AddOrUpdateEntities = function (changed) {
            if (changed == null || changed.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/AddOrUpdateEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: changed })
            }).pipe(
                function (data) {
                    //...
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.DeleteEntities = function (deleted) {
            if (deleted == null || deleted.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/DeleteEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: deleted })
            }).pipe(
                function (data) {
                    //..
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.LoadEntityByKey = function(OrderID, isView) {
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/OrderSet/LoadEntityByKey",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ OrderID: OrderID })
            }).pipe(
                function (data) {
                    if (isView)
                        return $.Deferred().resolve(new OrderView(data));
                    else
                        return $.Deferred().resolve(new Order(data));
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        }

    }

    return {
        entityView: OrderView,
        entityEdit: Order,
        entityPage: OrderPage,
        entityPageBlock: OrderPageBlock,
        settings: OrderSettings,
        entitySet: OrderSet
    }
})