/* ------------------------------------------------------------------------------
 *
 *     This code was generated by CGW X-Script Code Generator.
 *
 *     Archymeta Information Technologies Co., Ltd.
 *
 *     Changes to this file, especially those bit flags, may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * 
 ------------------------------------------------------------------------------ */

define(['knockout', 'config', 'queryModels' ], function (ko, config, q) {

    var SupplierView = function (data) {
        var self = this;
        self.IsViewModel = true;
        self.data = data;
        self.DistinctString = data !== null ? data.DistinctString : "";
        self.LookupQuery = data !== null ? "?SupplierID=" + self.data.SupplierID : "";

        self.CreateSet = function () {
            return new SupplierSet();
        };

        self.SupplierID = data.SupplierID;
        self.CompanyName = data.CompanyName;
        self.HomePage = data.HomePage;
        self.IsHomePageLoaded = ko.observable(data.IsHomePageLoaded);

        self.LoadEntityHomePage = function () {
            if (self.IsHomePageLoaded()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/LoadEntityHomePage",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _SupplierID: self.data.SupplierID })
            }).pipe(
                function (data) {
                    if (data !== null) {
                        self.HomePage(data);
                    }
                    self.IsHomePageLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.Address = data.Address;
        self.City = data.City;
        self.ContactName = data.ContactName;
        self.ContactTitle = data.ContactTitle;
        self.Country = data.Country;
        self.Fax = data.Fax;
        self.Phone = data.Phone;
        self.PostalCode = data.PostalCode;
        self.Region = data.Region;
        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.SupplierID == data.SupplierID;
        }

        self.HomePageQuery = 'load-delayed-HomePage?SupplierID=' + self.data.SupplierID + '&contentType=text/plain';

        self.IsAllProductsMaterialized = ko.observable(false);
        if (data.Products == null) {
            self.Products = ko.observable(null);
            self.IsProductsMaterialized = ko.observable(false);
        } else {
            self.IsProductsMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Product', function (m) {
                self.Products = ko.observable(new m.entitySet(data.Products));
                self.IsProductsMaterialized(true);
            });
        }
        self.ChangedProducts = ko.observableArray();

        if (data !== null && data.ChangedProducts !== null) {
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Product', function (m) {
                for (var i = 0; i < data.ChangedProducts.length; i++) {
                    self.ChangedProducts.push(new m.entityView(data.ChangedProducts[i]));
                }
                self.IsAllProductsMaterialized(true);
            });
        }

        self.MaterializeProducts = function () {
            if (self.IsProductsMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/MaterializeProducts",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.Products = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Product', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.Products(s);
                            self.IsProductsMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.MaterializeAllProducts = function () {
            if (self.IsAllProductsMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/MaterializeAllProducts",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (list) {
                    if (list !== null) {
                        self.data.ChangedProducts = list;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Product', function (m) {
                            for (var i = 0; i < list.length; i++) {
                                self.ChangedProducts.push(new m.entityView(list[i]));
                            }
                            self.IsAllProductsMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.shallowDataCopy = function() {
            return {
                SupplierID: self.data.SupplierID,
                CompanyName: self.data.CompanyName,
                HomePage: self.data.HomePage,
                Address: self.data.Address,
                City: self.data.City,
                ContactName: self.data.ContactName,
                ContactTitle: self.data.ContactTitle,
                Country: self.data.Country,
                Fax: self.data.Fax,
                Phone: self.data.Phone,
                PostalCode: self.data.PostalCode,
                Region: self.data.Region
            };
        }

        self.IsEntitySelected = ko.observable(false);
    }

    var Supplier = function (data) {
        var self = this;
        self.IsViewModel = false;
        self.TobeLoadMsg = ko.observable('to be loaded ...');
        self.Initializing = true;
        self.data = data;
        self.IsPersisted = ko.observable(data !== null);
        self.IsNewAddition = ko.observable(false);
        self.UpdateIndex = -1;
        self.DistinctString = ko.observable(data !== null ? data.DistinctString : "");
        self.LookupQuery = data !== null ? "entityedit?SupplierID=" + self.data.SupplierID : "";

        self.CreateSet = function () {
            return new SupplierSet();
        };

        self.SupplierID = data.SupplierID;
        self.CompanyName = data.CompanyName;
        self.HomePage = ko.observable(data !== null ? data.HomePage : null);
        self.IsHomePageModified = ko.observable(data !== null ? data.IsHomePageModified : true);
        self.HomePage.subscribe(function (val) {
             if (!self.Initializing) {
                 if (self.data == null) {
                     self.IsHomePageModified(true);
                 } else if (self.IsHomePageLoaded()) {
                     self.IsHomePageModified(self.data.HomePage !== val);
                 }
             }
         });
        self.HomePageCss = ko.pureComputed(function () {
            if (self.IsHomePageModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.IsHomePageLoaded = ko.observable(data !== null ? data.IsHomePageLoaded : true);
        self.LoadEntityHomePage = function () {
            if (self.IsHomePageLoaded()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/LoadEntityHomePage",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _SupplierID: self.data.SupplierID })
            }).pipe(
                function (data) {
                    if (data !== null) {
                        self.Initializing = true;
                        self.HomePage(data);
                        self.Initializing = false;
                    }
                    self.IsHomePageLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.UpdateEntityHomePage = function () {
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/UpdateEntityHomePage",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _SupplierID: self.data.SupplierID, data: self.HomePage() })
            }).pipe(
                function (content) {
                    self.data.HomePage = self.HomePage();
                    self.IsHomePageModified(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.Address = ko.observable(data !== null ? data.Address : null);
        self.IsAddressModified = ko.observable(data !== null ? data.IsAddressModified : true);
        self.Address.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsAddressModified(self.data == null || self.data.Address !== val);
             }
         });
        self.AddressCss = ko.pureComputed(function () {
            if (self.IsAddressModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.City = ko.observable(data !== null ? data.City : null);
        self.IsCityModified = ko.observable(data !== null ? data.IsCityModified : true);
        self.City.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsCityModified(self.data == null || self.data.City !== val);
             }
         });
        self.CityCss = ko.pureComputed(function () {
            if (self.IsCityModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.ContactName = ko.observable(data !== null ? data.ContactName : null);
        self.IsContactNameModified = ko.observable(data !== null ? data.IsContactNameModified : true);
        self.ContactName.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsContactNameModified(self.data == null || self.data.ContactName !== val);
             }
         });
        self.ContactNameCss = ko.pureComputed(function () {
            if (self.IsContactNameModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.ContactTitle = ko.observable(data !== null ? data.ContactTitle : null);
        self.IsContactTitleModified = ko.observable(data !== null ? data.IsContactTitleModified : true);
        self.ContactTitle.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsContactTitleModified(self.data == null || self.data.ContactTitle !== val);
             }
         });
        self.ContactTitleCss = ko.pureComputed(function () {
            if (self.IsContactTitleModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.Country = ko.observable(data !== null ? data.Country : null);
        self.IsCountryModified = ko.observable(data !== null ? data.IsCountryModified : true);
        self.Country.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsCountryModified(self.data == null || self.data.Country !== val);
             }
         });
        self.CountryCss = ko.pureComputed(function () {
            if (self.IsCountryModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.Fax = ko.observable(data !== null ? data.Fax : null);
        self.IsFaxModified = ko.observable(data !== null ? data.IsFaxModified : true);
        self.Fax.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsFaxModified(self.data == null || self.data.Fax !== val);
             }
         });
        self.FaxCss = ko.pureComputed(function () {
            if (self.IsFaxModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.Phone = ko.observable(data !== null ? data.Phone : null);
        self.IsPhoneModified = ko.observable(data !== null ? data.IsPhoneModified : true);
        self.Phone.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsPhoneModified(self.data == null || self.data.Phone !== val);
             }
         });
        self.PhoneCss = ko.pureComputed(function () {
            if (self.IsPhoneModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.PostalCode = ko.observable(data !== null ? data.PostalCode : null);
        self.IsPostalCodeModified = ko.observable(data !== null ? data.IsPostalCodeModified : true);
        self.PostalCode.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsPostalCodeModified(self.data == null || self.data.PostalCode !== val);
             }
         });
        self.PostalCodeCss = ko.pureComputed(function () {
            if (self.IsPostalCodeModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.Region = ko.observable(data !== null ? data.Region : null);
        self.IsRegionModified = ko.observable(data !== null ? data.IsRegionModified : true);
        self.Region.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsRegionModified(self.data == null || self.data.Region !== val);
             }
         });
        self.RegionCss = ko.pureComputed(function () {
            if (self.IsRegionModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.HomePageQuery = 'load-delayed-HomePage?SupplierID=' + self.data.SupplierID + '&contentType=text/plain';

        self.IsEntityChanged = ko.observable(false);

        self.IfEntityChanged = ko.pureComputed(function () {
            return self.IsHomePageModified() || self.IsAddressModified() || self.IsCityModified() || self.IsContactNameModified() || self.IsContactTitleModified() || self.IsCountryModified() || self.IsFaxModified() || self.IsPhoneModified() || self.IsPostalCodeModified() || self.IsRegionModified();
        });

        self.IsEntityModified = function () {
            return self.IsHomePageModified() || self.IsAddressModified() || self.IsCityModified() || self.IsContactNameModified() || self.IsContactTitleModified() || self.IsCountryModified() || self.IsFaxModified() || self.IsPhoneModified() || self.IsPostalCodeModified() || self.IsRegionModified();
        }

        self.IsEntityComplete = function () {
            return self.CompanyName !== null;
        };

        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.SupplierID() == data.SupplierID();
        }

        self.GetUpdatedData = function () {
            if (self.data == null) {
                return self.GetNewData();
            }
            var d = self.NewDataCopy();
            if (self.IsHomePageModified() || self.IsAddressModified() || self.IsCityModified() || self.IsContactNameModified() || self.IsContactTitleModified() || self.IsCountryModified() || self.IsFaxModified() || self.IsPhoneModified() || self.IsPostalCodeModified() || self.IsRegionModified()) {
                if (self.IsHomePageModified()) {
                    d.HomePage = self.HomePage();
                    d.IsHomePageModified = true;
                    d.IsHomePageLoaded = self.IsHomePageLoaded();;
                }
                if (self.IsAddressModified()) {
                    d.Address = self.Address();
                    d.IsAddressModified = true;
                }
                if (self.IsCityModified()) {
                    d.City = self.City();
                    d.IsCityModified = true;
                }
                if (self.IsContactNameModified()) {
                    d.ContactName = self.ContactName();
                    d.IsContactNameModified = true;
                }
                if (self.IsContactTitleModified()) {
                    d.ContactTitle = self.ContactTitle();
                    d.IsContactTitleModified = true;
                }
                if (self.IsCountryModified()) {
                    d.Country = self.Country();
                    d.IsCountryModified = true;
                }
                if (self.IsFaxModified()) {
                    d.Fax = self.Fax();
                    d.IsFaxModified = true;
                }
                if (self.IsPhoneModified()) {
                    d.Phone = self.Phone();
                    d.IsPhoneModified = true;
                }
                if (self.IsPostalCodeModified()) {
                    d.PostalCode = self.PostalCode();
                    d.IsPostalCodeModified = true;
                }
                if (self.IsRegionModified()) {
                    d.Region = self.Region();
                    d.IsRegionModified = true;
                }
                d.IsEntityChanged = true;
                return d;
            } else {
                return null;
            }
        };

        self.GetNewData = function () {
            if (self.CompanyName == null) {
                throw "CompanyName is required!";
            }    
            var d = {
                "CompanyName": self.CompanyName,
                "HomePage": self.HomePage(),
                "IsHomePageModified": true,
                "Address": self.Address(),
                "IsAddressModified": true,
                "City": self.City(),
                "IsCityModified": true,
                "ContactName": self.ContactName(),
                "IsContactNameModified": true,
                "ContactTitle": self.ContactTitle(),
                "IsContactTitleModified": true,
                "Country": self.Country(),
                "IsCountryModified": true,
                "Fax": self.Fax(),
                "IsFaxModified": true,
                "Phone": self.Phone(),
                "IsPhoneModified": true,
                "PostalCode": self.PostalCode(),
                "IsPostalCodeModified": true,
                "Region": self.Region(),
                "IsRegionModified": true,
                "IsEntityChanged": true,
                "IsPersisted": false
            };
            return d;
        };

        self.NewDataCopy = function () {
            var d = {
                "SupplierID": self.data.SupplierID,
                "CompanyName": self.data.CompanyName,
                "HomePage": self.data.HomePage,
                "IsHomePageModified": self.IsHomePageModified(),
                "Address": self.data.Address,
                "IsAddressModified": self.IsAddressModified(),
                "City": self.data.City,
                "IsCityModified": self.IsCityModified(),
                "ContactName": self.data.ContactName,
                "IsContactNameModified": self.IsContactNameModified(),
                "ContactTitle": self.data.ContactTitle,
                "IsContactTitleModified": self.IsContactTitleModified(),
                "Country": self.data.Country,
                "IsCountryModified": self.IsCountryModified(),
                "Fax": self.data.Fax,
                "IsFaxModified": self.IsFaxModified(),
                "Phone": self.data.Phone,
                "IsPhoneModified": self.IsPhoneModified(),
                "PostalCode": self.data.PostalCode,
                "IsPostalCodeModified": self.IsPostalCodeModified(),
                "Region": self.data.Region,
                "IsRegionModified": self.IsRegionModified(),
                "IsEntityChanged": self.data.IsEntityChanged,
                "IsPersisted": self.data.IsPersisted
            };
            return d;
        };

        self.UpdateData = function (dsrc) {
            if (self.data == null ) {
                return;
            }
            self.data.HomePage = dsrc.HomePage;
            self.HomePage(dsrc.HomePage);
            self.IsHomePageModified(false);
            self.data.Address = dsrc.Address;
            self.Address(dsrc.Address);
            self.IsAddressModified(false);
            self.data.City = dsrc.City;
            self.City(dsrc.City);
            self.IsCityModified(false);
            self.data.ContactName = dsrc.ContactName;
            self.ContactName(dsrc.ContactName);
            self.IsContactNameModified(false);
            self.data.ContactTitle = dsrc.ContactTitle;
            self.ContactTitle(dsrc.ContactTitle);
            self.IsContactTitleModified(false);
            self.data.Country = dsrc.Country;
            self.Country(dsrc.Country);
            self.IsCountryModified(false);
            self.data.Fax = dsrc.Fax;
            self.Fax(dsrc.Fax);
            self.IsFaxModified(false);
            self.data.Phone = dsrc.Phone;
            self.Phone(dsrc.Phone);
            self.IsPhoneModified(false);
            self.data.PostalCode = dsrc.PostalCode;
            self.PostalCode(dsrc.PostalCode);
            self.IsPostalCodeModified(false);
            self.data.Region = dsrc.Region;
            self.Region(dsrc.Region);
            self.IsRegionModified(false);
        };

        self.ResetData = function () {
            if (self.data == null ) {
                return;
            }
            if (self.IsHomePageModified()) {
                self.HomePage(self.data.HomePage);
            }
            if (self.IsAddressModified()) {
                self.Address(self.data.Address);
            }
            if (self.IsCityModified()) {
                self.City(self.data.City);
            }
            if (self.IsContactNameModified()) {
                self.ContactName(self.data.ContactName);
            }
            if (self.IsContactTitleModified()) {
                self.ContactTitle(self.data.ContactTitle);
            }
            if (self.IsCountryModified()) {
                self.Country(self.data.Country);
            }
            if (self.IsFaxModified()) {
                self.Fax(self.data.Fax);
            }
            if (self.IsPhoneModified()) {
                self.Phone(self.data.Phone);
            }
            if (self.IsPostalCodeModified()) {
                self.PostalCode(self.data.PostalCode);
            }
            if (self.IsRegionModified()) {
                self.Region(self.data.Region);
            }
        };

        self.shallowDataCopy = function() {
            return {
                SupplierID: self.data.SupplierID,
                CompanyName: self.data.CompanyName,
                HomePage: self.data.HomePage,
                Address: self.data.Address,
                City: self.data.City,
                ContactName: self.data.ContactName,
                ContactTitle: self.data.ContactTitle,
                Country: self.data.Country,
                Fax: self.data.Fax,
                Phone: self.data.Phone,
                PostalCode: self.data.PostalCode,
                Region: self.data.Region
            };
        }

        self.IsProductsMaterialized = ko.observable(data == null);

        self.Products = ko.observable(data !== null ? data.Products : null);

        self.MaterializeProducts = function () {
            if (self.IsProductsMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/MaterializeProducts",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.Products = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Product', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.Products(s);
                            self.IsProductsMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsEntitySelected = ko.observable(false);
        self.Initializing = false;
    }

    var SupplierPage = function (s, edit) {
        var self = this;
        var editPage = edit;
        self.set = s;
        self.Index_ = ko.observable();
        self.PageNumber = ko.pureComputed(function () {
            return self.Index_() + 1;
        });
        self.FirstItem = ko.observable({});
        self.LastItem = ko.observable({});
        self.CurrentItem = ko.observable(null);
        self.IsLastPage = ko.observable(false);
        self.IsDataLoaded = ko.observable(false);
        self.IsPageSelected = ko.observable(false);
        self.Items =  ko.observableArray([]);
        self.GetPageItems = function (s) {
            if (self.IsDataLoaded()) 
                return $.Deferred().resolve();
            var qexpr = s.getQueryExpr();
            var lastItem = null;
            var ipage = self.Index_();
            if (self.Index_() > 0) {
                var blk = s.PageBlocks()[s.CurrBlockIndex()];
                if (blk.Pages()[0].Index_() !== ipage) {
                    for (var i = 0; i < blk.Pages().length; i++) {
                        if (blk.Pages()[i].Index_() == ipage - 1) {
                            lastItem = blk.Pages()[i].LastItem();
                            break;
                        }
                    }
                } else {
                    var prvb = s.PageBlocks()[s.CurrBlockIndex() - 1];
                    lastItem = prvb.Pages()[prvb.Pages().length - 1].LastItem();
                }
            }
            self.Items.removeAll();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/GetPageItems",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: s.set, qexpr: qexpr, prevlast: lastItem })
            }).pipe(
                function (items) {
                    for (var i = 0; i < items.length; i++) {
                        if (editPage)
                            self.Items.push(new Supplier(items[i]));
                        else
                            self.Items.push(new SupplierView(items[i]));
                    }
                    self.IsDataLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        }
    }

    var SupplierPageBlock = function (s, idx0, data, edit) {
        var self = this;
        var set = s;
        self.BlockIndex = ko.observable(0);
        self.BlockNumber = ko.pureComputed(function () { return self.BlockIndex() + 1; });
        self.IsBlockSelected = ko.pureComputed(function() {
            return set.CurrBlockIndex() == self.BlockIndex();
        });
        self.IsLastBlock = ko.observable(data.IsLastBlock);
        self.BlockCount = data.BlockCount;
        self.Pages = ko.observableArray([]);
        if (data.Pages) {
            for (var i = 0; i < data.Pages.length; i++ ) {
                var pdata = data.Pages[i];
                var page = new SupplierPage(s, edit);
                page.Index_(idx0 + pdata.Index_);
                page.FirstItem(pdata.FirstItem);
                page.LastItem(pdata.LastItem);
                page.IsLastPage(pdata.IsLastPage);
                self.Pages.push(page);
            }
        }
        self.LastPage = function () {
            return self.Pages().length == 0 ? null : self.Pages()[self.Pages().length - 1];
        };
    }

    var SupplierSettings = function (settings) {
        var self = this;
        self.data = settings || {};
        self.data.show_SupplierID = self.data.show_SupplierID || true;
        self.show_SupplierID = ko.observable(self.data.show_SupplierID);
        self.show_SupplierID.subscribe(function (v) {
            self.data.show_SupplierID = v;
        });
        self.data.collapse_SupplierID = self.data.collapse_SupplierID || false;
        self.collapse_SupplierID = ko.observable(self.data.collapse_SupplierID);
        self.collapse_SupplierID.subscribe(function (v) {
            self.data.collapse_SupplierID = v;
        });
        self.data.width_SupplierID = self.data.width_SupplierID || 'auto';
        self.width_SupplierID = ko.observable(self.data.width_SupplierID);
        self.width_SupplierID.subscribe(function (v) {
            self.data.width_SupplierID = v;
        });
        self.data.show_CompanyName = self.data.show_CompanyName || true;
        self.show_CompanyName = ko.observable(self.data.show_CompanyName);
        self.show_CompanyName.subscribe(function (v) {
            self.data.show_CompanyName = v;
        });
        self.data.collapse_CompanyName = self.data.collapse_CompanyName || false;
        self.collapse_CompanyName = ko.observable(self.data.collapse_CompanyName);
        self.collapse_CompanyName.subscribe(function (v) {
            self.data.collapse_CompanyName = v;
        });
        self.data.width_CompanyName = self.data.width_CompanyName || 'auto';
        self.width_CompanyName = ko.observable(self.data.width_CompanyName);
        self.width_CompanyName.subscribe(function (v) {
            self.data.width_CompanyName = v;
        });
        self.data.show_HomePage = self.data.show_HomePage || true;
        self.show_HomePage = ko.observable(self.data.show_HomePage);
        self.show_HomePage.subscribe(function (v) {
            self.data.show_HomePage = v;
        });
        self.data.collapse_HomePage = self.data.collapse_HomePage || true;
        self.collapse_HomePage = ko.observable(self.data.collapse_HomePage);
        self.collapse_HomePage.subscribe(function (v) {
            self.data.collapse_HomePage = v;
        });
        self.data.width_HomePage = self.data.width_HomePage || '';
        self.width_HomePage = ko.observable(self.data.width_HomePage);
        self.width_HomePage.subscribe(function (v) {
            self.data.width_HomePage = v;
        });
        self.data.show_Address = self.data.show_Address || true;
        self.show_Address = ko.observable(self.data.show_Address);
        self.show_Address.subscribe(function (v) {
            self.data.show_Address = v;
        });
        self.data.collapse_Address = self.data.collapse_Address || false;
        self.collapse_Address = ko.observable(self.data.collapse_Address);
        self.collapse_Address.subscribe(function (v) {
            self.data.collapse_Address = v;
        });
        self.data.width_Address = self.data.width_Address || 'auto';
        self.width_Address = ko.observable(self.data.width_Address);
        self.width_Address.subscribe(function (v) {
            self.data.width_Address = v;
        });
        self.data.show_City = self.data.show_City || true;
        self.show_City = ko.observable(self.data.show_City);
        self.show_City.subscribe(function (v) {
            self.data.show_City = v;
        });
        self.data.collapse_City = self.data.collapse_City || false;
        self.collapse_City = ko.observable(self.data.collapse_City);
        self.collapse_City.subscribe(function (v) {
            self.data.collapse_City = v;
        });
        self.data.width_City = self.data.width_City || 'auto';
        self.width_City = ko.observable(self.data.width_City);
        self.width_City.subscribe(function (v) {
            self.data.width_City = v;
        });
        self.data.show_ContactName = self.data.show_ContactName || true;
        self.show_ContactName = ko.observable(self.data.show_ContactName);
        self.show_ContactName.subscribe(function (v) {
            self.data.show_ContactName = v;
        });
        self.data.collapse_ContactName = self.data.collapse_ContactName || false;
        self.collapse_ContactName = ko.observable(self.data.collapse_ContactName);
        self.collapse_ContactName.subscribe(function (v) {
            self.data.collapse_ContactName = v;
        });
        self.data.width_ContactName = self.data.width_ContactName || 'auto';
        self.width_ContactName = ko.observable(self.data.width_ContactName);
        self.width_ContactName.subscribe(function (v) {
            self.data.width_ContactName = v;
        });
        self.data.show_ContactTitle = self.data.show_ContactTitle || true;
        self.show_ContactTitle = ko.observable(self.data.show_ContactTitle);
        self.show_ContactTitle.subscribe(function (v) {
            self.data.show_ContactTitle = v;
        });
        self.data.collapse_ContactTitle = self.data.collapse_ContactTitle || false;
        self.collapse_ContactTitle = ko.observable(self.data.collapse_ContactTitle);
        self.collapse_ContactTitle.subscribe(function (v) {
            self.data.collapse_ContactTitle = v;
        });
        self.data.width_ContactTitle = self.data.width_ContactTitle || 'auto';
        self.width_ContactTitle = ko.observable(self.data.width_ContactTitle);
        self.width_ContactTitle.subscribe(function (v) {
            self.data.width_ContactTitle = v;
        });
        self.data.show_Country = self.data.show_Country || true;
        self.show_Country = ko.observable(self.data.show_Country);
        self.show_Country.subscribe(function (v) {
            self.data.show_Country = v;
        });
        self.data.collapse_Country = self.data.collapse_Country || false;
        self.collapse_Country = ko.observable(self.data.collapse_Country);
        self.collapse_Country.subscribe(function (v) {
            self.data.collapse_Country = v;
        });
        self.data.width_Country = self.data.width_Country || 'auto';
        self.width_Country = ko.observable(self.data.width_Country);
        self.width_Country.subscribe(function (v) {
            self.data.width_Country = v;
        });
        self.data.show_Fax = self.data.show_Fax || true;
        self.show_Fax = ko.observable(self.data.show_Fax);
        self.show_Fax.subscribe(function (v) {
            self.data.show_Fax = v;
        });
        self.data.collapse_Fax = self.data.collapse_Fax || false;
        self.collapse_Fax = ko.observable(self.data.collapse_Fax);
        self.collapse_Fax.subscribe(function (v) {
            self.data.collapse_Fax = v;
        });
        self.data.width_Fax = self.data.width_Fax || 'auto';
        self.width_Fax = ko.observable(self.data.width_Fax);
        self.width_Fax.subscribe(function (v) {
            self.data.width_Fax = v;
        });
        self.data.show_Phone = self.data.show_Phone || true;
        self.show_Phone = ko.observable(self.data.show_Phone);
        self.show_Phone.subscribe(function (v) {
            self.data.show_Phone = v;
        });
        self.data.collapse_Phone = self.data.collapse_Phone || false;
        self.collapse_Phone = ko.observable(self.data.collapse_Phone);
        self.collapse_Phone.subscribe(function (v) {
            self.data.collapse_Phone = v;
        });
        self.data.width_Phone = self.data.width_Phone || 'auto';
        self.width_Phone = ko.observable(self.data.width_Phone);
        self.width_Phone.subscribe(function (v) {
            self.data.width_Phone = v;
        });
        self.data.show_PostalCode = self.data.show_PostalCode || true;
        self.show_PostalCode = ko.observable(self.data.show_PostalCode);
        self.show_PostalCode.subscribe(function (v) {
            self.data.show_PostalCode = v;
        });
        self.data.collapse_PostalCode = self.data.collapse_PostalCode || false;
        self.collapse_PostalCode = ko.observable(self.data.collapse_PostalCode);
        self.collapse_PostalCode.subscribe(function (v) {
            self.data.collapse_PostalCode = v;
        });
        self.data.width_PostalCode = self.data.width_PostalCode || 'auto';
        self.width_PostalCode = ko.observable(self.data.width_PostalCode);
        self.width_PostalCode.subscribe(function (v) {
            self.data.width_PostalCode = v;
        });
        self.data.show_Region = self.data.show_Region || true;
        self.show_Region = ko.observable(self.data.show_Region);
        self.show_Region.subscribe(function (v) {
            self.data.show_Region = v;
        });
        self.data.collapse_Region = self.data.collapse_Region || false;
        self.collapse_Region = ko.observable(self.data.collapse_Region);
        self.collapse_Region.subscribe(function (v) {
            self.data.collapse_Region = v;
        });
        self.data.width_Region = self.data.width_Region || 'auto';
        self.width_Region = ko.observable(self.data.width_Region);
        self.width_Region.subscribe(function (v) {
            self.data.width_Region = v;
        });
    };

    var SupplierSet = function () {
        var self = this;
        self.set = {};
        self.CountryValues = ["Australia","Brazil","Canada","China","Denmark","Finland","France","Germany","Italy","Japan","Netherlands","Norway","Singapore","Spain","Sweden","UK","USA"];

        var jsonstr = localStorage.getItem('Northwind');
        if (typeof jsonstr == 'undefined' || jsonstr == null) {
            self.settings = new SupplierSettings();
            var settings = { };
            settings.UIView = { };
            settings.UIView.SupplierSet = self.settings.data;
            localStorage.setItem('Northwind', JSON.stringify(settings));
        } else {
            var settings = JSON.parse(jsonstr);
            self.settings = new SupplierSettings(settings.UIView.SupplierSet);
        }

        self.PageSize_ = ko.observable(config.defaultPageSize);
        self.PageWindowSize = ko.observable(config.defaultPageBlockSize);
        self.PageBlockSize = ko.observable(config.defaultPageBlockSize);
        self.SetKindName = "Table";
        self.EntityName = "Supplier";
        self.TotalEntities = ko.observable(0);
        self.EntityCount = ko.observable(0);
        self.PageCount = ko.observable(0);
        self.PagesWindow = ko.observableArray([]);
        self.CurrentPage = ko.observable({});
        self.IsQueryStateChanged = ko.observable(false);
        self.BaseUrl = "";
        self.CurrentSorters = ko.observable(null);
        self.CurrentFilters = ko.observable(null);
        self.SortersStack = [];
        self.FiltersStack = [];
        self.SorterPath = ko.observableArray();
        self.FilterPath = ko.observableArray();
        self.PageBlocks = ko.observableArray([]);
        self.CurrBlockIndex = ko.observable(0);
        self.CurrentBlock = ko.pureComputed(function () {
            if (self.CurrBlockIndex() < 0 || self.CurrBlockIndex() >= self.PageBlocks().length - 1)
                return null;
            else
                return self.PageBlocks()[self.CurrBlockIndex()];
        });
        self.PrevBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx > 0) {
                return self.PageBlocks()[idx - 1];
            } else {
                return null;
            }
        });
        self.NextLoadedBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return self.PageBlocks()[idx + 1];
            } else {
                return null;
            }
        });
        self.MoreNextBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return true;
            } else {
                return self.PageBlocks().length > 0 && !self.PageBlocks()[self.PageBlocks().length - 1].IsLastBlock();
            }
        });
        self.LastPageBlock = ko.pureComputed(function () {
            return self.PageBlocks().length == 0 ? null : self.PageBlocks()[self.PageBlocks().length - 1];
        });

        self.ResetPageState = function () {
            self.CurrBlockIndex(0);
            self.PageBlocks.removeAll();
            self.IsQueryStateChanged(false)
        };

        self.IsFilteredView = ko.observable(false);

        self.HasFilteredView = ko.pureComputed(function () {
            return self.CurrentFilters() !== null && self.FilterClosed();
        });

        self.FilteredViewUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'SupplierSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'SupplierSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilteredEditUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'SupplierSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'SupplierSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilterClosed = ko.observable(false);

        self.RefreshSetState = function(qc) {
            self.IsQueryStateChanged(true);
            self.ResetPageState();
            self.PagesWindow.removeAll();
            if (typeof self.CurrentPage().Items !== 'undefined')
                self.CurrentPage().Items.removeAll();
        }

        self.GetSetInfo = function (tkfilter, _filter) {
            self.BaseUrl = config.baseUrl;
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/GetSetInfo",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ filter: _filter == null ? null : decodeURIComponent(_filter) })
            }).pipe(
                function (content) {
                    self.set = content;
                    self.IsFilteredView(typeof _filter !== 'undefined' && _filter !== null && _filter !== '');
                    self.TotalEntities(self.set.EntityCount);
                    self.CurrentSorters(new q.TokenOptions());
                    for (var i = 0; i < self.set.Sorters.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(self.set.Sorters[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    self.CurrentSorters().CanBeClosed = true;
                    self.CurrentSorters().isLocal = false;
                    return $.Deferred().resolve(self);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.getQueryExpr = function () {
            var sorters = [];
            var filters = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                sorters.push(self.SorterPath()[i]);
            for (var i = 0; i < self.FilterPath().length; i++)
                filters.push(self.FilterPath()[i]);
            return new q.QueryExpression(sorters, filters);
        }

        self.GetNextSorterOps = function (tkfilter) {
            var qtokens = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                qtokens.push(self.SorterPath()[i]);
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/GetNextSorterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ sorters: qtokens  })
            }).pipe(
                function (content) {
                    self.SortersStack.push(self.CurrentSorters());
                    self.CurrentSorters(new q.TokenOptions());
                    self.CurrentSorters().Hint = content.Hint;
                    self.CurrentSorters().CurrentExpr(content.CurrentExpr);
                    self.CurrentSorters().QuoteVal = content.QuoteVal;
                    self.CurrentSorters().CanBeClosed = content.CanBeClosed;
                    self.CurrentSorters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.GetNextFilterOps = function (tkfilter) {
            var qexpr = self.getQueryExpr();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/GetNextFilterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ qexpr: qexpr, tkstr: ""  })
            }).pipe(
                function (content) {
                    if (self.CurrentFilters() !== null)
                        self.FiltersStack.push(self.CurrentFilters());
                    self.FilterClosed(content.CanBeClosed);
                    self.CurrentFilters(new q.TokenOptions());
                    self.CurrentFilters().Hint = content.Hint;
                        self.CurrentFilters().CurrentExpr(content.CurrentExpr);
                    self.CurrentFilters().QuoteVal = content.QuoteVal;
                    self.CurrentFilters().CanBeClosed = content.CanBeClosed;
                    self.CurrentFilters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, true)) {
                            self.CurrentFilters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.NextPageBlock = function (qexpr, last, edit) {
            if (self.IsQueryStateChanged())
                self.ResetPageState();
            if (self.CurrBlockIndex() < self.PageBlocks().length) {
                return $.Deferred().resolve();
            }
            self.set.PageBlockSize = self.PageBlockSize();
            self.set.PageSize_ = self.PageSize_();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/NextPageBlock",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, qexpr: qexpr, prevlast: last  })
            }).pipe(
                function (data) {
                    if (last == null) 
                        self.EntityCount(data.TotalEntities);
                    self.PageCount(data.TotalPages);
                    if (data.Pages.length == 0) {
                        var lpb = self.LastPageBlock();
                        if (lpb !== null) {
                            lpb.IsLastBlock(true);
                            var lp = lpb.LastPage();
                            if (lp !== null) {
                                lp.IsLastPage(true);
                                self.CurrBlockIndex(self.CurrBlockIndex() - 1);
                            }
                        } else {
                            self.PagesWindow.removeAll();
                        }
                    }
                    else {
                        var idx0 = 0;
                        for (var i = 0; i < self.CurrBlockIndex(); i++ ) {
                            idx0 += self.PageBlocks()[i].BlockCount;
                        }
                        var pb = new SupplierPageBlock(self, idx0, data, edit);
                        pb.BlockIndex(self.PageBlocks().length);
                        self.PageBlocks.push(pb);
                        self.PagesWindow.removeAll();
                        for (var i = 0; i < pb.Pages().length; i++) {
                            self.PagesWindow.push(pb.Pages()[i]);
                        }
                    }
                    self.IsQueryStateChanged(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.AddOrUpdateEntities = function (changed) {
            if (changed == null || changed.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/AddOrUpdateEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: changed })
            }).pipe(
                function (data) {
                    //...
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.DeleteEntities = function (deleted) {
            if (deleted == null || deleted.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/DeleteEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: deleted })
            }).pipe(
                function (data) {
                    //..
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.LoadEntityByKey = function(SupplierID, isView) {
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/SupplierSet/LoadEntityByKey",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ SupplierID: SupplierID })
            }).pipe(
                function (data) {
                    if (isView)
                        return $.Deferred().resolve(new SupplierView(data));
                    else
                        return $.Deferred().resolve(new Supplier(data));
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        }

    }

    return {
        entityView: SupplierView,
        entityEdit: Supplier,
        entityPage: SupplierPage,
        entityPageBlock: SupplierPageBlock,
        settings: SupplierSettings,
        entitySet: SupplierSet
    }
})