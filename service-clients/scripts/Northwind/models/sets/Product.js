/* ------------------------------------------------------------------------------
 *
 *     This code was generated by CGW X-Script Code Generator.
 *
 *     Archymeta Information Technologies Co., Ltd.
 *
 *     Changes to this file, especially those bit flags, may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * 
 ------------------------------------------------------------------------------ */

define(['knockout', 'config', 'queryModels' ], function (ko, config, q) {

    var ProductView = function (data) {
        var self = this;
        self.IsViewModel = true;
        self.data = data;
        self.DistinctString = data !== null ? data.DistinctString : "";
        self.LookupQuery = data !== null ? "?ProductID=" + self.data.ProductID : "";

        self.CreateSet = function () {
            return new ProductSet();
        };

        self.ProductID = data.ProductID;
        self.CategoryID = data.CategoryID;
        self.SupplierID = data.SupplierID;
        self.ProductName = data.ProductName;
        self.Discontinued = data.Discontinued;
        self.QuantityPerUnit = data.QuantityPerUnit;
        self.ReorderLevel = data.ReorderLevel;
        self.UnitPrice = data.UnitPrice;
        self.UnitsInStock = data.UnitsInStock;
        self.UnitsOnOrder = data.UnitsOnOrder;
        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.ProductID == data.ProductID;
        };

        if (data.CategoryRef == null) {
            self.CategoryRef = ko.observable(null);
            self.IsCategoryRefMaterialized = ko.observable(data.CategoryID == null);
        } else {
            self.IsCategoryRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Category', function (m) {
                self.CategoryRef = ko.observable(new m.entityView(data.CategoryRef));
                self.IsCategoryRefMaterialized(true);
            });
        }
        self.CategoryRefSummary = ko.pureComputed(function () {
            if (self.IsCategoryRefMaterialized() && data !== null) {
                return self.CategoryRef() ? self.CategoryRef.DistinctString : '';
            } else {
                return "";
            }
        });

        self.MaterializeCategoryRef = function () {
            if (self.IsCategoryRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/MaterializeCategoryRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.CategoryRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Category', function (m) {
                            self.CategoryRef(new m.entityView(dref));
                            self.IsCategoryRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        if (data.SupplierRef == null) {
            self.SupplierRef = ko.observable(null);
            self.IsSupplierRefMaterialized = ko.observable(data.SupplierID == null);
        } else {
            self.IsSupplierRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Supplier', function (m) {
                self.SupplierRef = ko.observable(new m.entityView(data.SupplierRef));
                self.IsSupplierRefMaterialized(true);
            });
        }
        self.SupplierRefSummary = ko.pureComputed(function () {
            if (self.IsSupplierRefMaterialized() && data !== null) {
                return self.SupplierRef() ? self.SupplierRef.DistinctString : '';
            } else {
                return "";
            }
        });

        self.MaterializeSupplierRef = function () {
            if (self.IsSupplierRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/MaterializeSupplierRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.SupplierRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Supplier', function (m) {
                            self.SupplierRef(new m.entityView(dref));
                            self.IsSupplierRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsAllOrder_DetailsMaterialized = ko.observable(false);
        if (data.Order_Details == null) {
            self.Order_Details = ko.observable(null);
            self.IsOrder_DetailsMaterialized = ko.observable(false);
        } else {
            self.IsOrder_DetailsMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order_Detail', function (m) {
                self.Order_Details = ko.observable(new m.entitySet(data.Order_Details));
                self.IsOrder_DetailsMaterialized(true);
            });
        }
        self.ChangedOrder_Details = ko.observableArray();

        if (data !== null && data.ChangedOrder_Details !== null) {
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order_Detail', function (m) {
                for (var i = 0; i < data.ChangedOrder_Details.length; i++) {
                    self.ChangedOrder_Details.push(new m.entityView(data.ChangedOrder_Details[i]));
                }
                self.IsAllOrder_DetailsMaterialized(true);
            });
        }

        self.MaterializeOrder_Details = function () {
            if (self.IsOrder_DetailsMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/MaterializeOrder_Details",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.Order_Details = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order_Detail', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.Order_Details(s);
                            self.IsOrder_DetailsMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.MaterializeAllOrder_Details = function () {
            if (self.IsAllOrder_DetailsMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/MaterializeAllOrder_Details",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (list) {
                    if (list !== null) {
                        self.data.ChangedOrder_Details = list;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order_Detail', function (m) {
                            for (var i = 0; i < list.length; i++) {
                                self.ChangedOrder_Details.push(new m.entityView(list[i]));
                            }
                            self.IsAllOrder_DetailsMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.shallowDataCopy = function() {
            return {
                ProductID: self.data.ProductID,
                CategoryID: self.data.CategoryID,
                SupplierID: self.data.SupplierID,
                ProductName: self.data.ProductName,
                Discontinued: self.data.Discontinued,
                QuantityPerUnit: self.data.QuantityPerUnit,
                ReorderLevel: self.data.ReorderLevel,
                UnitPrice: self.data.UnitPrice,
                UnitsInStock: self.data.UnitsInStock,
                UnitsOnOrder: self.data.UnitsOnOrder
            };
        };

        self.IsEntitySelected = ko.observable(false);
    };

    var Product = function (data) {
        var self = this;
        self.IsViewModel = false;
        self.TobeLoadMsg = ko.observable('to be loaded ...');
        self.Initializing = true;
        self.data = data;
        self.IsPersisted = ko.observable(data !== null);
        self.IsNewAddition = ko.observable(false);
        self.UpdateIndex = -1;
        self.DistinctString = ko.observable(data !== null ? data.DistinctString : "");
        self.LookupQuery = data !== null ? "entityedit?ProductID=" + self.data.ProductID : "";

        self.CreateSet = function () {
            return new ProductSet();
        };

        self.ProductID = data.ProductID;
        self.CategoryID = ko.observable(data !== null ? data.CategoryID : null);
        self.IsCategoryIDModified = ko.observable(data !== null ? data.IsCategoryIDModified : true);
        self.CategoryID.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsCategoryIDModified(self.data == null || self.data.CategoryID !== val);
             }
         });
        self.CategoryIDCss = ko.pureComputed(function () {
            if (self.IsCategoryIDModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.SupplierID = ko.observable(data !== null ? data.SupplierID : null);
        self.IsSupplierIDModified = ko.observable(data !== null ? data.IsSupplierIDModified : true);
        self.SupplierID.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsSupplierIDModified(self.data == null || self.data.SupplierID !== val);
             }
         });
        self.SupplierIDCss = ko.pureComputed(function () {
            if (self.IsSupplierIDModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.ProductName = data.ProductName;
        self.Discontinued = ko.observable(data !== null ? data.Discontinued : null).extend({ required: true });
        self.IsDiscontinuedModified = ko.observable(data !== null ? data.IsDiscontinuedModified : true);
        self.Discontinued.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsDiscontinuedModified(self.data == null || self.data.Discontinued !== val);
             }
         });
        self.DiscontinuedCss = ko.pureComputed(function () {
            if (self.IsDiscontinuedModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.QuantityPerUnit = ko.observable(data !== null ? data.QuantityPerUnit : null);
        self.IsQuantityPerUnitModified = ko.observable(data !== null ? data.IsQuantityPerUnitModified : true);
        self.QuantityPerUnit.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsQuantityPerUnitModified(self.data == null || self.data.QuantityPerUnit !== val);
             }
         });
        self.QuantityPerUnitCss = ko.pureComputed(function () {
            if (self.IsQuantityPerUnitModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.ReorderLevel = ko.observable(data !== null ? data.ReorderLevel : null);
        self.IsReorderLevelModified = ko.observable(data !== null ? data.IsReorderLevelModified : true);
        self.ReorderLevel.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsReorderLevelModified(self.data == null || self.data.ReorderLevel !== val);
             }
         });
        self.ReorderLevelCss = ko.pureComputed(function () {
            if (self.IsReorderLevelModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.UnitPrice = ko.observable(data !== null ? data.UnitPrice : null);
        self.IsUnitPriceModified = ko.observable(data !== null ? data.IsUnitPriceModified : true);
        self.UnitPrice.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsUnitPriceModified(self.data == null || self.data.UnitPrice !== val);
             }
         });
        self.UnitPriceCss = ko.pureComputed(function () {
            if (self.IsUnitPriceModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.UnitsInStock = ko.observable(data !== null ? data.UnitsInStock : null);
        self.IsUnitsInStockModified = ko.observable(data !== null ? data.IsUnitsInStockModified : true);
        self.UnitsInStock.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsUnitsInStockModified(self.data == null || self.data.UnitsInStock !== val);
             }
         });
        self.UnitsInStockCss = ko.pureComputed(function () {
            if (self.IsUnitsInStockModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.UnitsOnOrder = ko.observable(data !== null ? data.UnitsOnOrder : null);
        self.IsUnitsOnOrderModified = ko.observable(data !== null ? data.IsUnitsOnOrderModified : true);
        self.UnitsOnOrder.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsUnitsOnOrderModified(self.data == null || self.data.UnitsOnOrder !== val);
             }
         });
        self.UnitsOnOrderCss = ko.pureComputed(function () {
            if (self.IsUnitsOnOrderModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.IsEntityChanged = ko.observable(false);

        self.IfEntityChanged = ko.pureComputed(function () {
            return self.IsCategoryIDModified() || self.IsSupplierIDModified() || self.IsDiscontinuedModified() || self.IsQuantityPerUnitModified() || self.IsReorderLevelModified() || self.IsUnitPriceModified() || self.IsUnitsInStockModified() || self.IsUnitsOnOrderModified();
        });

        self.IsEntityModified = function () {
            return self.IsCategoryIDModified() || self.IsSupplierIDModified() || self.IsDiscontinuedModified() || self.IsQuantityPerUnitModified() || self.IsReorderLevelModified() || self.IsUnitPriceModified() || self.IsUnitsInStockModified() || self.IsUnitsOnOrderModified();
        }

        self.IsEntityComplete = function () {
            return self.ProductName !== null && self.Discontinued() !== null;
        };

        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.ProductID() == data.ProductID();
        };

        self.GetUpdatedData = function () {
            if (self.data == null) {
                return self.GetNewData();
            }
            var d = self.NewDataCopy();
            if (self.IsCategoryIDModified() || self.IsSupplierIDModified() || self.IsDiscontinuedModified() || self.IsQuantityPerUnitModified() || self.IsReorderLevelModified() || self.IsUnitPriceModified() || self.IsUnitsInStockModified() || self.IsUnitsOnOrderModified()) {
                if (self.IsCategoryIDModified()) {
                    d.CategoryID = self.CategoryID();
                    d.IsCategoryIDModified = true;
                }
                if (self.IsSupplierIDModified()) {
                    d.SupplierID = self.SupplierID();
                    d.IsSupplierIDModified = true;
                }
                if (self.IsDiscontinuedModified()) {
                    d.Discontinued = self.Discontinued();
                    d.IsDiscontinuedModified = true;
                }
                if (self.IsQuantityPerUnitModified()) {
                    d.QuantityPerUnit = self.QuantityPerUnit();
                    d.IsQuantityPerUnitModified = true;
                }
                if (self.IsReorderLevelModified()) {
                    d.ReorderLevel = self.ReorderLevel();
                    d.IsReorderLevelModified = true;
                }
                if (self.IsUnitPriceModified()) {
                    d.UnitPrice = self.UnitPrice();
                    d.IsUnitPriceModified = true;
                }
                if (self.IsUnitsInStockModified()) {
                    d.UnitsInStock = self.UnitsInStock();
                    d.IsUnitsInStockModified = true;
                }
                if (self.IsUnitsOnOrderModified()) {
                    d.UnitsOnOrder = self.UnitsOnOrder();
                    d.IsUnitsOnOrderModified = true;
                }
                d.IsEntityChanged = true;
                return d;
            } else {
                return null;
            }
        };

        self.GetNewData = function () {
            if (self.ProductName == null) {
                throw "ProductName is required!";
            }    
            else if (self.Discontinued() == null) {
                throw "Discontinued is required!";
            }    
            var d = {
                "CategoryID": self.CategoryID(),
                "IsCategoryIDModified": true,
                "SupplierID": self.SupplierID(),
                "IsSupplierIDModified": true,
                "ProductName": self.ProductName,
                "Discontinued": self.Discontinued(),
                "IsDiscontinuedModified": true,
                "QuantityPerUnit": self.QuantityPerUnit(),
                "IsQuantityPerUnitModified": true,
                "ReorderLevel": self.ReorderLevel(),
                "IsReorderLevelModified": true,
                "UnitPrice": self.UnitPrice(),
                "IsUnitPriceModified": true,
                "UnitsInStock": self.UnitsInStock(),
                "IsUnitsInStockModified": true,
                "UnitsOnOrder": self.UnitsOnOrder(),
                "IsUnitsOnOrderModified": true,
                "IsEntityChanged": true,
                "IsPersisted": false
            };
            return d;
        };

        self.NewDataCopy = function () {
            var d = {
                "ProductID": self.data.ProductID,
                "CategoryID": self.data.CategoryID,
                "IsCategoryIDModified": self.IsCategoryIDModified(),
                "SupplierID": self.data.SupplierID,
                "IsSupplierIDModified": self.IsSupplierIDModified(),
                "ProductName": self.data.ProductName,
                "Discontinued": self.data.Discontinued,
                "IsDiscontinuedModified": self.IsDiscontinuedModified(),
                "QuantityPerUnit": self.data.QuantityPerUnit,
                "IsQuantityPerUnitModified": self.IsQuantityPerUnitModified(),
                "ReorderLevel": self.data.ReorderLevel,
                "IsReorderLevelModified": self.IsReorderLevelModified(),
                "UnitPrice": self.data.UnitPrice,
                "IsUnitPriceModified": self.IsUnitPriceModified(),
                "UnitsInStock": self.data.UnitsInStock,
                "IsUnitsInStockModified": self.IsUnitsInStockModified(),
                "UnitsOnOrder": self.data.UnitsOnOrder,
                "IsUnitsOnOrderModified": self.IsUnitsOnOrderModified(),
                "IsEntityChanged": self.data.IsEntityChanged,
                "IsPersisted": self.data.IsPersisted
            };
            return d;
        };

        self.UpdateData = function (dsrc) {
            if (self.data == null ) {
                return;
            }
            self.data.CategoryID = dsrc.CategoryID;
            self.CategoryID(dsrc.CategoryID);
            self.IsCategoryIDModified(false);
            self.data.SupplierID = dsrc.SupplierID;
            self.SupplierID(dsrc.SupplierID);
            self.IsSupplierIDModified(false);
            self.data.Discontinued = dsrc.Discontinued;
            self.Discontinued(dsrc.Discontinued);
            self.IsDiscontinuedModified(false);
            self.data.QuantityPerUnit = dsrc.QuantityPerUnit;
            self.QuantityPerUnit(dsrc.QuantityPerUnit);
            self.IsQuantityPerUnitModified(false);
            self.data.ReorderLevel = dsrc.ReorderLevel;
            self.ReorderLevel(dsrc.ReorderLevel);
            self.IsReorderLevelModified(false);
            self.data.UnitPrice = dsrc.UnitPrice;
            self.UnitPrice(dsrc.UnitPrice);
            self.IsUnitPriceModified(false);
            self.data.UnitsInStock = dsrc.UnitsInStock;
            self.UnitsInStock(dsrc.UnitsInStock);
            self.IsUnitsInStockModified(false);
            self.data.UnitsOnOrder = dsrc.UnitsOnOrder;
            self.UnitsOnOrder(dsrc.UnitsOnOrder);
            self.IsUnitsOnOrderModified(false);
        };

        self.ResetData = function () {
            if (self.data == null ) {
                return;
            }
            if (self.IsCategoryIDModified()) {
                self.CategoryID(self.data.CategoryID);
            }
            if (self.IsSupplierIDModified()) {
                self.SupplierID(self.data.SupplierID);
            }
            if (self.IsDiscontinuedModified()) {
                self.Discontinued(self.data.Discontinued);
            }
            if (self.IsQuantityPerUnitModified()) {
                self.QuantityPerUnit(self.data.QuantityPerUnit);
            }
            if (self.IsReorderLevelModified()) {
                self.ReorderLevel(self.data.ReorderLevel);
            }
            if (self.IsUnitPriceModified()) {
                self.UnitPrice(self.data.UnitPrice);
            }
            if (self.IsUnitsInStockModified()) {
                self.UnitsInStock(self.data.UnitsInStock);
            }
            if (self.IsUnitsOnOrderModified()) {
                self.UnitsOnOrder(self.data.UnitsOnOrder);
            }
        };

        self.shallowDataCopy = function() {
            return {
                ProductID: self.data.ProductID,
                CategoryID: self.data.CategoryID,
                SupplierID: self.data.SupplierID,
                ProductName: self.data.ProductName,
                Discontinued: self.data.Discontinued,
                QuantityPerUnit: self.data.QuantityPerUnit,
                ReorderLevel: self.data.ReorderLevel,
                UnitPrice: self.data.UnitPrice,
                UnitsInStock: self.data.UnitsInStock,
                UnitsOnOrder: self.data.UnitsOnOrder
            };
        }

        if (data == null) {
            self.IsCategoryRefMaterialized = ko.observable(true);
            self.CategoryRef = ko.observable(null);
        } else if (data.CategoryRef == null) {
            self.IsCategoryRefMaterialized = ko.observable(data.CategoryID == null);
            self.CategoryRef = ko.observable(null);
        } else {
            self.IsCategoryRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Category', function (m) {
                self.CategoryRef = ko.observable(new m.entity(data.CategoryRef));
                self.IsCategoryRefMaterialized(true);
            });
        }

        self.CategoryRefSummary = ko.pureComputed(function () {
            if (self.IsCategoryRefMaterialized() && data !== null) {
                return self.CategoryRef() ? self.CategoryRef().DistinctString : '';
            } else {
                return self.TobeLoadMsg();
            }
        });

        self.MaterializeCategoryRef = function () {
            if (self.IsCategoryRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/MaterializeCategoryRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.CategoryRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Category', function (m) {
                            self.CategoryRef(new m.entityEdit(m));
                            self.IsCategoryRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        if (data == null) {
            self.IsSupplierRefMaterialized = ko.observable(true);
            self.SupplierRef = ko.observable(null);
        } else if (data.SupplierRef == null) {
            self.IsSupplierRefMaterialized = ko.observable(data.SupplierID == null);
            self.SupplierRef = ko.observable(null);
        } else {
            self.IsSupplierRefMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Supplier', function (m) {
                self.SupplierRef = ko.observable(new m.entity(data.SupplierRef));
                self.IsSupplierRefMaterialized(true);
            });
        }

        self.SupplierRefSummary = ko.pureComputed(function () {
            if (self.IsSupplierRefMaterialized() && data !== null) {
                return self.SupplierRef() ? self.SupplierRef().DistinctString : '';
            } else {
                return self.TobeLoadMsg();
            }
        });

        self.MaterializeSupplierRef = function () {
            if (self.IsSupplierRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/MaterializeSupplierRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.SupplierRef = dref;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Supplier', function (m) {
                            self.SupplierRef(new m.entityEdit(m));
                            self.IsSupplierRefMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsOrder_DetailsMaterialized = ko.observable(data == null);

        self.Order_Details = ko.observable(data !== null ? data.Order_Details : null);

        self.MaterializeOrder_Details = function () {
            if (self.IsOrder_DetailsMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/MaterializeOrder_Details",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.Order_Details = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order_Detail', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.Order_Details(s);
                            self.IsOrder_DetailsMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsEntitySelected = ko.observable(false);
        self.Initializing = false;
    };

    var ProductPage = function (s, edit) {
        var self = this;
        var editPage = edit;
        self.set = s;
        self.Index_ = ko.observable();
        self.PageNumber = ko.pureComputed(function () {
            return self.Index_() + 1;
        });
        self.FirstItem = ko.observable({});
        self.LastItem = ko.observable({});
        self.CurrentItem = ko.observable(null);
        self.IsLastPage = ko.observable(false);
        self.IsDataLoaded = ko.observable(false);
        self.IsPageSelected = ko.observable(false);
        self.Items =  ko.observableArray([]);
        self.GetPageItems = function (s, pageLoader) {
            if (self.IsDataLoaded()) 
                return $.Deferred().resolve();
            var qexpr = s.getQueryExpr();
            var lastItem = null;
            var ipage = self.Index_();
            if (self.Index_() > 0) {
                var blk = s.PageBlocks()[s.CurrBlockIndex()];
                if (blk.Pages()[0].Index_() !== ipage) {
                    for (var i = 0; i < blk.Pages().length; i++) {
                        if (blk.Pages()[i].Index_() == ipage - 1) {
                            lastItem = blk.Pages()[i].LastItem();
                            break;
                        }
                    }
                } else {
                    var prvb = s.PageBlocks()[s.CurrBlockIndex() - 1];
                    lastItem = prvb.Pages()[prvb.Pages().length - 1].LastItem();
                }
            }
            self.Items.removeAll();
            if (typeof pageLoader !== 'function') {
                return $.ajax({
                    url: config.baseUrl + "/services/Northwind/ProductSet/GetPageItems",
                    type: "POST",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ set: s.set, qexpr: qexpr, prevlast: lastItem })
                }).pipe(
                    function (items) {
                        for (var i = 0; i < items.length; i++) {
                            if (editPage)
                                self.Items.push(new Product(items[i]));
                            else
                                self.Items.push(new ProductView(items[i]));
                        }
                        self.IsDataLoaded(true);
                        return $.Deferred().resolve();
                    },
                    function (jqxhr, textStatus, error) {
                        return $.Deferred().reject(jqxhr, textStatus, error);
                    }
                );
            } else {
                return pageLoader(self, { set: s.set, qexpr: qexpr, prevlast: lastItem });
            }
        };
    };

    var ProductPageBlock = function (s, idx0, data, edit) {
        var self = this;
        var set = s;
        self.BlockIndex = ko.observable(0);
        self.BlockNumber = ko.pureComputed(function () { return self.BlockIndex() + 1; });
        self.IsBlockSelected = ko.pureComputed(function() {
            return set.CurrBlockIndex() == self.BlockIndex();
        });
        self.IsLastBlock = ko.observable(data.IsLastBlock);
        self.BlockCount = data.BlockCount;
        self.Pages = ko.observableArray([]);
        if (data.Pages) {
            for (var i = 0; i < data.Pages.length; i++ ) {
                var pdata = data.Pages[i];
                var page = new ProductPage(s, edit);
                page.Index_(idx0 + pdata.Index_);
                page.FirstItem(pdata.FirstItem);
                page.LastItem(pdata.LastItem);
                page.IsLastPage(pdata.IsLastPage);
                self.Pages.push(page);
            }
        }
        self.LastPage = function () {
            return self.Pages().length == 0 ? null : self.Pages()[self.Pages().length - 1];
        };
    }

    var ProductSettings = function (settings) {
        var self = this;
        self.data = settings || {};
        self.data.show_ProductID = self.data.show_ProductID || true;
        self.show_ProductID = ko.observable(self.data.show_ProductID);
        self.show_ProductID.subscribe(function (v) {
            self.data.show_ProductID = v;
        });
        self.data.collapse_ProductID = self.data.collapse_ProductID || false;
        self.collapse_ProductID = ko.observable(self.data.collapse_ProductID);
        self.collapse_ProductID.subscribe(function (v) {
            self.data.collapse_ProductID = v;
        });
        self.data.width_ProductID = self.data.width_ProductID || 'auto';
        self.width_ProductID = ko.observable(self.data.width_ProductID);
        self.width_ProductID.subscribe(function (v) {
            self.data.width_ProductID = v;
        });
        self.data.show_CategoryID = self.data.show_CategoryID || true;
        self.show_CategoryID = ko.observable(self.data.show_CategoryID);
        self.show_CategoryID.subscribe(function (v) {
            self.data.show_CategoryID = v;
        });
        self.data.collapse_CategoryID = self.data.collapse_CategoryID || false;
        self.collapse_CategoryID = ko.observable(self.data.collapse_CategoryID);
        self.collapse_CategoryID.subscribe(function (v) {
            self.data.collapse_CategoryID = v;
        });
        self.data.width_CategoryID = self.data.width_CategoryID || 'auto';
        self.width_CategoryID = ko.observable(self.data.width_CategoryID);
        self.width_CategoryID.subscribe(function (v) {
            self.data.width_CategoryID = v;
        });
        self.data.show_SupplierID = self.data.show_SupplierID || true;
        self.show_SupplierID = ko.observable(self.data.show_SupplierID);
        self.show_SupplierID.subscribe(function (v) {
            self.data.show_SupplierID = v;
        });
        self.data.collapse_SupplierID = self.data.collapse_SupplierID || false;
        self.collapse_SupplierID = ko.observable(self.data.collapse_SupplierID);
        self.collapse_SupplierID.subscribe(function (v) {
            self.data.collapse_SupplierID = v;
        });
        self.data.width_SupplierID = self.data.width_SupplierID || 'auto';
        self.width_SupplierID = ko.observable(self.data.width_SupplierID);
        self.width_SupplierID.subscribe(function (v) {
            self.data.width_SupplierID = v;
        });
        self.data.show_ProductName = self.data.show_ProductName || true;
        self.show_ProductName = ko.observable(self.data.show_ProductName);
        self.show_ProductName.subscribe(function (v) {
            self.data.show_ProductName = v;
        });
        self.data.collapse_ProductName = self.data.collapse_ProductName || false;
        self.collapse_ProductName = ko.observable(self.data.collapse_ProductName);
        self.collapse_ProductName.subscribe(function (v) {
            self.data.collapse_ProductName = v;
        });
        self.data.width_ProductName = self.data.width_ProductName || 'auto';
        self.width_ProductName = ko.observable(self.data.width_ProductName);
        self.width_ProductName.subscribe(function (v) {
            self.data.width_ProductName = v;
        });
        self.data.show_Discontinued = self.data.show_Discontinued || true;
        self.show_Discontinued = ko.observable(self.data.show_Discontinued);
        self.show_Discontinued.subscribe(function (v) {
            self.data.show_Discontinued = v;
        });
        self.data.collapse_Discontinued = self.data.collapse_Discontinued || false;
        self.collapse_Discontinued = ko.observable(self.data.collapse_Discontinued);
        self.collapse_Discontinued.subscribe(function (v) {
            self.data.collapse_Discontinued = v;
        });
        self.data.width_Discontinued = self.data.width_Discontinued || 'auto';
        self.width_Discontinued = ko.observable(self.data.width_Discontinued);
        self.width_Discontinued.subscribe(function (v) {
            self.data.width_Discontinued = v;
        });
        self.data.show_QuantityPerUnit = self.data.show_QuantityPerUnit || true;
        self.show_QuantityPerUnit = ko.observable(self.data.show_QuantityPerUnit);
        self.show_QuantityPerUnit.subscribe(function (v) {
            self.data.show_QuantityPerUnit = v;
        });
        self.data.collapse_QuantityPerUnit = self.data.collapse_QuantityPerUnit || false;
        self.collapse_QuantityPerUnit = ko.observable(self.data.collapse_QuantityPerUnit);
        self.collapse_QuantityPerUnit.subscribe(function (v) {
            self.data.collapse_QuantityPerUnit = v;
        });
        self.data.width_QuantityPerUnit = self.data.width_QuantityPerUnit || 'auto';
        self.width_QuantityPerUnit = ko.observable(self.data.width_QuantityPerUnit);
        self.width_QuantityPerUnit.subscribe(function (v) {
            self.data.width_QuantityPerUnit = v;
        });
        self.data.show_ReorderLevel = self.data.show_ReorderLevel || true;
        self.show_ReorderLevel = ko.observable(self.data.show_ReorderLevel);
        self.show_ReorderLevel.subscribe(function (v) {
            self.data.show_ReorderLevel = v;
        });
        self.data.collapse_ReorderLevel = self.data.collapse_ReorderLevel || false;
        self.collapse_ReorderLevel = ko.observable(self.data.collapse_ReorderLevel);
        self.collapse_ReorderLevel.subscribe(function (v) {
            self.data.collapse_ReorderLevel = v;
        });
        self.data.width_ReorderLevel = self.data.width_ReorderLevel || 'auto';
        self.width_ReorderLevel = ko.observable(self.data.width_ReorderLevel);
        self.width_ReorderLevel.subscribe(function (v) {
            self.data.width_ReorderLevel = v;
        });
        self.data.show_UnitPrice = self.data.show_UnitPrice || true;
        self.show_UnitPrice = ko.observable(self.data.show_UnitPrice);
        self.show_UnitPrice.subscribe(function (v) {
            self.data.show_UnitPrice = v;
        });
        self.data.collapse_UnitPrice = self.data.collapse_UnitPrice || false;
        self.collapse_UnitPrice = ko.observable(self.data.collapse_UnitPrice);
        self.collapse_UnitPrice.subscribe(function (v) {
            self.data.collapse_UnitPrice = v;
        });
        self.data.width_UnitPrice = self.data.width_UnitPrice || 'auto';
        self.width_UnitPrice = ko.observable(self.data.width_UnitPrice);
        self.width_UnitPrice.subscribe(function (v) {
            self.data.width_UnitPrice = v;
        });
        self.data.show_UnitsInStock = self.data.show_UnitsInStock || true;
        self.show_UnitsInStock = ko.observable(self.data.show_UnitsInStock);
        self.show_UnitsInStock.subscribe(function (v) {
            self.data.show_UnitsInStock = v;
        });
        self.data.collapse_UnitsInStock = self.data.collapse_UnitsInStock || false;
        self.collapse_UnitsInStock = ko.observable(self.data.collapse_UnitsInStock);
        self.collapse_UnitsInStock.subscribe(function (v) {
            self.data.collapse_UnitsInStock = v;
        });
        self.data.width_UnitsInStock = self.data.width_UnitsInStock || 'auto';
        self.width_UnitsInStock = ko.observable(self.data.width_UnitsInStock);
        self.width_UnitsInStock.subscribe(function (v) {
            self.data.width_UnitsInStock = v;
        });
        self.data.show_UnitsOnOrder = self.data.show_UnitsOnOrder || true;
        self.show_UnitsOnOrder = ko.observable(self.data.show_UnitsOnOrder);
        self.show_UnitsOnOrder.subscribe(function (v) {
            self.data.show_UnitsOnOrder = v;
        });
        self.data.collapse_UnitsOnOrder = self.data.collapse_UnitsOnOrder || false;
        self.collapse_UnitsOnOrder = ko.observable(self.data.collapse_UnitsOnOrder);
        self.collapse_UnitsOnOrder.subscribe(function (v) {
            self.data.collapse_UnitsOnOrder = v;
        });
        self.data.width_UnitsOnOrder = self.data.width_UnitsOnOrder || 'auto';
        self.width_UnitsOnOrder = ko.observable(self.data.width_UnitsOnOrder);
        self.width_UnitsOnOrder.subscribe(function (v) {
            self.data.width_UnitsOnOrder = v;
        });
    };

    var ProductSet = function () {
        var self = this;
        self.set = {};

        var jsonstr = localStorage.getItem('Northwind');
        if (typeof jsonstr == 'undefined' || jsonstr == null) {
            self.settings = new ProductSettings();
            var settings = { };
            settings.UIView = { };
            settings.UIView.ProductSet = self.settings.data;
            localStorage.setItem('Northwind', JSON.stringify(settings));
        } else {
            var settings = JSON.parse(jsonstr);
            self.settings = new ProductSettings(settings.UIView.ProductSet);
        }

        self.PageSize_ = ko.observable(config.defaultPageSize);
        self.PageWindowSize = ko.observable(config.defaultPageBlockSize);
        self.PageBlockSize = ko.observable(config.defaultPageBlockSize);
        self.SetKindName = "Table";
        self.EntityName = "Product";
        self.TotalEntities = ko.observable(0);
        self.EntityCount = ko.observable(0);
        self.PageCount = ko.observable(0);
        self.PagesWindow = ko.observableArray([]);
        self.CurrentPage = ko.observable({});
        self.IsQueryStateChanged = ko.observable(false);
        self.BaseUrl = "";
        self.CurrentSorters = ko.observable(null);
        self.CurrentFilters = ko.observable(null);
        self.SortersStack = [];
        self.FiltersStack = [];
        self.SorterPath = ko.observableArray();
        self.FilterPath = ko.observableArray();
        self.PageBlocks = ko.observableArray([]);
        self.CurrBlockIndex = ko.observable(0);
        self.CurrentBlock = ko.pureComputed(function () {
            if (self.CurrBlockIndex() < 0 || self.CurrBlockIndex() >= self.PageBlocks().length - 1)
                return null;
            else
                return self.PageBlocks()[self.CurrBlockIndex()];
        });
        self.PrevBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx > 0) {
                return self.PageBlocks()[idx - 1];
            } else {
                return null;
            }
        });
        self.NextLoadedBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return self.PageBlocks()[idx + 1];
            } else {
                return null;
            }
        });
        self.MoreNextBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return true;
            } else {
                return self.PageBlocks().length > 0 && !self.PageBlocks()[self.PageBlocks().length - 1].IsLastBlock();
            }
        });
        self.LastPageBlock = ko.pureComputed(function () {
            return self.PageBlocks().length == 0 ? null : self.PageBlocks()[self.PageBlocks().length - 1];
        });

        self.ResetPageState = function () {
            self.CurrBlockIndex(0);
            self.PageBlocks.removeAll();
            self.IsQueryStateChanged(false)
        };

        self.IsFilteredView = ko.observable(false);

        self.HasFilteredView = ko.pureComputed(function () {
            return self.CurrentFilters() !== null && self.FilterClosed();
        });

        self.FilteredViewUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'ProductSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'ProductSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilteredEditUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'ProductSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'ProductSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilterClosed = ko.observable(false);

        self.preSetQExpr = undefined;

        self.RefreshSetState = function(qc) {
            self.IsQueryStateChanged(true);
            self.ResetPageState();
            self.PagesWindow.removeAll();
            if (typeof self.CurrentPage().Items !== 'undefined')
                self.CurrentPage().Items.removeAll();
        };

        self.GetSetInfo = function (tkfilter, _filter) {
            self.BaseUrl = config.baseUrl;
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/GetSetInfo",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ filter: _filter == null ? null : decodeURIComponent(_filter) })
            }).pipe(
                function (content) {
                    self.set = content;
                    self.IsFilteredView(typeof _filter !== 'undefined' && _filter !== null && _filter !== '');
                    self.TotalEntities(self.set.EntityCount);
                    self.CurrentSorters(new q.TokenOptions());
                    for (var i = 0; i < self.set.Sorters.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(self.set.Sorters[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    self.CurrentSorters().CanBeClosed = true;
                    self.CurrentSorters().isLocal = false;
                    return $.Deferred().resolve(self);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.getQueryExpr = function () {
            if (self.preSetQExpr)
                return self.preSetQExpr;
            var sorters = [];
            var filters = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                sorters.push(self.SorterPath()[i]);
            for (var i = 0; i < self.FilterPath().length; i++)
                filters.push(self.FilterPath()[i]);
            return new q.QueryExpression(sorters, filters);
        };

        self.GetNextSorterOps = function (tkfilter) {
            var qtokens = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                qtokens.push(self.SorterPath()[i]);
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/GetNextSorterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ sorters: qtokens  })
            }).pipe(
                function (content) {
                    self.SortersStack.push(self.CurrentSorters());
                    self.CurrentSorters(new q.TokenOptions());
                    self.CurrentSorters().Hint = content.Hint;
                    self.CurrentSorters().CurrentExpr(content.CurrentExpr);
                    self.CurrentSorters().QuoteVal = content.QuoteVal;
                    self.CurrentSorters().CanBeClosed = content.CanBeClosed;
                    self.CurrentSorters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.GetNextFilterOps = function (tkfilter) {
            var sorters = [];
            var filters = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                sorters.push(self.SorterPath()[i]);
            for (var i = 0; i < self.FilterPath().length; i++)
                filters.push(self.FilterPath()[i]);
            var qexpr = new q.QueryExpression(sorters, filters);
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/GetNextFilterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ qexpr: qexpr, tkstr: ""  })
            }).pipe(
                function (content) {
                    if (self.CurrentFilters() !== null)
                        self.FiltersStack.push(self.CurrentFilters());
                    self.FilterClosed(content.CanBeClosed);
                    self.CurrentFilters(new q.TokenOptions());
                    self.CurrentFilters().Hint = content.Hint;
                        self.CurrentFilters().CurrentExpr(content.CurrentExpr);
                    self.CurrentFilters().QuoteVal = content.QuoteVal;
                    self.CurrentFilters().CanBeClosed = content.CanBeClosed;
                    self.CurrentFilters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, true)) {
                            self.CurrentFilters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.NextPageBlock = function (qexpr, last, edit) {
            if (self.IsQueryStateChanged())
                self.ResetPageState();
            if (self.CurrBlockIndex() < self.PageBlocks().length) {
                return $.Deferred().resolve();
            }
            self.set.PageBlockSize = self.PageBlockSize();
            self.set.PageSize_ = self.PageSize_();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/NextPageBlock",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, qexpr: qexpr, prevlast: last  })
            }).pipe(
                function (data) {
                    if (last == null) 
                        self.EntityCount(data.TotalEntities);
                    self.PageCount(data.TotalPages);
                    if (data.Pages.length == 0) {
                        var lpb = self.LastPageBlock();
                        if (lpb !== null) {
                            lpb.IsLastBlock(true);
                            var lp = lpb.LastPage();
                            if (lp !== null) {
                                lp.IsLastPage(true);
                                self.CurrBlockIndex(self.CurrBlockIndex() - 1);
                            }
                        } else {
                            self.PagesWindow.removeAll();
                        }
                    }
                    else {
                        var idx0 = 0;
                        for (var i = 0; i < self.CurrBlockIndex(); i++ ) {
                            idx0 += self.PageBlocks()[i].BlockCount;
                        }
                        var pb = new ProductPageBlock(self, idx0, data, edit);
                        pb.BlockIndex(self.PageBlocks().length);
                        self.PageBlocks.push(pb);
                        self.PagesWindow.removeAll();
                        for (var i = 0; i < pb.Pages().length; i++) {
                            self.PagesWindow.push(pb.Pages()[i]);
                        }
                    }
                    self.IsQueryStateChanged(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.AddOrUpdateEntities = function (changed) {
            if (changed == null || changed.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/AddOrUpdateEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: changed })
            }).pipe(
                function (data) {
                    //...
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.DeleteEntities = function (deleted) {
            if (deleted == null || deleted.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/DeleteEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: deleted })
            }).pipe(
                function (data) {
                    //..
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.LoadEntityByKey = function(ProductID, isView) {
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/ProductSet/LoadEntityByKey",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ ProductID: ProductID })
            }).pipe(
                function (data) {
                    if (isView)
                        return $.Deferred().resolve(new ProductView(data));
                    else
                        return $.Deferred().resolve(new Product(data));
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

    }

    return {
        entityView: ProductView,
        entityEdit: Product,
        entityPage: ProductPage,
        entityPageBlock: ProductPageBlock,
        settings: ProductSettings,
        entitySet: ProductSet
    }
})