/* ------------------------------------------------------------------------------
 *
 *     This code was generated by CGW X-Script Code Generator.
 *
 *     Archymeta Information Technologies Co., Ltd.
 *
 *     Changes to this file, especially those bit flags, may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * 
 ------------------------------------------------------------------------------ */

define(['knockout', 'config', 'queryModels' ], function (ko, config, q) {

    var dt = new Date();
    var utcoff = dt.getTimezoneOffset() * 60000;
    var getDateVal = function (val) {
        if (val == null) {
            return null;
        }
        var tv = val.substr(6);
        tv = tv.substr(0, tv.length - 2);
        var ms = parseInt(tv);
        return new Date(ms);
    };
    var toJsonDate = function (dt) {
        if (dt == null) {
            return null;
        }
        var str = "/Date(";
        str += (dt.getTime()).toString();
        var off = utcoff > 0 ? dt.getTimezoneOffset() : -dt.getTimezoneOffset();
        var h = off / 60;
        var hstr = h > 9 ? h.toString() : '0' + h.toString();
        var m = off % 60;
        var mstr = m > 9 ? m.toString() : '0' + m.toString();
        if (utcoff > 0) {
            str += '-' + hstr + mstr;
        } else {
            str += '+' + hstr + mstr;
        }
        return str + ")/";
    };

    var EmployeeView = function (data) {
        var self = this;
        self.IsViewModel = true;
        self.data = data;
        self.DistinctString = data !== null ? data.DistinctString : "";
        self.LookupQuery = data !== null ? "?EmployeeID=" + self.data.EmployeeID : "";

        self.CreateSet = function () {
            return new EmployeeSet();
        };

        self.EmployeeID = data.EmployeeID;
        self.ReportsTo = data.ReportsTo;
        self.HireDate = getDateVal(data.HireDate);
        self.Notes = data.Notes;
        self.IsNotesLoaded = ko.observable(data.IsNotesLoaded);

        self.LoadEntityNotes = function () {
            if (self.IsNotesLoaded()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntityNotes",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _EmployeeID: self.data.EmployeeID })
            }).pipe(
                function (data) {
                    if (data !== null) {
                        self.Notes(data);
                    }
                    self.IsNotesLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.Photo = data.Photo;
        self.IsPhotoLoaded = ko.observable(data.IsPhotoLoaded);

        self.LoadEntityPhoto = function () {
            if (self.IsPhotoLoaded()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntityPhoto",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _EmployeeID: self.data.EmployeeID })
            }).pipe(
                function (data) {
                    if (data !== null) {
                        self.Photo(data);
                    }
                    self.IsPhotoLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.FirstName = data.FirstName;
        self.LastName = data.LastName;
        self.BirthDate = getDateVal(data.BirthDate);
        self.Address = data.Address;
        self.City = data.City;
        self.Country = data.Country;
        self.Extension = data.Extension;
        self.HomePhone = data.HomePhone;
        self.PhotoPath = data.PhotoPath;
        self.PostalCode = data.PostalCode;
        self.Region = data.Region;
        self.Title = data.Title;
        self.TitleOfCourtesy = data.TitleOfCourtesy;
        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.EmployeeID == data.EmployeeID;
        }

        self.NotesQuery = 'load-delayed-Notes?EmployeeID=' + self.data.EmployeeID + '&contentType=text/plain';

        self.PhotoQuery = 'load-delayed-Photo?EmployeeID=' + self.data.EmployeeID + '&contentType=image/bmp';

        if (data.UpperRef == null) {
            self.UpperRef = ko.observable(null);
            self.IsUpperRefMaterialized = ko.observable(data.ReportsTo == null);
        } else {
            self.UpperRef = ko.observable(new Employee(data.UpperRef));
            self.IsUpperRefMaterialized = ko.observable(true);
        }
        self.UpperRefSummary = ko.pureComputed(function () {
            if (self.IsUpperRefMaterialized() && data !== null) {
                return self.UpperRef() ? self.UpperRef.DistinctString : '';
            } else {
                return "";
            }
        });

        self.MaterializeUpperRef = function () {
            if (self.IsUpperRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeUpperRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.UpperRef = dref;
                        self.UpperRef(new EmployeeView(dref));
                        self.IsUpperRefMaterialized(true);
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsAllEmployeesMaterialized = ko.observable(false);
        if (data.Employees == null) {
            self.Employees = ko.observable(null);
            self.IsEmployeesMaterialized = ko.observable(false);
        } else {
            self.Employees = ko.observable(new EmployeeSet(data.Employees));
            self.IsEmployeesMaterialized = ko.observable(true);
        }
        self.ChangedEmployees = ko.observableArray();

        if (data !== null && data.ChangedEmployees !== null) {
            for (var i = 0; i < data.ChangedEmployees.length; i++) {
                self.ChangedEmployees.push(new EmployeeView(data.ChangedEmployees[i]));
            }
            self.IsAllEmployeesMaterialized(true);
        }

        self.MaterializeEmployees = function () {
            if (self.IsEmployeesMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeEmployees",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.Employees = dset;
                        var s = new EmployeeSet(dset);
                        s.set = dset;
                        s.TotalEntities(dset.EntityCount);
                        s.CurrentSorters(new q.TokenOptions());
                        for (var i = 0; i < dset.Sorters.length; i++)
                            s.CurrentSorters().Options.push(dset.Sorters[i]);
                        s.CurrentSorters().CanBeClosed = true;
                        s.CurrentSorters().isLocal = false;
                        self.Employees(s);
                        self.IsEmployeesMaterialized(true);
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.MaterializeAllEmployees = function () {
            if (self.IsAllEmployeesMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeAllEmployees",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (list) {
                    if (list !== null) {
                        self.data.ChangedEmployees = list;
                        for (var i = 0; i < list.length; i++) {
                            self.ChangedEmployees.push(new EmployeeView(list[i]));
                        }
                        self.IsAllEmployeesMaterialized(true);
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsAllEmployeeTerritorysMaterialized = ko.observable(false);
        if (data.EmployeeTerritorys == null) {
            self.EmployeeTerritorys = ko.observable(null);
            self.IsEmployeeTerritorysMaterialized = ko.observable(false);
        } else {
            self.IsEmployeeTerritorysMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/EmployeeTerritory', function (m) {
                self.EmployeeTerritorys = ko.observable(new m.entitySet(data.EmployeeTerritorys));
                self.IsEmployeeTerritorysMaterialized(true);
            });
        }
        self.ChangedEmployeeTerritorys = ko.observableArray();

        if (data !== null && data.ChangedEmployeeTerritorys !== null) {
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/EmployeeTerritory', function (m) {
                for (var i = 0; i < data.ChangedEmployeeTerritorys.length; i++) {
                    self.ChangedEmployeeTerritorys.push(new m.entityView(data.ChangedEmployeeTerritorys[i]));
                }
                self.IsAllEmployeeTerritorysMaterialized(true);
            });
        }

        self.MaterializeEmployeeTerritorys = function () {
            if (self.IsEmployeeTerritorysMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeEmployeeTerritorys",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.EmployeeTerritorys = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/EmployeeTerritory', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.EmployeeTerritorys(s);
                            self.IsEmployeeTerritorysMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.MaterializeAllEmployeeTerritorys = function () {
            if (self.IsAllEmployeeTerritorysMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeAllEmployeeTerritorys",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (list) {
                    if (list !== null) {
                        self.data.ChangedEmployeeTerritorys = list;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/EmployeeTerritory', function (m) {
                            for (var i = 0; i < list.length; i++) {
                                self.ChangedEmployeeTerritorys.push(new m.entityView(list[i]));
                            }
                            self.IsAllEmployeeTerritorysMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsAllOrdersMaterialized = ko.observable(false);
        if (data.Orders == null) {
            self.Orders = ko.observable(null);
            self.IsOrdersMaterialized = ko.observable(false);
        } else {
            self.IsOrdersMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order', function (m) {
                self.Orders = ko.observable(new m.entitySet(data.Orders));
                self.IsOrdersMaterialized(true);
            });
        }
        self.ChangedOrders = ko.observableArray();

        if (data !== null && data.ChangedOrders !== null) {
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order', function (m) {
                for (var i = 0; i < data.ChangedOrders.length; i++) {
                    self.ChangedOrders.push(new m.entityView(data.ChangedOrders[i]));
                }
                self.IsAllOrdersMaterialized(true);
            });
        }

        self.MaterializeOrders = function () {
            if (self.IsOrdersMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeOrders",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.Orders = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.Orders(s);
                            self.IsOrdersMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.MaterializeAllOrders = function () {
            if (self.IsAllOrdersMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeAllOrders",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (list) {
                    if (list !== null) {
                        self.data.ChangedOrders = list;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order', function (m) {
                            for (var i = 0; i < list.length; i++) {
                                self.ChangedOrders.push(new m.entityView(list[i]));
                            }
                            self.IsAllOrdersMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.HierarchyRoot = ko.observable(null);

        self.shallowDataCopy = function() {
            return {
                EmployeeID: self.data.EmployeeID,
                ReportsTo: self.data.ReportsTo,
                HireDate: self.data.HireDate,
                Notes: self.data.Notes,
                Photo: self.data.Photo,
                FirstName: self.data.FirstName,
                LastName: self.data.LastName,
                BirthDate: self.data.BirthDate,
                Address: self.data.Address,
                City: self.data.City,
                Country: self.data.Country,
                Extension: self.data.Extension,
                HomePhone: self.data.HomePhone,
                PhotoPath: self.data.PhotoPath,
                PostalCode: self.data.PostalCode,
                Region: self.data.Region,
                Title: self.data.Title,
                TitleOfCourtesy: self.data.TitleOfCourtesy
            };
        }

        self.IsEntitySelected = ko.observable(false);
    }

    var Employee = function (data) {
        var self = this;
        self.IsViewModel = false;
        self.TobeLoadMsg = ko.observable('to be loaded ...');
        self.Initializing = true;
        self.data = data;
        self.IsPersisted = ko.observable(data !== null);
        self.IsNewAddition = ko.observable(false);
        self.UpdateIndex = -1;
        self.DistinctString = ko.observable(data !== null ? data.DistinctString : "");
        self.LookupQuery = data !== null ? "entityedit?EmployeeID=" + self.data.EmployeeID : "";

        self.CreateSet = function () {
            return new EmployeeSet();
        };

        self.EmployeeID = data.EmployeeID;
        self.ReportsTo = ko.observable(data !== null ? data.ReportsTo : null);
        self.IsReportsToModified = ko.observable(data !== null ? data.IsReportsToModified : true);
        self.ReportsTo.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsReportsToModified(self.data == null || self.data.ReportsTo !== val);
             }
         });
        self.ReportsToCss = ko.pureComputed(function () {
            if (self.IsReportsToModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.HireDate = ko.observable(data !== null ? getDateVal(data.HireDate) : null);
        self.IsHireDateModified = ko.observable(data !== null ? data.IsHireDateModified : true);
        self.HireDate.subscribe(function (val) {
             if (!self.Initializing) {
                 if (self.data == null) {
                     self.IsHireDateModified(true);
                 } else if (self.data.HireDate !== null && val !== null) {
                     var diff = getDateVal(self.data.HireDate) - val;
                     self.IsHireDateModified(diff < -999 || diff > 999);
                 } else if (self.data.HireDate == null && val == null) {
                     self.IsHireDateModified(false);
                 } else {
                     self.IsHireDateModified(true);
                 }
             }
         });
        self.HireDateCss = ko.pureComputed(function () {
            if (self.IsHireDateModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.Notes = ko.observable(data !== null ? data.Notes : null);
        self.IsNotesModified = ko.observable(data !== null ? data.IsNotesModified : true);
        self.Notes.subscribe(function (val) {
             if (!self.Initializing) {
                 if (self.data == null) {
                     self.IsNotesModified(true);
                 } else if (self.IsNotesLoaded()) {
                     self.IsNotesModified(self.data.Notes !== val);
                 }
             }
         });
        self.NotesCss = ko.pureComputed(function () {
            if (self.IsNotesModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.IsNotesLoaded = ko.observable(data !== null ? data.IsNotesLoaded : true);
        self.LoadEntityNotes = function () {
            if (self.IsNotesLoaded()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntityNotes",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _EmployeeID: self.data.EmployeeID })
            }).pipe(
                function (data) {
                    if (data !== null) {
                        self.Initializing = true;
                        self.Notes(data);
                        self.Initializing = false;
                    }
                    self.IsNotesLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.UpdateEntityNotes = function () {
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/UpdateEntityNotes",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _EmployeeID: self.data.EmployeeID, data: self.Notes() })
            }).pipe(
                function (content) {
                    self.data.Notes = self.Notes();
                    self.IsNotesModified(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.Photo = ko.observable(data !== null ? data.Photo : null);
        self.IsPhotoModified = ko.observable(data !== null ? data.IsPhotoModified : true);
        self.Photo.subscribe(function (val) {
             if (!self.Initializing) {
                 if (self.data == null) {
                     self.IsPhotoModified(true);
                 } else if (self.IsPhotoLoaded()) {
                     self.IsPhotoModified(self.data.Photo !== val);
                 }
             }
         });
        self.PhotoCss = ko.pureComputed(function () {
            if (self.IsPhotoModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.IsPhotoLoaded = ko.observable(data !== null ? data.IsPhotoLoaded : true);
        self.LoadEntityPhoto = function () {
            if (self.IsPhotoLoaded()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntityPhoto",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _EmployeeID: self.data.EmployeeID })
            }).pipe(
                function (data) {
                    if (data !== null) {
                        self.Initializing = true;
                        self.Photo(data);
                        self.Initializing = false;
                    }
                    self.IsPhotoLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.UpdateEntityPhoto = function () {
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/UpdateEntityPhoto",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _EmployeeID: self.data.EmployeeID, data: self.Photo() })
            }).pipe(
                function (content) {
                    self.data.Photo = self.Photo();
                    self.IsPhotoModified(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.FirstName = data.FirstName;
        self.LastName = data.LastName;
        self.BirthDate = ko.observable(data !== null ? getDateVal(data.BirthDate) : null);
        self.Address = ko.observable(data !== null ? data.Address : null);
        self.IsAddressModified = ko.observable(data !== null ? data.IsAddressModified : true);
        self.Address.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsAddressModified(self.data == null || self.data.Address !== val);
             }
         });
        self.AddressCss = ko.pureComputed(function () {
            if (self.IsAddressModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.City = ko.observable(data !== null ? data.City : null);
        self.IsCityModified = ko.observable(data !== null ? data.IsCityModified : true);
        self.City.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsCityModified(self.data == null || self.data.City !== val);
             }
         });
        self.CityCss = ko.pureComputed(function () {
            if (self.IsCityModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.Country = ko.observable(data !== null ? data.Country : null);
        self.IsCountryModified = ko.observable(data !== null ? data.IsCountryModified : true);
        self.Country.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsCountryModified(self.data == null || self.data.Country !== val);
             }
         });
        self.CountryCss = ko.pureComputed(function () {
            if (self.IsCountryModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.Extension = ko.observable(data !== null ? data.Extension : null);
        self.IsExtensionModified = ko.observable(data !== null ? data.IsExtensionModified : true);
        self.Extension.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsExtensionModified(self.data == null || self.data.Extension !== val);
             }
         });
        self.ExtensionCss = ko.pureComputed(function () {
            if (self.IsExtensionModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.HomePhone = ko.observable(data !== null ? data.HomePhone : null);
        self.IsHomePhoneModified = ko.observable(data !== null ? data.IsHomePhoneModified : true);
        self.HomePhone.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsHomePhoneModified(self.data == null || self.data.HomePhone !== val);
             }
         });
        self.HomePhoneCss = ko.pureComputed(function () {
            if (self.IsHomePhoneModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.PhotoPath = ko.observable(data !== null ? data.PhotoPath : null);
        self.IsPhotoPathModified = ko.observable(data !== null ? data.IsPhotoPathModified : true);
        self.PhotoPath.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsPhotoPathModified(self.data == null || self.data.PhotoPath !== val);
             }
         });
        self.PhotoPathCss = ko.pureComputed(function () {
            if (self.IsPhotoPathModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.PostalCode = ko.observable(data !== null ? data.PostalCode : null);
        self.IsPostalCodeModified = ko.observable(data !== null ? data.IsPostalCodeModified : true);
        self.PostalCode.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsPostalCodeModified(self.data == null || self.data.PostalCode !== val);
             }
         });
        self.PostalCodeCss = ko.pureComputed(function () {
            if (self.IsPostalCodeModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.Region = ko.observable(data !== null ? data.Region : null);
        self.IsRegionModified = ko.observable(data !== null ? data.IsRegionModified : true);
        self.Region.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsRegionModified(self.data == null || self.data.Region !== val);
             }
         });
        self.RegionCss = ko.pureComputed(function () {
            if (self.IsRegionModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.Title = ko.observable(data !== null ? data.Title : null);
        self.IsTitleModified = ko.observable(data !== null ? data.IsTitleModified : true);
        self.Title.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsTitleModified(self.data == null || self.data.Title !== val);
             }
         });
        self.TitleCss = ko.pureComputed(function () {
            if (self.IsTitleModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.TitleOfCourtesy = ko.observable(data !== null ? data.TitleOfCourtesy : null);
        self.IsTitleOfCourtesyModified = ko.observable(data !== null ? data.IsTitleOfCourtesyModified : true);
        self.TitleOfCourtesy.subscribe(function (val) {
             if (!self.Initializing) {
                 self.IsTitleOfCourtesyModified(self.data == null || self.data.TitleOfCourtesy !== val);
             }
         });
        self.TitleOfCourtesyCss = ko.pureComputed(function () {
            if (self.IsTitleOfCourtesyModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.NotesQuery = 'load-delayed-Notes?EmployeeID=' + self.data.EmployeeID + '&contentType=text/plain';

        self.PhotoQuery = 'load-delayed-Photo?EmployeeID=' + self.data.EmployeeID + '&contentType=image/bmp';

        self.IsEntityChanged = ko.observable(false);

        self.IfEntityChanged = ko.pureComputed(function () {
            return self.IsReportsToModified() || self.IsHireDateModified() || self.IsNotesModified() || self.IsPhotoModified() || self.IsAddressModified() || self.IsCityModified() || self.IsCountryModified() || self.IsExtensionModified() || self.IsHomePhoneModified() || self.IsPhotoPathModified() || self.IsPostalCodeModified() || self.IsRegionModified() || self.IsTitleModified() || self.IsTitleOfCourtesyModified();
        });

        self.IsEntityModified = function () {
            return self.IsReportsToModified() || self.IsHireDateModified() || self.IsNotesModified() || self.IsPhotoModified() || self.IsAddressModified() || self.IsCityModified() || self.IsCountryModified() || self.IsExtensionModified() || self.IsHomePhoneModified() || self.IsPhotoPathModified() || self.IsPostalCodeModified() || self.IsRegionModified() || self.IsTitleModified() || self.IsTitleOfCourtesyModified();
        }

        self.IsEntityComplete = function () {
            return self.FirstName !== null && self.LastName !== null;
        };

        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.EmployeeID() == data.EmployeeID();
        }

        self.GetUpdatedData = function () {
            if (self.data == null) {
                return self.GetNewData();
            }
            var d = self.NewDataCopy();
            if (self.IsReportsToModified() || self.IsHireDateModified() || self.IsNotesModified() || self.IsPhotoModified() || self.IsAddressModified() || self.IsCityModified() || self.IsCountryModified() || self.IsExtensionModified() || self.IsHomePhoneModified() || self.IsPhotoPathModified() || self.IsPostalCodeModified() || self.IsRegionModified() || self.IsTitleModified() || self.IsTitleOfCourtesyModified()) {
                if (self.IsReportsToModified()) {
                    d.ReportsTo = self.ReportsTo();
                    d.IsReportsToModified = true;
                }
                if (self.IsHireDateModified()) {
                    d.HireDate = toJsonDate(self.HireDate());
                    d.IsHireDateModified = true;
                }
                if (self.IsNotesModified()) {
                    d.Notes = self.Notes();
                    d.IsNotesModified = true;
                    d.IsNotesLoaded = self.IsNotesLoaded();;
                }
                if (self.IsPhotoModified()) {
                    d.Photo = self.Photo();
                    d.IsPhotoModified = true;
                    d.IsPhotoLoaded = self.IsPhotoLoaded();;
                }
                if (self.IsAddressModified()) {
                    d.Address = self.Address();
                    d.IsAddressModified = true;
                }
                if (self.IsCityModified()) {
                    d.City = self.City();
                    d.IsCityModified = true;
                }
                if (self.IsCountryModified()) {
                    d.Country = self.Country();
                    d.IsCountryModified = true;
                }
                if (self.IsExtensionModified()) {
                    d.Extension = self.Extension();
                    d.IsExtensionModified = true;
                }
                if (self.IsHomePhoneModified()) {
                    d.HomePhone = self.HomePhone();
                    d.IsHomePhoneModified = true;
                }
                if (self.IsPhotoPathModified()) {
                    d.PhotoPath = self.PhotoPath();
                    d.IsPhotoPathModified = true;
                }
                if (self.IsPostalCodeModified()) {
                    d.PostalCode = self.PostalCode();
                    d.IsPostalCodeModified = true;
                }
                if (self.IsRegionModified()) {
                    d.Region = self.Region();
                    d.IsRegionModified = true;
                }
                if (self.IsTitleModified()) {
                    d.Title = self.Title();
                    d.IsTitleModified = true;
                }
                if (self.IsTitleOfCourtesyModified()) {
                    d.TitleOfCourtesy = self.TitleOfCourtesy();
                    d.IsTitleOfCourtesyModified = true;
                }
                d.IsEntityChanged = true;
                return d;
            } else {
                return null;
            }
        };

        self.GetNewData = function () {
            if (self.FirstName == null) {
                throw "FirstName is required!";
            }    
            else if (self.LastName == null) {
                throw "LastName is required!";
            }    
            var d = {
                "ReportsTo": self.ReportsTo(),
                "IsReportsToModified": true,
                "HireDate": toJsonDate(self.HireDate()),
                "IsHireDateModified": true,
                "Notes": self.Notes(),
                "IsNotesModified": true,
                "Photo": self.Photo(),
                "IsPhotoModified": true,
                "FirstName": self.FirstName,
                "LastName": self.LastName,
                "BirthDate": toJsonDate(self.BirthDate),
                "Address": self.Address(),
                "IsAddressModified": true,
                "City": self.City(),
                "IsCityModified": true,
                "Country": self.Country(),
                "IsCountryModified": true,
                "Extension": self.Extension(),
                "IsExtensionModified": true,
                "HomePhone": self.HomePhone(),
                "IsHomePhoneModified": true,
                "PhotoPath": self.PhotoPath(),
                "IsPhotoPathModified": true,
                "PostalCode": self.PostalCode(),
                "IsPostalCodeModified": true,
                "Region": self.Region(),
                "IsRegionModified": true,
                "Title": self.Title(),
                "IsTitleModified": true,
                "TitleOfCourtesy": self.TitleOfCourtesy(),
                "IsTitleOfCourtesyModified": true,
                "IsEntityChanged": true,
                "IsPersisted": false
            };
            return d;
        };

        self.NewDataCopy = function () {
            var d = {
                "EmployeeID": self.data.EmployeeID,
                "ReportsTo": self.data.ReportsTo,
                "IsReportsToModified": self.IsReportsToModified(),
                "HireDate": self.data.HireDate,
                "IsHireDateModified": self.IsHireDateModified(),
                "Notes": self.data.Notes,
                "IsNotesModified": self.IsNotesModified(),
                "Photo": self.data.Photo,
                "IsPhotoModified": self.IsPhotoModified(),
                "FirstName": self.data.FirstName,
                "LastName": self.data.LastName,
                "BirthDate": self.data.BirthDate,
                "Address": self.data.Address,
                "IsAddressModified": self.IsAddressModified(),
                "City": self.data.City,
                "IsCityModified": self.IsCityModified(),
                "Country": self.data.Country,
                "IsCountryModified": self.IsCountryModified(),
                "Extension": self.data.Extension,
                "IsExtensionModified": self.IsExtensionModified(),
                "HomePhone": self.data.HomePhone,
                "IsHomePhoneModified": self.IsHomePhoneModified(),
                "PhotoPath": self.data.PhotoPath,
                "IsPhotoPathModified": self.IsPhotoPathModified(),
                "PostalCode": self.data.PostalCode,
                "IsPostalCodeModified": self.IsPostalCodeModified(),
                "Region": self.data.Region,
                "IsRegionModified": self.IsRegionModified(),
                "Title": self.data.Title,
                "IsTitleModified": self.IsTitleModified(),
                "TitleOfCourtesy": self.data.TitleOfCourtesy,
                "IsTitleOfCourtesyModified": self.IsTitleOfCourtesyModified(),
                "IsEntityChanged": self.data.IsEntityChanged,
                "IsPersisted": self.data.IsPersisted
            };
            return d;
        };

        self.UpdateData = function (dsrc) {
            if (self.data == null ) {
                return;
            }
            self.data.ReportsTo = dsrc.ReportsTo;
            self.ReportsTo(dsrc.ReportsTo);
            self.IsReportsToModified(false);
            self.data.HireDate = dsrc.HireDate;
            self.HireDate(getDateVal(dsrc.HireDate));
            self.IsHireDateModified(false);
            self.data.Notes = dsrc.Notes;
            self.Notes(dsrc.Notes);
            self.IsNotesModified(false);
            self.data.Photo = dsrc.Photo;
            self.Photo(dsrc.Photo);
            self.IsPhotoModified(false);
            self.data.Address = dsrc.Address;
            self.Address(dsrc.Address);
            self.IsAddressModified(false);
            self.data.City = dsrc.City;
            self.City(dsrc.City);
            self.IsCityModified(false);
            self.data.Country = dsrc.Country;
            self.Country(dsrc.Country);
            self.IsCountryModified(false);
            self.data.Extension = dsrc.Extension;
            self.Extension(dsrc.Extension);
            self.IsExtensionModified(false);
            self.data.HomePhone = dsrc.HomePhone;
            self.HomePhone(dsrc.HomePhone);
            self.IsHomePhoneModified(false);
            self.data.PhotoPath = dsrc.PhotoPath;
            self.PhotoPath(dsrc.PhotoPath);
            self.IsPhotoPathModified(false);
            self.data.PostalCode = dsrc.PostalCode;
            self.PostalCode(dsrc.PostalCode);
            self.IsPostalCodeModified(false);
            self.data.Region = dsrc.Region;
            self.Region(dsrc.Region);
            self.IsRegionModified(false);
            self.data.Title = dsrc.Title;
            self.Title(dsrc.Title);
            self.IsTitleModified(false);
            self.data.TitleOfCourtesy = dsrc.TitleOfCourtesy;
            self.TitleOfCourtesy(dsrc.TitleOfCourtesy);
            self.IsTitleOfCourtesyModified(false);
        };

        self.ResetData = function () {
            if (self.data == null ) {
                return;
            }
            if (self.IsReportsToModified()) {
                self.ReportsTo(self.data.ReportsTo);
            }
            if (self.IsHireDateModified()) {
                self.HireDate(getDateVal(self.data.HireDate));
            }
            if (self.IsNotesModified()) {
                self.Notes(self.data.Notes);
            }
            if (self.IsPhotoModified()) {
                self.Photo(self.data.Photo);
            }
            if (self.IsAddressModified()) {
                self.Address(self.data.Address);
            }
            if (self.IsCityModified()) {
                self.City(self.data.City);
            }
            if (self.IsCountryModified()) {
                self.Country(self.data.Country);
            }
            if (self.IsExtensionModified()) {
                self.Extension(self.data.Extension);
            }
            if (self.IsHomePhoneModified()) {
                self.HomePhone(self.data.HomePhone);
            }
            if (self.IsPhotoPathModified()) {
                self.PhotoPath(self.data.PhotoPath);
            }
            if (self.IsPostalCodeModified()) {
                self.PostalCode(self.data.PostalCode);
            }
            if (self.IsRegionModified()) {
                self.Region(self.data.Region);
            }
            if (self.IsTitleModified()) {
                self.Title(self.data.Title);
            }
            if (self.IsTitleOfCourtesyModified()) {
                self.TitleOfCourtesy(self.data.TitleOfCourtesy);
            }
        };

        self.shallowDataCopy = function() {
            return {
                EmployeeID: self.data.EmployeeID,
                ReportsTo: self.data.ReportsTo,
                HireDate: self.data.HireDate,
                Notes: self.data.Notes,
                Photo: self.data.Photo,
                FirstName: self.data.FirstName,
                LastName: self.data.LastName,
                BirthDate: self.data.BirthDate,
                Address: self.data.Address,
                City: self.data.City,
                Country: self.data.Country,
                Extension: self.data.Extension,
                HomePhone: self.data.HomePhone,
                PhotoPath: self.data.PhotoPath,
                PostalCode: self.data.PostalCode,
                Region: self.data.Region,
                Title: self.data.Title,
                TitleOfCourtesy: self.data.TitleOfCourtesy
            };
        }

        if (data == null) {
            self.IsUpperRefMaterialized = ko.observable(true);
            self.UpperRef = ko.observable(null);
        } else if (data.UpperRef == null) {
            self.IsUpperRefMaterialized = ko.observable(data.ReportsTo == null);
            self.UpperRef = ko.observable(null);
        } else {
            self.UpperRef = ko.observable(new Employee(data.UpperRef));
            self.IsUpperRefMaterialized = ko.observable(true);
        }

        self.UpperRefSummary = ko.pureComputed(function () {
            if (self.IsUpperRefMaterialized() && data !== null) {
                return self.UpperRef() ? self.UpperRef().DistinctString : '';
            } else {
                return self.TobeLoadMsg();
            }
        });

        self.MaterializeUpperRef = function () {
            if (self.IsUpperRefMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeUpperRef",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dref) {
                    if (dref !== null) {
                        self.data.UpperRef = dref;
                        self.UpperRef(new Employee(dref));
                        self.IsUpperRefMaterialized(true);
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsEmployeesMaterialized = ko.observable(data == null);

        self.Employees = ko.observable(data !== null ? data.Employees : null);

        self.MaterializeEmployees = function () {
            if (self.IsEmployeesMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeEmployees",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.Employees = dset;
                        var s = new EmployeeSet(dset);
                        s.set = dset;
                        s.TotalEntities(dset.EntityCount);
                        s.CurrentSorters(new q.TokenOptions());
                        for (var i = 0; i < dset.Sorters.length; i++)
                            s.CurrentSorters().Options.push(dset.Sorters[i]);
                        s.CurrentSorters().CanBeClosed = true;
                        s.CurrentSorters().isLocal = false;
                        self.Employees(s);
                        self.IsEmployeesMaterialized(true);
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsEmployeeTerritorysMaterialized = ko.observable(data == null);

        self.EmployeeTerritorys = ko.observable(data !== null ? data.EmployeeTerritorys : null);

        self.MaterializeEmployeeTerritorys = function () {
            if (self.IsEmployeeTerritorysMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeEmployeeTerritorys",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.EmployeeTerritorys = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/EmployeeTerritory', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.EmployeeTerritorys(s);
                            self.IsEmployeeTerritorysMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsOrdersMaterialized = ko.observable(data == null);

        self.Orders = ko.observable(data !== null ? data.Orders : null);

        self.MaterializeOrders = function () {
            if (self.IsOrdersMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/MaterializeOrders",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.Orders = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/Order', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.Orders(s);
                            self.IsOrdersMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.HierarchyRoot = ko.observable(null);

        self.IsEntitySelected = ko.observable(false);
        self.Initializing = false;
    }

    var EmployeeAbs = function (data, seed) {
        var self = this;
        self.data = data;
        self.seed = seed;
        self.NodeLabel = data.NodeLabel;
        self.DataBehind = self.seed.IsViewModel ? new EmployeeView(data.DataBehind) : Employee(data.DataBehind);
        self.IsSeedNode = seed.IsEntityIdentical(self.DataBehind);
        self.ParentExists = ko.observable(data.ParentExists);
        self.ChildExists = ko.observable(data.ChildExists);
        self.IsChildsLoaded = ko.observable(data.IsChildsLoaded);
        self.IsNodeSelected = ko.observable(false);
        self.IsNodeExpanded = ko.observable(false);
        self.ParentEntity = ko.observable(null);
        self.ChildEntities = ko.observableArray([]);
        for (var i = 0; i < data.ChildEntities.length; i++) {
            var c = new EmployeeAbs(data.ChildEntities[i], seed);
            self.ChildEntities.push(c);
            c.ParentEntity(self);
        }

        self.LoadEntityChildren = function () {
            if (self.IsChildsLoaded() || !self.ChildExists()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntityChildren",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ node: self.data })
            }).pipe(
                function (data) {
                    self.ChildExists(data.length > 0);
                    self.ChildEntities.removeAll();
                    for (var i = 0; i < data.length; i++) {
                        var c = new EmployeeAbs(data[i], self.seed);
                        self.ChildEntities.push(c);
                        c.ParentEntity(self);
                    }
                    self.IsChildsLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };
    }

    var EmployeePage = function (s, edit) {
        var self = this;
        var editPage = edit;
        self.set = s;
        self.Index_ = ko.observable();
        self.PageNumber = ko.pureComputed(function () {
            return self.Index_() + 1;
        });
        self.FirstItem = ko.observable({});
        self.LastItem = ko.observable({});
        self.CurrentItem = ko.observable(null);
        self.IsLastPage = ko.observable(false);
        self.IsDataLoaded = ko.observable(false);
        self.IsPageSelected = ko.observable(false);
        self.Items =  ko.observableArray([]);
        self.GetPageItems = function (s) {
            if (self.IsDataLoaded()) 
                return $.Deferred().resolve();
            var qexpr = s.getQueryExpr();
            var lastItem = null;
            var ipage = self.Index_();
            if (self.Index_() > 0) {
                var blk = s.PageBlocks()[s.CurrBlockIndex()];
                if (blk.Pages()[0].Index_() !== ipage) {
                    for (var i = 0; i < blk.Pages().length; i++) {
                        if (blk.Pages()[i].Index_() == ipage - 1) {
                            lastItem = blk.Pages()[i].LastItem();
                            break;
                        }
                    }
                } else {
                    var prvb = s.PageBlocks()[s.CurrBlockIndex() - 1];
                    lastItem = prvb.Pages()[prvb.Pages().length - 1].LastItem();
                }
            }
            self.Items.removeAll();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/GetPageItems",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: s.set, qexpr: qexpr, prevlast: lastItem })
            }).pipe(
                function (items) {
                    for (var i = 0; i < items.length; i++) {
                        if (editPage)
                            self.Items.push(new Employee(items[i]));
                        else
                            self.Items.push(new EmployeeView(items[i]));
                    }
                    self.IsDataLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        }
    }

    var EmployeePageBlock = function (s, idx0, data, edit) {
        var self = this;
        var set = s;
        self.BlockIndex = ko.observable(0);
        self.BlockNumber = ko.pureComputed(function () { return self.BlockIndex() + 1; });
        self.IsBlockSelected = ko.pureComputed(function() {
            return set.CurrBlockIndex() == self.BlockIndex();
        });
        self.IsLastBlock = ko.observable(data.IsLastBlock);
        self.BlockCount = data.BlockCount;
        self.Pages = ko.observableArray([]);
        if (data.Pages) {
            for (var i = 0; i < data.Pages.length; i++ ) {
                var pdata = data.Pages[i];
                var page = new EmployeePage(s, edit);
                page.Index_(idx0 + pdata.Index_);
                page.FirstItem(pdata.FirstItem);
                page.LastItem(pdata.LastItem);
                page.IsLastPage(pdata.IsLastPage);
                self.Pages.push(page);
            }
        }
        self.LastPage = function () {
            return self.Pages().length == 0 ? null : self.Pages()[self.Pages().length - 1];
        };
    }

    var EmployeeSettings = function (settings) {
        var self = this;
        self.data = settings || {};
        self.data.show_EmployeeID = self.data.show_EmployeeID || true;
        self.show_EmployeeID = ko.observable(self.data.show_EmployeeID);
        self.show_EmployeeID.subscribe(function (v) {
            self.data.show_EmployeeID = v;
        });
        self.data.collapse_EmployeeID = self.data.collapse_EmployeeID || false;
        self.collapse_EmployeeID = ko.observable(self.data.collapse_EmployeeID);
        self.collapse_EmployeeID.subscribe(function (v) {
            self.data.collapse_EmployeeID = v;
        });
        self.data.width_EmployeeID = self.data.width_EmployeeID || 'auto';
        self.width_EmployeeID = ko.observable(self.data.width_EmployeeID);
        self.width_EmployeeID.subscribe(function (v) {
            self.data.width_EmployeeID = v;
        });
        self.data.show_ReportsTo = self.data.show_ReportsTo || true;
        self.show_ReportsTo = ko.observable(self.data.show_ReportsTo);
        self.show_ReportsTo.subscribe(function (v) {
            self.data.show_ReportsTo = v;
        });
        self.data.collapse_ReportsTo = self.data.collapse_ReportsTo || true;
        self.collapse_ReportsTo = ko.observable(self.data.collapse_ReportsTo);
        self.collapse_ReportsTo.subscribe(function (v) {
            self.data.collapse_ReportsTo = v;
        });
        self.data.width_ReportsTo = self.data.width_ReportsTo || '';
        self.width_ReportsTo = ko.observable(self.data.width_ReportsTo);
        self.width_ReportsTo.subscribe(function (v) {
            self.data.width_ReportsTo = v;
        });
        self.data.show_HireDate = self.data.show_HireDate || true;
        self.show_HireDate = ko.observable(self.data.show_HireDate);
        self.show_HireDate.subscribe(function (v) {
            self.data.show_HireDate = v;
        });
        self.data.collapse_HireDate = self.data.collapse_HireDate || false;
        self.collapse_HireDate = ko.observable(self.data.collapse_HireDate);
        self.collapse_HireDate.subscribe(function (v) {
            self.data.collapse_HireDate = v;
        });
        self.data.width_HireDate = self.data.width_HireDate || 'auto';
        self.width_HireDate = ko.observable(self.data.width_HireDate);
        self.width_HireDate.subscribe(function (v) {
            self.data.width_HireDate = v;
        });
        self.data.show_Notes = self.data.show_Notes || true;
        self.show_Notes = ko.observable(self.data.show_Notes);
        self.show_Notes.subscribe(function (v) {
            self.data.show_Notes = v;
        });
        self.data.collapse_Notes = self.data.collapse_Notes || true;
        self.collapse_Notes = ko.observable(self.data.collapse_Notes);
        self.collapse_Notes.subscribe(function (v) {
            self.data.collapse_Notes = v;
        });
        self.data.width_Notes = self.data.width_Notes || '';
        self.width_Notes = ko.observable(self.data.width_Notes);
        self.width_Notes.subscribe(function (v) {
            self.data.width_Notes = v;
        });
        self.data.show_Photo = self.data.show_Photo || true;
        self.show_Photo = ko.observable(self.data.show_Photo);
        self.show_Photo.subscribe(function (v) {
            self.data.show_Photo = v;
        });
        self.data.collapse_Photo = self.data.collapse_Photo || true;
        self.collapse_Photo = ko.observable(self.data.collapse_Photo);
        self.collapse_Photo.subscribe(function (v) {
            self.data.collapse_Photo = v;
        });
        self.data.width_Photo = self.data.width_Photo || '';
        self.width_Photo = ko.observable(self.data.width_Photo);
        self.width_Photo.subscribe(function (v) {
            self.data.width_Photo = v;
        });
        self.data.show_FirstName = self.data.show_FirstName || true;
        self.show_FirstName = ko.observable(self.data.show_FirstName);
        self.show_FirstName.subscribe(function (v) {
            self.data.show_FirstName = v;
        });
        self.data.collapse_FirstName = self.data.collapse_FirstName || false;
        self.collapse_FirstName = ko.observable(self.data.collapse_FirstName);
        self.collapse_FirstName.subscribe(function (v) {
            self.data.collapse_FirstName = v;
        });
        self.data.width_FirstName = self.data.width_FirstName || 'auto';
        self.width_FirstName = ko.observable(self.data.width_FirstName);
        self.width_FirstName.subscribe(function (v) {
            self.data.width_FirstName = v;
        });
        self.data.show_LastName = self.data.show_LastName || true;
        self.show_LastName = ko.observable(self.data.show_LastName);
        self.show_LastName.subscribe(function (v) {
            self.data.show_LastName = v;
        });
        self.data.collapse_LastName = self.data.collapse_LastName || false;
        self.collapse_LastName = ko.observable(self.data.collapse_LastName);
        self.collapse_LastName.subscribe(function (v) {
            self.data.collapse_LastName = v;
        });
        self.data.width_LastName = self.data.width_LastName || 'auto';
        self.width_LastName = ko.observable(self.data.width_LastName);
        self.width_LastName.subscribe(function (v) {
            self.data.width_LastName = v;
        });
        self.data.show_BirthDate = self.data.show_BirthDate || true;
        self.show_BirthDate = ko.observable(self.data.show_BirthDate);
        self.show_BirthDate.subscribe(function (v) {
            self.data.show_BirthDate = v;
        });
        self.data.collapse_BirthDate = self.data.collapse_BirthDate || false;
        self.collapse_BirthDate = ko.observable(self.data.collapse_BirthDate);
        self.collapse_BirthDate.subscribe(function (v) {
            self.data.collapse_BirthDate = v;
        });
        self.data.width_BirthDate = self.data.width_BirthDate || 'auto';
        self.width_BirthDate = ko.observable(self.data.width_BirthDate);
        self.width_BirthDate.subscribe(function (v) {
            self.data.width_BirthDate = v;
        });
        self.data.show_Address = self.data.show_Address || true;
        self.show_Address = ko.observable(self.data.show_Address);
        self.show_Address.subscribe(function (v) {
            self.data.show_Address = v;
        });
        self.data.collapse_Address = self.data.collapse_Address || false;
        self.collapse_Address = ko.observable(self.data.collapse_Address);
        self.collapse_Address.subscribe(function (v) {
            self.data.collapse_Address = v;
        });
        self.data.width_Address = self.data.width_Address || 'auto';
        self.width_Address = ko.observable(self.data.width_Address);
        self.width_Address.subscribe(function (v) {
            self.data.width_Address = v;
        });
        self.data.show_City = self.data.show_City || true;
        self.show_City = ko.observable(self.data.show_City);
        self.show_City.subscribe(function (v) {
            self.data.show_City = v;
        });
        self.data.collapse_City = self.data.collapse_City || false;
        self.collapse_City = ko.observable(self.data.collapse_City);
        self.collapse_City.subscribe(function (v) {
            self.data.collapse_City = v;
        });
        self.data.width_City = self.data.width_City || 'auto';
        self.width_City = ko.observable(self.data.width_City);
        self.width_City.subscribe(function (v) {
            self.data.width_City = v;
        });
        self.data.show_Country = self.data.show_Country || true;
        self.show_Country = ko.observable(self.data.show_Country);
        self.show_Country.subscribe(function (v) {
            self.data.show_Country = v;
        });
        self.data.collapse_Country = self.data.collapse_Country || false;
        self.collapse_Country = ko.observable(self.data.collapse_Country);
        self.collapse_Country.subscribe(function (v) {
            self.data.collapse_Country = v;
        });
        self.data.width_Country = self.data.width_Country || 'auto';
        self.width_Country = ko.observable(self.data.width_Country);
        self.width_Country.subscribe(function (v) {
            self.data.width_Country = v;
        });
        self.data.show_Extension = self.data.show_Extension || true;
        self.show_Extension = ko.observable(self.data.show_Extension);
        self.show_Extension.subscribe(function (v) {
            self.data.show_Extension = v;
        });
        self.data.collapse_Extension = self.data.collapse_Extension || false;
        self.collapse_Extension = ko.observable(self.data.collapse_Extension);
        self.collapse_Extension.subscribe(function (v) {
            self.data.collapse_Extension = v;
        });
        self.data.width_Extension = self.data.width_Extension || 'auto';
        self.width_Extension = ko.observable(self.data.width_Extension);
        self.width_Extension.subscribe(function (v) {
            self.data.width_Extension = v;
        });
        self.data.show_HomePhone = self.data.show_HomePhone || true;
        self.show_HomePhone = ko.observable(self.data.show_HomePhone);
        self.show_HomePhone.subscribe(function (v) {
            self.data.show_HomePhone = v;
        });
        self.data.collapse_HomePhone = self.data.collapse_HomePhone || false;
        self.collapse_HomePhone = ko.observable(self.data.collapse_HomePhone);
        self.collapse_HomePhone.subscribe(function (v) {
            self.data.collapse_HomePhone = v;
        });
        self.data.width_HomePhone = self.data.width_HomePhone || 'auto';
        self.width_HomePhone = ko.observable(self.data.width_HomePhone);
        self.width_HomePhone.subscribe(function (v) {
            self.data.width_HomePhone = v;
        });
        self.data.show_PhotoPath = self.data.show_PhotoPath || true;
        self.show_PhotoPath = ko.observable(self.data.show_PhotoPath);
        self.show_PhotoPath.subscribe(function (v) {
            self.data.show_PhotoPath = v;
        });
        self.data.collapse_PhotoPath = self.data.collapse_PhotoPath || true;
        self.collapse_PhotoPath = ko.observable(self.data.collapse_PhotoPath);
        self.collapse_PhotoPath.subscribe(function (v) {
            self.data.collapse_PhotoPath = v;
        });
        self.data.width_PhotoPath = self.data.width_PhotoPath || '';
        self.width_PhotoPath = ko.observable(self.data.width_PhotoPath);
        self.width_PhotoPath.subscribe(function (v) {
            self.data.width_PhotoPath = v;
        });
        self.data.show_PostalCode = self.data.show_PostalCode || true;
        self.show_PostalCode = ko.observable(self.data.show_PostalCode);
        self.show_PostalCode.subscribe(function (v) {
            self.data.show_PostalCode = v;
        });
        self.data.collapse_PostalCode = self.data.collapse_PostalCode || false;
        self.collapse_PostalCode = ko.observable(self.data.collapse_PostalCode);
        self.collapse_PostalCode.subscribe(function (v) {
            self.data.collapse_PostalCode = v;
        });
        self.data.width_PostalCode = self.data.width_PostalCode || 'auto';
        self.width_PostalCode = ko.observable(self.data.width_PostalCode);
        self.width_PostalCode.subscribe(function (v) {
            self.data.width_PostalCode = v;
        });
        self.data.show_Region = self.data.show_Region || true;
        self.show_Region = ko.observable(self.data.show_Region);
        self.show_Region.subscribe(function (v) {
            self.data.show_Region = v;
        });
        self.data.collapse_Region = self.data.collapse_Region || false;
        self.collapse_Region = ko.observable(self.data.collapse_Region);
        self.collapse_Region.subscribe(function (v) {
            self.data.collapse_Region = v;
        });
        self.data.width_Region = self.data.width_Region || 'auto';
        self.width_Region = ko.observable(self.data.width_Region);
        self.width_Region.subscribe(function (v) {
            self.data.width_Region = v;
        });
        self.data.show_Title = self.data.show_Title || true;
        self.show_Title = ko.observable(self.data.show_Title);
        self.show_Title.subscribe(function (v) {
            self.data.show_Title = v;
        });
        self.data.collapse_Title = self.data.collapse_Title || false;
        self.collapse_Title = ko.observable(self.data.collapse_Title);
        self.collapse_Title.subscribe(function (v) {
            self.data.collapse_Title = v;
        });
        self.data.width_Title = self.data.width_Title || 'auto';
        self.width_Title = ko.observable(self.data.width_Title);
        self.width_Title.subscribe(function (v) {
            self.data.width_Title = v;
        });
        self.data.show_TitleOfCourtesy = self.data.show_TitleOfCourtesy || true;
        self.show_TitleOfCourtesy = ko.observable(self.data.show_TitleOfCourtesy);
        self.show_TitleOfCourtesy.subscribe(function (v) {
            self.data.show_TitleOfCourtesy = v;
        });
        self.data.collapse_TitleOfCourtesy = self.data.collapse_TitleOfCourtesy || false;
        self.collapse_TitleOfCourtesy = ko.observable(self.data.collapse_TitleOfCourtesy);
        self.collapse_TitleOfCourtesy.subscribe(function (v) {
            self.data.collapse_TitleOfCourtesy = v;
        });
        self.data.width_TitleOfCourtesy = self.data.width_TitleOfCourtesy || 'auto';
        self.width_TitleOfCourtesy = ko.observable(self.data.width_TitleOfCourtesy);
        self.width_TitleOfCourtesy.subscribe(function (v) {
            self.data.width_TitleOfCourtesy = v;
        });
    };

    var EmployeeSet = function () {
        var self = this;
        self.set = {};

        var jsonstr = localStorage.getItem('Northwind');
        if (typeof jsonstr == 'undefined' || jsonstr == null) {
            self.settings = new EmployeeSettings();
            var settings = { };
            settings.UIView = { };
            settings.UIView.EmployeeSet = self.settings.data;
            localStorage.setItem('Northwind', JSON.stringify(settings));
        } else {
            var settings = JSON.parse(jsonstr);
            self.settings = new EmployeeSettings(settings.UIView.EmployeeSet);
        }

        self.PageSize_ = ko.observable(config.defaultPageSize);
        self.PageWindowSize = ko.observable(config.defaultPageBlockSize);
        self.PageBlockSize = ko.observable(config.defaultPageBlockSize);
        self.SetKindName = "Table";
        self.EntityName = "Employee";
        self.TotalEntities = ko.observable(0);
        self.EntityCount = ko.observable(0);
        self.PageCount = ko.observable(0);
        self.PagesWindow = ko.observableArray([]);
        self.CurrentPage = ko.observable({});
        self.IsQueryStateChanged = ko.observable(false);
        self.BaseUrl = "";
        self.CurrentSorters = ko.observable(null);
        self.CurrentFilters = ko.observable(null);
        self.SortersStack = [];
        self.FiltersStack = [];
        self.SorterPath = ko.observableArray();
        self.FilterPath = ko.observableArray();
        self.PageBlocks = ko.observableArray([]);
        self.CurrBlockIndex = ko.observable(0);
        self.CurrentBlock = ko.pureComputed(function () {
            if (self.CurrBlockIndex() < 0 || self.CurrBlockIndex() >= self.PageBlocks().length - 1)
                return null;
            else
                return self.PageBlocks()[self.CurrBlockIndex()];
        });
        self.PrevBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx > 0) {
                return self.PageBlocks()[idx - 1];
            } else {
                return null;
            }
        });
        self.NextLoadedBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return self.PageBlocks()[idx + 1];
            } else {
                return null;
            }
        });
        self.MoreNextBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return true;
            } else {
                return self.PageBlocks().length > 0 && !self.PageBlocks()[self.PageBlocks().length - 1].IsLastBlock();
            }
        });
        self.LastPageBlock = ko.pureComputed(function () {
            return self.PageBlocks().length == 0 ? null : self.PageBlocks()[self.PageBlocks().length - 1];
        });

        self.ResetPageState = function () {
            self.CurrBlockIndex(0);
            self.PageBlocks.removeAll();
            self.IsQueryStateChanged(false)
        };

        self.IsFilteredView = ko.observable(false);

        self.HasFilteredView = ko.pureComputed(function () {
            return self.CurrentFilters() !== null && self.FilterClosed();
        });

        self.FilteredViewUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'EmployeeSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'EmployeeSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilteredEditUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'EmployeeSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'EmployeeSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilterClosed = ko.observable(false);

        self.RefreshSetState = function(qc) {
            self.IsQueryStateChanged(true);
            self.ResetPageState();
            self.PagesWindow.removeAll();
            if (typeof self.CurrentPage().Items !== 'undefined')
                self.CurrentPage().Items.removeAll();
        }

        self.GetSetInfo = function (tkfilter, _filter) {
            self.BaseUrl = config.baseUrl;
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/GetSetInfo",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ filter: _filter == null ? null : decodeURIComponent(_filter) })
            }).pipe(
                function (content) {
                    self.set = content;
                    self.IsFilteredView(typeof _filter !== 'undefined' && _filter !== null && _filter !== '');
                    self.TotalEntities(self.set.EntityCount);
                    self.CurrentSorters(new q.TokenOptions());
                    for (var i = 0; i < self.set.Sorters.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(self.set.Sorters[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    self.CurrentSorters().CanBeClosed = true;
                    self.CurrentSorters().isLocal = false;
                    return $.Deferred().resolve(self);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.getQueryExpr = function () {
            var sorters = [];
            var filters = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                sorters.push(self.SorterPath()[i]);
            for (var i = 0; i < self.FilterPath().length; i++)
                filters.push(self.FilterPath()[i]);
            return new q.QueryExpression(sorters, filters);
        }

        self.GetNextSorterOps = function (tkfilter) {
            var qtokens = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                qtokens.push(self.SorterPath()[i]);
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/GetNextSorterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ sorters: qtokens  })
            }).pipe(
                function (content) {
                    self.SortersStack.push(self.CurrentSorters());
                    self.CurrentSorters(new q.TokenOptions());
                    self.CurrentSorters().Hint = content.Hint;
                    self.CurrentSorters().CurrentExpr(content.CurrentExpr);
                    self.CurrentSorters().QuoteVal = content.QuoteVal;
                    self.CurrentSorters().CanBeClosed = content.CanBeClosed;
                    self.CurrentSorters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.GetNextFilterOps = function (tkfilter) {
            var qexpr = self.getQueryExpr();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/GetNextFilterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ qexpr: qexpr, tkstr: ""  })
            }).pipe(
                function (content) {
                    if (self.CurrentFilters() !== null)
                        self.FiltersStack.push(self.CurrentFilters());
                    self.FilterClosed(content.CanBeClosed);
                    self.CurrentFilters(new q.TokenOptions());
                    self.CurrentFilters().Hint = content.Hint;
                        self.CurrentFilters().CurrentExpr(content.CurrentExpr);
                    self.CurrentFilters().QuoteVal = content.QuoteVal;
                    self.CurrentFilters().CanBeClosed = content.CanBeClosed;
                    self.CurrentFilters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, true)) {
                            self.CurrentFilters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.NextPageBlock = function (qexpr, last, edit) {
            if (self.IsQueryStateChanged())
                self.ResetPageState();
            if (self.CurrBlockIndex() < self.PageBlocks().length) {
                return $.Deferred().resolve();
            }
            self.set.PageBlockSize = self.PageBlockSize();
            self.set.PageSize_ = self.PageSize_();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/NextPageBlock",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, qexpr: qexpr, prevlast: last  })
            }).pipe(
                function (data) {
                    if (last == null) 
                        self.EntityCount(data.TotalEntities);
                    self.PageCount(data.TotalPages);
                    if (data.Pages.length == 0) {
                        var lpb = self.LastPageBlock();
                        if (lpb !== null) {
                            lpb.IsLastBlock(true);
                            var lp = lpb.LastPage();
                            if (lp !== null) {
                                lp.IsLastPage(true);
                                self.CurrBlockIndex(self.CurrBlockIndex() - 1);
                            }
                        } else {
                            self.PagesWindow.removeAll();
                        }
                    }
                    else {
                        var idx0 = 0;
                        for (var i = 0; i < self.CurrBlockIndex(); i++ ) {
                            idx0 += self.PageBlocks()[i].BlockCount;
                        }
                        var pb = new EmployeePageBlock(self, idx0, data, edit);
                        pb.BlockIndex(self.PageBlocks().length);
                        self.PageBlocks.push(pb);
                        self.PagesWindow.removeAll();
                        for (var i = 0; i < pb.Pages().length; i++) {
                            self.PagesWindow.push(pb.Pages()[i]);
                        }
                    }
                    self.IsQueryStateChanged(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.AddOrUpdateEntities = function (changed) {
            if (changed == null || changed.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/AddOrUpdateEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: changed })
            }).pipe(
                function (data) {
                    //...
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.DeleteEntities = function (deleted) {
            if (deleted == null || deleted.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/DeleteEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: deleted })
            }).pipe(
                function (data) {
                    //..
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.LoadEntityByKey = function(EmployeeID, isView) {
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntityByKey",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ EmployeeID: EmployeeID })
            }).pipe(
                function (data) {
                    if (isView)
                        return $.Deferred().resolve(new EmployeeView(data));
                    else
                        return $.Deferred().resolve(new Employee(data));
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        }

        self.HierarchyRoots = ko.observableArray([]);
        self.HierarchyRootsLoaded = ko.observable(false);

        self.LoadEntitySetRoots = function (seed) {
            if (self.HierarchyRootsLoaded()) {
                return $.Deferred().resolve();
            }
            var _seed = seed;
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntitySetRoots",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ })
            }).pipe(
                function (data) {
                    self.HierarchyRoots.removeAll();
                    for (var i = 0; i < data.length; i++) {
                        var r = new EmployeeAbs(data[i], _seed);
                        self.HierarchyRoots.push(r);
                    }
                    self.HierarchyRootsLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.LoadEntityParent = function (node) {
            if (!node.ParentExists()) {
                return $.Deferred().resolve(null);
            }
            if (node.ParentEntity() !== null) {
                return $.Deferred().resolve(node.ParentEntity());
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntityParent",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ node: node.data })
            }).pipe(
                function (data) {
                    var p = new EmployeeAbs(data, node.seed);
                    node.ParentEntity(p);
                    self.CurrentHierarchyRoot(p);
                    return $.Deferred().resolve(p);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.LoadEntityChildren = function (node) {
            if (node.IsChildsLoaded() || !node.ChildExists()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntityChildren",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ node: node.data })
            }).pipe(
                function (data) {
                    node.ChildEntities.removeAll();
                    node.ChildExists(data.length > 0);
                    for (var i = 0; i < data.length; i++) {
                        var c = new EmployeeAbs(data[i], node.seed);
                        node.ChildEntities.push(c);
                        c.ParentEntity(node);
                    }
                    node.IsChildsLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.LoadEntityFullHierarchyRecurs = function (entity) {
            if (entity.data == null) {
                return $.Deferred().resolve();
            }
            var _seed = entity;
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntityFullHierarchyRecurs",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: entity.data })
            }).pipe(
                function (data) {
                    var r = new EmployeeAbs(data, _seed);
                    entity.HierarchyRoot(r);
                    self.HierarchyRoots.removeAll();
                    self.HierarchyRoots.push(r);
                    self.HierarchyRootsLoaded(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.LoadEntityHierarchyRecurs = function (entity, uplev, lowlev) {
            if (entity.data == null) {
                return $.Deferred().resolve();
            }
            var _seed = entity;
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/EmployeeSet/LoadEntityHierarchyRecurs",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: entity.data, uplev: uplev, lowlev: lowlev })
            }).pipe(
                function (data) {
                    var r = new EmployeeAbs(data, _seed);
                    entity.HierarchyRoot(r);
                    self.HierarchyRoots.removeAll();
                    self.HierarchyRoots.push(r);
                    self.HierarchyRootsLoaded(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

    }

    return {
        entityView: EmployeeView,
        entityEdit: Employee,
        entityNode: EmployeeAbs,
        entityPage: EmployeePage,
        entityPageBlock: EmployeePageBlock,
        settings: EmployeeSettings,
        entitySet: EmployeeSet
    }
})