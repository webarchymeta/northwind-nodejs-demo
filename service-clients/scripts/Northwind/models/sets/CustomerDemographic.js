/* ------------------------------------------------------------------------------
 *
 *     This code was generated by CGW X-Script Code Generator.
 *
 *     Archymeta Information Technologies Co., Ltd.
 *
 *     Changes to this file, especially those bit flags, may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * 
 ------------------------------------------------------------------------------ */

define(['knockout', 'config', 'queryModels' ], function (ko, config, q) {

    var CustomerDemographicView = function (data) {
        var self = this;
        self.IsViewModel = true;
        self.data = data;
        self.DistinctString = data !== null ? data.DistinctString : "";
        self.LookupQuery = data !== null ? "?CustomerTypeID=" + self.data.CustomerTypeID : "";

        self.CreateSet = function () {
            return new CustomerDemographicSet();
        };

        self.CustomerTypeID = data.CustomerTypeID;
        self.CustomerDesc = data.CustomerDesc;
        self.IsCustomerDescLoaded = ko.observable(data.IsCustomerDescLoaded);

        self.LoadEntityCustomerDesc = function () {
            if (self.IsCustomerDescLoaded()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/LoadEntityCustomerDesc",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _CustomerTypeID: self.data.CustomerTypeID })
            }).pipe(
                function (data) {
                    if (data !== null) {
                        self.CustomerDesc(data);
                    }
                    self.IsCustomerDescLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.CustomerTypeID == data.CustomerTypeID;
        };

        self.CustomerDescQuery = 'load-delayed-CustomerDesc?CustomerTypeID=' + self.data.CustomerTypeID + '&contentType=text/plain';

        self.IsAllCustomerCustomerDemosMaterialized = ko.observable(false);
        if (data.CustomerCustomerDemos == null) {
            self.CustomerCustomerDemos = ko.observable(null);
            self.IsCustomerCustomerDemosMaterialized = ko.observable(false);
        } else {
            self.IsCustomerCustomerDemosMaterialized = ko.observable(false);
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/CustomerCustomerDemo', function (m) {
                self.CustomerCustomerDemos = ko.observable(new m.entitySet(data.CustomerCustomerDemos));
                self.IsCustomerCustomerDemosMaterialized(true);
            });
        }
        self.ChangedCustomerCustomerDemos = ko.observableArray();

        if (data !== null && data.ChangedCustomerCustomerDemos !== null) {
            pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/CustomerCustomerDemo', function (m) {
                for (var i = 0; i < data.ChangedCustomerCustomerDemos.length; i++) {
                    self.ChangedCustomerCustomerDemos.push(new m.entityView(data.ChangedCustomerCustomerDemos[i]));
                }
                self.IsAllCustomerCustomerDemosMaterialized(true);
            });
        }

        self.MaterializeCustomerCustomerDemos = function () {
            if (self.IsCustomerCustomerDemosMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/MaterializeCustomerCustomerDemos",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.CustomerCustomerDemos = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/CustomerCustomerDemo', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.CustomerCustomerDemos(s);
                            self.IsCustomerCustomerDemosMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.MaterializeAllCustomerCustomerDemos = function () {
            if (self.IsAllCustomerCustomerDemosMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/MaterializeAllCustomerCustomerDemos",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (list) {
                    if (list !== null) {
                        self.data.ChangedCustomerCustomerDemos = list;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/CustomerCustomerDemo', function (m) {
                            for (var i = 0; i < list.length; i++) {
                                self.ChangedCustomerCustomerDemos.push(new m.entityView(list[i]));
                            }
                            self.IsAllCustomerCustomerDemosMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.shallowDataCopy = function() {
            return {
                CustomerTypeID: self.data.CustomerTypeID,
                CustomerDesc: self.data.CustomerDesc
            };
        };

        self.IsEntitySelected = ko.observable(false);
    };

    var CustomerDemographic = function (data) {
        var self = this;
        self.IsViewModel = false;
        self.TobeLoadMsg = ko.observable('to be loaded ...');
        self.Initializing = true;
        self.data = data;
        self.IsPersisted = ko.observable(data !== null);
        self.IsNewAddition = ko.observable(false);
        self.UpdateIndex = -1;
        self.DistinctString = ko.observable(data !== null ? data.DistinctString : "");
        self.LookupQuery = data !== null ? "entityedit?CustomerTypeID=" + self.data.CustomerTypeID : "";

        self.CreateSet = function () {
            return new CustomerDemographicSet();
        };

        self.CustomerTypeID = data.CustomerTypeID;
        self.CustomerDesc = ko.observable(data !== null ? data.CustomerDesc : null);
        self.IsCustomerDescModified = ko.observable(data !== null ? data.IsCustomerDescModified : true);
        self.CustomerDesc.subscribe(function (val) {
             if (!self.Initializing) {
                 if (self.data == null) {
                     self.IsCustomerDescModified(true);
                 } else if (self.IsCustomerDescLoaded()) {
                     self.IsCustomerDescModified(self.data.CustomerDesc !== val);
                 }
             }
         });
        self.CustomerDescCss = ko.pureComputed(function () {
            if (self.IsCustomerDescModified()) {
                return "modified";
            } else {
                return "original";
            }
        });
        self.IsCustomerDescLoaded = ko.observable(data !== null ? data.IsCustomerDescLoaded : true);
        self.LoadEntityCustomerDesc = function () {
            if (self.IsCustomerDescLoaded()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/LoadEntityCustomerDesc",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _CustomerTypeID: self.data.CustomerTypeID })
            }).pipe(
                function (data) {
                    if (data !== null) {
                        self.Initializing = true;
                        self.CustomerDesc(data);
                        self.Initializing = false;
                    }
                    self.IsCustomerDescLoaded(true);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.UpdateEntityCustomerDesc = function () {
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/UpdateEntityCustomerDesc",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ _CustomerTypeID: self.data.CustomerTypeID, data: self.CustomerDesc() })
            }).pipe(
                function (content) {
                    self.data.CustomerDesc = self.CustomerDesc();
                    self.IsCustomerDescModified(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.CustomerDescQuery = 'load-delayed-CustomerDesc?CustomerTypeID=' + self.data.CustomerTypeID + '&contentType=text/plain';

        self.IsEntityChanged = ko.observable(false);

        self.IfEntityChanged = ko.pureComputed(function () {
            return self.IsCustomerDescModified();
        });

        self.IsEntityModified = function () {
            return self.IsCustomerDescModified();
        }

        self.IsEntityComplete = function () {
            return true;
        };

        self.IsEntityIdentical = function (data) {
            if (typeof data == 'undefined' || data == null || typeof data.IsViewModel == 'undefined' || self.IsViewModel !== data.IsViewModel ) {
                return false;
            }
            return self.CustomerTypeID() == data.CustomerTypeID();
        };

        self.GetUpdatedData = function () {
            if (self.data == null) {
                return self.GetNewData();
            }
            var d = self.NewDataCopy();
            if (self.IsCustomerDescModified()) {
                if (self.IsCustomerDescModified()) {
                    d.CustomerDesc = self.CustomerDesc();
                    d.IsCustomerDescModified = true;
                    d.IsCustomerDescLoaded = self.IsCustomerDescLoaded();;
                }
                d.IsEntityChanged = true;
                return d;
            } else {
                return null;
            }
        };

        self.GetNewData = function () {
            var d = {
                "CustomerTypeID": self.CustomerTypeID,
                "CustomerDesc": self.CustomerDesc(),
                "IsCustomerDescModified": true,
                "IsEntityChanged": true,
                "IsPersisted": false
            };
            return d;
        };

        self.NewDataCopy = function () {
            var d = {
                "CustomerTypeID": self.data.CustomerTypeID,
                "CustomerDesc": self.data.CustomerDesc,
                "IsCustomerDescModified": self.IsCustomerDescModified(),
                "IsEntityChanged": self.data.IsEntityChanged,
                "IsPersisted": self.data.IsPersisted
            };
            return d;
        };

        self.UpdateData = function (dsrc) {
            if (self.data == null ) {
                return;
            }
            self.data.CustomerDesc = dsrc.CustomerDesc;
            self.CustomerDesc(dsrc.CustomerDesc);
            self.IsCustomerDescModified(false);
        };

        self.ResetData = function () {
            if (self.data == null ) {
                return;
            }
            if (self.IsCustomerDescModified()) {
                self.CustomerDesc(self.data.CustomerDesc);
            }
        };

        self.shallowDataCopy = function() {
            return {
                CustomerTypeID: self.data.CustomerTypeID,
                CustomerDesc: self.data.CustomerDesc
            };
        }

        self.IsCustomerCustomerDemosMaterialized = ko.observable(data == null);

        self.CustomerCustomerDemos = ko.observable(data !== null ? data.CustomerCustomerDemos : null);

        self.MaterializeCustomerCustomerDemos = function () {
            if (self.IsCustomerCustomerDemosMaterialized()) {
                return $.Deferred().resolve();
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/MaterializeCustomerCustomerDemos",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ entity: self.shallowDataCopy() })
            }).pipe(
                function (dset) {
                    if (dset !== null) {
                        self.data.CustomerCustomerDemos = dset;
                        pageMgr.loadModelModule('service-clients/scripts/Northwind/models/sets/CustomerCustomerDemo', function (m) {
                            var s = new m.entitySet();
                            s.set = dset;
                            s.TotalEntities(dset.EntityCount);
                            s.CurrentSorters(new q.TokenOptions());
                            for (var i = 0; i < dset.Sorters.length; i++)
                                s.CurrentSorters().Options.push(dset.Sorters[i]);
                            s.CurrentSorters().CanBeClosed = true;
                            s.CurrentSorters().isLocal = false;
                            self.CustomerCustomerDemos(s);
                            self.IsCustomerCustomerDemosMaterialized(true);
                        });
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.IsEntitySelected = ko.observable(false);
        self.Initializing = false;
    };

    var CustomerDemographicPage = function (s, edit) {
        var self = this;
        var editPage = edit;
        self.set = s;
        self.Index_ = ko.observable();
        self.PageNumber = ko.pureComputed(function () {
            return self.Index_() + 1;
        });
        self.FirstItem = ko.observable({});
        self.LastItem = ko.observable({});
        self.CurrentItem = ko.observable(null);
        self.IsLastPage = ko.observable(false);
        self.IsDataLoaded = ko.observable(false);
        self.IsPageSelected = ko.observable(false);
        self.Items =  ko.observableArray([]);
        self.GetPageItems = function (s, pageLoader) {
            if (self.IsDataLoaded()) 
                return $.Deferred().resolve();
            var qexpr = s.getQueryExpr();
            var lastItem = null;
            var ipage = self.Index_();
            if (self.Index_() > 0) {
                var blk = s.PageBlocks()[s.CurrBlockIndex()];
                if (blk.Pages()[0].Index_() !== ipage) {
                    for (var i = 0; i < blk.Pages().length; i++) {
                        if (blk.Pages()[i].Index_() == ipage - 1) {
                            lastItem = blk.Pages()[i].LastItem();
                            break;
                        }
                    }
                } else {
                    var prvb = s.PageBlocks()[s.CurrBlockIndex() - 1];
                    lastItem = prvb.Pages()[prvb.Pages().length - 1].LastItem();
                }
            }
            self.Items.removeAll();
            if (typeof pageLoader !== 'function') {
                return $.ajax({
                    url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/GetPageItems",
                    type: "POST",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ set: s.set, qexpr: qexpr, prevlast: lastItem })
                }).pipe(
                    function (items) {
                        for (var i = 0; i < items.length; i++) {
                            if (editPage)
                                self.Items.push(new CustomerDemographic(items[i]));
                            else
                                self.Items.push(new CustomerDemographicView(items[i]));
                        }
                        self.IsDataLoaded(true);
                        return $.Deferred().resolve();
                    },
                    function (jqxhr, textStatus, error) {
                        return $.Deferred().reject(jqxhr, textStatus, error);
                    }
                );
            } else {
                return pageLoader(self, { set: s.set, qexpr: qexpr, prevlast: lastItem });
            }
        };
    };

    var CustomerDemographicPageBlock = function (s, idx0, data, edit) {
        var self = this;
        var set = s;
        self.BlockIndex = ko.observable(0);
        self.BlockNumber = ko.pureComputed(function () { return self.BlockIndex() + 1; });
        self.IsBlockSelected = ko.pureComputed(function() {
            return set.CurrBlockIndex() == self.BlockIndex();
        });
        self.IsLastBlock = ko.observable(data.IsLastBlock);
        self.BlockCount = data.BlockCount;
        self.Pages = ko.observableArray([]);
        if (data.Pages) {
            for (var i = 0; i < data.Pages.length; i++ ) {
                var pdata = data.Pages[i];
                var page = new CustomerDemographicPage(s, edit);
                page.Index_(idx0 + pdata.Index_);
                page.FirstItem(pdata.FirstItem);
                page.LastItem(pdata.LastItem);
                page.IsLastPage(pdata.IsLastPage);
                self.Pages.push(page);
            }
        }
        self.LastPage = function () {
            return self.Pages().length == 0 ? null : self.Pages()[self.Pages().length - 1];
        };
    }

    var CustomerDemographicSettings = function (settings) {
        var self = this;
        self.data = settings || {};
        self.data.show_CustomerTypeID = self.data.show_CustomerTypeID || true;
        self.show_CustomerTypeID = ko.observable(self.data.show_CustomerTypeID);
        self.show_CustomerTypeID.subscribe(function (v) {
            self.data.show_CustomerTypeID = v;
        });
        self.data.collapse_CustomerTypeID = self.data.collapse_CustomerTypeID || false;
        self.collapse_CustomerTypeID = ko.observable(self.data.collapse_CustomerTypeID);
        self.collapse_CustomerTypeID.subscribe(function (v) {
            self.data.collapse_CustomerTypeID = v;
        });
        self.data.width_CustomerTypeID = self.data.width_CustomerTypeID || 'auto';
        self.width_CustomerTypeID = ko.observable(self.data.width_CustomerTypeID);
        self.width_CustomerTypeID.subscribe(function (v) {
            self.data.width_CustomerTypeID = v;
        });
        self.data.show_CustomerDesc = self.data.show_CustomerDesc || true;
        self.show_CustomerDesc = ko.observable(self.data.show_CustomerDesc);
        self.show_CustomerDesc.subscribe(function (v) {
            self.data.show_CustomerDesc = v;
        });
        self.data.collapse_CustomerDesc = self.data.collapse_CustomerDesc || true;
        self.collapse_CustomerDesc = ko.observable(self.data.collapse_CustomerDesc);
        self.collapse_CustomerDesc.subscribe(function (v) {
            self.data.collapse_CustomerDesc = v;
        });
        self.data.width_CustomerDesc = self.data.width_CustomerDesc || '';
        self.width_CustomerDesc = ko.observable(self.data.width_CustomerDesc);
        self.width_CustomerDesc.subscribe(function (v) {
            self.data.width_CustomerDesc = v;
        });
    };

    var CustomerDemographicSet = function () {
        var self = this;
        self.set = {};

        var jsonstr = localStorage.getItem('Northwind');
        if (typeof jsonstr == 'undefined' || jsonstr == null) {
            self.settings = new CustomerDemographicSettings();
            var settings = { };
            settings.UIView = { };
            settings.UIView.CustomerDemographicSet = self.settings.data;
            localStorage.setItem('Northwind', JSON.stringify(settings));
        } else {
            var settings = JSON.parse(jsonstr);
            self.settings = new CustomerDemographicSettings(settings.UIView.CustomerDemographicSet);
        }

        self.PageSize_ = ko.observable(config.defaultPageSize);
        self.PageWindowSize = ko.observable(config.defaultPageBlockSize);
        self.PageBlockSize = ko.observable(config.defaultPageBlockSize);
        self.SetKindName = "Table";
        self.EntityName = "CustomerDemographic";
        self.TotalEntities = ko.observable(0);
        self.EntityCount = ko.observable(0);
        self.PageCount = ko.observable(0);
        self.PagesWindow = ko.observableArray([]);
        self.CurrentPage = ko.observable({});
        self.IsQueryStateChanged = ko.observable(false);
        self.BaseUrl = "";
        self.CurrentSorters = ko.observable(null);
        self.CurrentFilters = ko.observable(null);
        self.SortersStack = [];
        self.FiltersStack = [];
        self.SorterPath = ko.observableArray();
        self.FilterPath = ko.observableArray();
        self.PageBlocks = ko.observableArray([]);
        self.CurrBlockIndex = ko.observable(0);
        self.CurrentBlock = ko.pureComputed(function () {
            if (self.CurrBlockIndex() < 0 || self.CurrBlockIndex() >= self.PageBlocks().length - 1)
                return null;
            else
                return self.PageBlocks()[self.CurrBlockIndex()];
        });
        self.PrevBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx > 0) {
                return self.PageBlocks()[idx - 1];
            } else {
                return null;
            }
        });
        self.NextLoadedBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return self.PageBlocks()[idx + 1];
            } else {
                return null;
            }
        });
        self.MoreNextBlock = ko.pureComputed(function () {
            var idx = self.CurrBlockIndex();
            if (idx >= 0 && idx < self.PageBlocks().length - 1) {
                return true;
            } else {
                return self.PageBlocks().length > 0 && !self.PageBlocks()[self.PageBlocks().length - 1].IsLastBlock();
            }
        });
        self.LastPageBlock = ko.pureComputed(function () {
            return self.PageBlocks().length == 0 ? null : self.PageBlocks()[self.PageBlocks().length - 1];
        });

        self.ResetPageState = function () {
            self.CurrBlockIndex(0);
            self.PageBlocks.removeAll();
            self.IsQueryStateChanged(false)
        };

        self.IsFilteredView = ko.observable(false);

        self.HasFilteredView = ko.pureComputed(function () {
            return self.CurrentFilters() !== null && self.FilterClosed();
        });

        self.FilteredViewUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'CustomerDemographicSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'CustomerDemographicSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilteredEditUrl = ko.pureComputed(function () {
            if (self.CurrentFilters() == null || !self.FilterClosed()) {
                return null;
            }
            var s0 = '';
            var bsf = self.set !== null && typeof self.set.SetFilter !== 'undefined' && self.set.SetFilter !== null && self.set.SetFilter !== '';
            if (bsf)
                s0 = '( ' + self.set.SetFilter + ' )';
            var s = '';
            for (var i = 0; i < self.FilterPath().length; i++ ) {
                s += (s == '' ? '' : ' ') + self.FilterPath()[i].TkName;
            }
            if (s == '') {
                return null;
            } else {
                if (s0 == '') {
                    return 'CustomerDemographicSet?filter=' + encodeURIComponent(s);
                } else {
                    return 'CustomerDemographicSet?filter=' + encodeURIComponent(s0 + ' && ( ' + s + ' )');
                }
            }
        });

        self.FilterClosed = ko.observable(false);

        self.preSetQExpr = undefined;

        self.RefreshSetState = function(qc) {
            self.IsQueryStateChanged(true);
            self.ResetPageState();
            self.PagesWindow.removeAll();
            if (typeof self.CurrentPage().Items !== 'undefined')
                self.CurrentPage().Items.removeAll();
        };

        self.GetSetInfo = function (tkfilter, _filter) {
            self.BaseUrl = config.baseUrl;
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/GetSetInfo",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ filter: _filter == null ? null : decodeURIComponent(_filter) })
            }).pipe(
                function (content) {
                    self.set = content;
                    self.IsFilteredView(typeof _filter !== 'undefined' && _filter !== null && _filter !== '');
                    self.TotalEntities(self.set.EntityCount);
                    self.CurrentSorters(new q.TokenOptions());
                    for (var i = 0; i < self.set.Sorters.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(self.set.Sorters[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    self.CurrentSorters().CanBeClosed = true;
                    self.CurrentSorters().isLocal = false;
                    return $.Deferred().resolve(self);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.getQueryExpr = function () {
            if (self.preSetQExpr)
                return self.preSetQExpr;
            var sorters = [];
            var filters = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                sorters.push(self.SorterPath()[i]);
            for (var i = 0; i < self.FilterPath().length; i++)
                filters.push(self.FilterPath()[i]);
            return new q.QueryExpression(sorters, filters);
        };

        self.GetNextSorterOps = function (tkfilter) {
            var qtokens = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                qtokens.push(self.SorterPath()[i]);
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/GetNextSorterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ sorters: qtokens  })
            }).pipe(
                function (content) {
                    self.SortersStack.push(self.CurrentSorters());
                    self.CurrentSorters(new q.TokenOptions());
                    self.CurrentSorters().Hint = content.Hint;
                    self.CurrentSorters().CurrentExpr(content.CurrentExpr);
                    self.CurrentSorters().QuoteVal = content.QuoteVal;
                    self.CurrentSorters().CanBeClosed = content.CanBeClosed;
                    self.CurrentSorters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, false)) {
                            self.CurrentSorters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.GetNextFilterOps = function (tkfilter) {
            var sorters = [];
            var filters = [];
            for (var i = 0; i < self.SorterPath().length; i++)
                sorters.push(self.SorterPath()[i]);
            for (var i = 0; i < self.FilterPath().length; i++)
                filters.push(self.FilterPath()[i]);
            var qexpr = new q.QueryExpression(sorters, filters);
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/GetNextFilterOps",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ qexpr: qexpr, tkstr: ""  })
            }).pipe(
                function (content) {
                    if (self.CurrentFilters() !== null)
                        self.FiltersStack.push(self.CurrentFilters());
                    self.FilterClosed(content.CanBeClosed);
                    self.CurrentFilters(new q.TokenOptions());
                    self.CurrentFilters().Hint = content.Hint;
                        self.CurrentFilters().CurrentExpr(content.CurrentExpr);
                    self.CurrentFilters().QuoteVal = content.QuoteVal;
                    self.CurrentFilters().CanBeClosed = content.CanBeClosed;
                    self.CurrentFilters().IsLocal = false;
                    for (var i = 0; i < content.Options.length; i++) {
                        var tk = new q.QToken();
                        tk.CopyToken(content.Options[i]);
                        if (tkfilter(tk, true)) {
                            self.CurrentFilters().Options.push(tk);
                        }
                    }
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.NextPageBlock = function (qexpr, last, edit) {
            if (self.IsQueryStateChanged())
                self.ResetPageState();
            if (self.CurrBlockIndex() < self.PageBlocks().length) {
                return $.Deferred().resolve();
            }
            self.set.PageBlockSize = self.PageBlockSize();
            self.set.PageSize_ = self.PageSize_();
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/NextPageBlock",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, qexpr: qexpr, prevlast: last  })
            }).pipe(
                function (data) {
                    if (last == null) 
                        self.EntityCount(data.TotalEntities);
                    self.PageCount(data.TotalPages);
                    if (data.Pages.length == 0) {
                        var lpb = self.LastPageBlock();
                        if (lpb !== null) {
                            lpb.IsLastBlock(true);
                            var lp = lpb.LastPage();
                            if (lp !== null) {
                                lp.IsLastPage(true);
                                self.CurrBlockIndex(self.CurrBlockIndex() - 1);
                            }
                        } else {
                            self.PagesWindow.removeAll();
                        }
                    }
                    else {
                        var idx0 = 0;
                        for (var i = 0; i < self.CurrBlockIndex(); i++ ) {
                            idx0 += self.PageBlocks()[i].BlockCount;
                        }
                        var pb = new CustomerDemographicPageBlock(self, idx0, data, edit);
                        pb.BlockIndex(self.PageBlocks().length);
                        self.PageBlocks.push(pb);
                        self.PagesWindow.removeAll();
                        for (var i = 0; i < pb.Pages().length; i++) {
                            self.PagesWindow.push(pb.Pages()[i]);
                        }
                    }
                    self.IsQueryStateChanged(false);
                    return $.Deferred().resolve();
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.AddOrUpdateEntities = function (changed) {
            if (changed == null || changed.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/AddOrUpdateEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: changed })
            }).pipe(
                function (data) {
                    //...
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.DeleteEntities = function (deleted) {
            if (deleted == null || deleted.length == 0) {
                return $.Deferred().resolve(null);
            }
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/DeleteEntities",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ set: self.set, entities: deleted })
            }).pipe(
                function (data) {
                    //..
                    return $.Deferred().resolve(data);
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

        self.LoadEntityByKey = function(CustomerTypeID, isView) {
            return $.ajax({
                url: config.baseUrl + "/services/Northwind/CustomerDemographicSet/LoadEntityByKey",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ CustomerTypeID: CustomerTypeID })
            }).pipe(
                function (data) {
                    if (isView)
                        return $.Deferred().resolve(new CustomerDemographicView(data));
                    else
                        return $.Deferred().resolve(new CustomerDemographic(data));
                },
                function (jqxhr, textStatus, error) {
                    return $.Deferred().reject(jqxhr, textStatus, error);
                }
            );
        };

    }

    return {
        entityView: CustomerDemographicView,
        entityEdit: CustomerDemographic,
        entityPage: CustomerDemographicPage,
        entityPageBlock: CustomerDemographicPageBlock,
        settings: CustomerDemographicSettings,
        entitySet: CustomerDemographicSet
    }
})