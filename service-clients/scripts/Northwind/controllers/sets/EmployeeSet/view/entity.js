/* ------------------------------------------------------------------------------
 *
 *     This code was generated by CGW X-Script Code Generator.
 *
 *     Archymeta Information Technologies Co., Ltd.
 *
 *     Changes to this file, especially those bit flags, may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * 
 ------------------------------------------------------------------------------ */

define(['knockout', 'config', 'model'], function (ko, config, model) {

    var c = function (dt) {

        var self = this;
        self.set =  typeof dt !== 'undefined' && typeof dt.CreateSet !== 'undefined' ? dt.CreateSet() : null;
        self.MaterializeUpperRef = function (data, event) {
            data.MaterializeUpperRef().done(function () {

            }).fail(function(jqxhr, textStatus, error) {
                if (typeof config.alert === 'function') {
                    config.alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                } else {
                    alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                }
            });
        };

        self.MaterializeEmployees = function(data, event) {
            data.MaterializeEmployees().done(function () {

            }).fail(function(jqxhr, textStatus, error) {
                if (typeof config.alert === 'function') {
                    config.alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                } else {
                    alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                }
            });
        };

        self.MaterializeEmployeeTerritorys = function(data, event) {
            data.MaterializeEmployeeTerritorys().done(function () {

            }).fail(function(jqxhr, textStatus, error) {
                if (typeof config.alert === 'function') {
                    config.alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                } else {
                    alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                }
            });
        };

        self.MaterializeOrders = function(data, event) {
            data.MaterializeOrders().done(function () {

            }).fail(function(jqxhr, textStatus, error) {
                if (typeof config.alert === 'function') {
                    config.alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                } else {
                    alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                }
            });
        };

        self.LoadNotes = function (data, event) {
            data.LoadEntityNotes().done(function () {

            }).fail(function(jqxhr, textStatus, error) {
                if (typeof config.alert === 'function') {
                    config.alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                } else {
                    alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                }
            });
        };

        self.LoadPhoto = function (data, event) {
            data.LoadEntityPhoto().done(function () {

            }).fail(function(jqxhr, textStatus, error) {
                if (typeof config.alert === 'function') {
                    config.alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                } else {
                    alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                }
            });
        };

        self.LoadEntityRoots = function (data, event) {
            self.set.LoadEntitySetRoots(data).done(function () {

            }).fail(function(jqxhr, textStatus, error) {
                if (typeof config.alert === 'function') {
                    config.alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                } else {
                    alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                }
            });
        };


        self.LoadEntityHierarchy = function (data, event) {
            self.set.LoadEntityFullHierarchyRecurs(data).done(function () {

            }).fail(function(jqxhr, textStatus, error) {
                if (typeof config.alert === 'function') {
                    config.alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                } else {
                    alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                }
            });
        };

        self.LoadChildNodes = function (data, event) {
            self.set.LoadEntityChildren(data).done(function () {
                data.IsNodeExpanded(true);
            }).fail(function(jqxhr, textStatus, error) {
                if (typeof config.alert === 'function') {
                    config.alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                } else {
                    alert(jqxhr.statusText + '\r\n\r\n' + jqxhr.responseText);
                }
            });
        }

        self.initialize = function (EmployeeID) {
            pageMgr.loadedModelTable['service-clients/scripts/Northwind/models/sets/Employee'] = model;
            if (!self.set) {
                self.set = new model.entitySet();
            }
            return self.set.LoadEntityByKey(EmployeeID, true);
        };
    }
    return c;
})