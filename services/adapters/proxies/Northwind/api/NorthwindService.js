/* ------------------------------------------------------------------------------
 *
 *     This code was generated by CGW X-Script Code Generator.
 *
 *     Archymeta Information Technologies Co., Ltd.
 *
 *     Changes to this file, especially those bit flags, may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * 
 ------------------------------------------------------------------------------ */

var root = process.cwd(), path = require('path'),
    apppath = typeof global.appPath === 'undefined' || global.appPath === '' ? '' : 'config/' + global.appPath + '/',
    req = require(path.join(root, 'node_modules/request')),
    Q = require(path.join(root, 'node_modules/q')),
    config = require(path.join(root, apppath + 'config')),
    appcontext = require(path.join(root, apppath + 'app-context')),
    updateEvents = appcontext.updateEventSource || new (require('../event-stream'))(config.NorthwindServiceBaseUrl + config.updateEventsEndpointUrl);

var api = function (serviceBaseUrl) {
    var self = this;
    var cntx = global.NorthwindClientContext;
    if (typeof serviceBaseUrl === 'undefined' || serviceBaseUrl === null || serviceBaseUrl === '') {
        self.baseUrl = config.NorthwindServiceBaseUrl + '/Services/DataService/Northwind/NorthwindDatabase.svc';
    } else {
        self.baseUrl = serviceBaseUrl + '/Services/DataService/Northwind/NorthwindDatabase.svc';
    }
    self.updateEventsUrl = self.baseUrl + config.updateEventsEndpointUrl;


    /**
     * <summary>
     *   Sign in the service for relational database "Northwind" and authenticate the identity of the caller. 
     * Depending on the end points, the authentication may have been delegated to the host. E.g., the end point serving javascript
     * requests are delegated to Asp.Net website authentication system. For other end points, the caller must provide correct credentials
     * in order to have permission to continue the call processing.
     * </summary>
     * <remarks>
     *   Note: The current version of the system does not check for credentials. It also does not validate the returned caller context object. 
     * Therefore care must be taken to limit the access to the service to trusted nodes or users within a secured network environment.
     * </remarks>
     * <param name="cntx">Caller supplied and initialized caller context. If it is null, the service will create an initial one.</param>
     * <param name="credentials">Caller credential information.</param>
     * <returns>
     *   An initialized caller context object used for subsequent API calls. Supplying an invalid caller context will
     * result in a deny of the service.
     * </returns>
     */

/* input parameter schema reference template
{
    "$schema": "http://localhost:11333/NorthwindService?db=Northwind&subdoc=SignInService"
}
*/
    self.SignInService = function (input) {
        var __promise = new Q.Promise(function (resolve, reject, notify) {
            var opts = {
                url: self.baseUrl + '/SignInService',
                method: 'POST',
                json: { cntx: typeof input.cntx === 'undefined' || !input.cntx ? cntx : input.cntx, credentials: input.credentials }
            };
            req(opts, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    var data; 
                    if (typeof config.inProcessDatabase.wcfBackendService === 'undefined' || config.inProcessDatabase.wcfBackendService) {
                        data = body.SignInServiceResult;
                    } else {
                        data = body;
                    }
                    resolve(data);
                } else {
                    if (response)
                        reject({ err: error, httpCode: response.statusCode, msg: body });
                    else
                        reject({ err: error, httpCode: -1 });
                }
            });
        });
        return __promise;
    };

    /**
     * <summary>
     * Register a subscription to notification of data source changes.
     * </summary>
     * <param name="cntx">Caller supplied and initialized caller context. If it is null, the service will create an initial one.</param>
     * <param name="ownerID">An identifier for a "user" that owns the subscription. An owner can change or un-subscribe an subscription.</param>
     * <param name="subscribeID">An identifier that the client use to keep track of its subscriptions.</param>
     * <param name="sets">A list of data sets and optional corresponding entity filters that the server uses to notify client of changes. If it is set to null, then change notifications 
     * about all data sets will be sent to the client.</param>
     */

/* input parameter schema reference template
{
    "$schema": "http://localhost:11333/NorthwindService?db=Northwind&subdoc=SubscribeToUpdates"
}
*/
    self.SubscribeToUpdates = function (input) {
        var opts = {
            cntx: typeof input.cntx === 'undefined' || !input.cntx ? cntx : input.cntx, 
            ownerID: input.ownerId, 
            subscriberID: input.subscriberId, 
            sets: input.sets
        };
        return updateEvents.subscribe(opts);
    };


    /**
     * <summary>
     * un-register a subscription to data source change notifications.
     * </summary>
     * <param name="cntx">Caller supplied and initialized caller context. If it is null, the service will create an initial one.</param>
     * <param name="ownerID">An identifier for a "user" that owns the subscription. An owner can change or un-subscribe an subscription.</param>
     * <param name="subscribeID">An identifier that the client use to keep track of its subscriptions.</param>
     */

/* input parameter schema reference template
{
    "$schema": "http://localhost:11333/NorthwindService?db=Northwind&subdoc=UnsubscribeToUpdates"
}
*/
    self.UnsubscribeToUpdates = function (input) {
        var opts = {
            cntx: typeof input.cntx === 'undefined' || !input.cntx ? cntx : input.cntx, 
            ownerID: input.ownerId, 
            subscriberID: input.subscriberId
        };
        return updateEvents.unsubscribe(opts);
    };


    /**
     * <summary>
     *   Initialize or refresh and check the validity of the caller context information of the caller. 
     * </summary>
     * <remarks>
     *   Note: The current version of the system does not validate the returned caller context object. 
     * Therefore care must be taken to limit the access to the service to trusted nodes or users within a secured network environment.
     * </remarks>
     * <param name="cntx">Authenticated caller context object. If cannot be null.</param>
     * <returns>
     *   An initialized and refreshed caller context object used for subsequent API calls. Supplying an invalid caller context will
     * result in a deny of the service.
     * </returns>
     */

/* input parameter schema reference template
{
    "$schema": "http://localhost:11333/NorthwindService?db=Northwind&subdoc=InitializeCallContext"
}
*/
    self.InitializeCallContext = function (input) {
        var __promise = new Q.Promise(function (resolve, reject, notify) {
            var opts = {
                url: self.baseUrl + '/InitializeCallContext',
                method: 'POST',
                json: { cntx: typeof input.cntx === 'undefined' || !input.cntx ? cntx : input.cntx }
            };
            req(opts, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    var data; 
                    if (typeof config.inProcessDatabase.wcfBackendService === 'undefined' || config.inProcessDatabase.wcfBackendService) {
                        data = body.InitializeCallContextResult;
                    } else {
                        data = body;
                    }
                    resolve(data);
                } else {
                    if (response)
                        reject({ err: error, httpCode: response.statusCode, msg: body });
                    else
                        reject({ err: error, httpCode: -1 });
                }
            });
        });
        return __promise;
    };


    /**
     * <summary>
     *   Retrieve information about the database. 
     * </summary>
     * <param name="cntx">Authenticated caller context object. If cannot be null.</param>
     * <returns>
     *   Brief information about current database.
     * </returns>
     */

/* input parameter schema reference template
{
    "$schema": "http://localhost:11333/NorthwindService?db=Northwind&subdoc=GetDatabaseInfo"
}
*/
    self.GetDatabaseInfo = function (input) {
        var __promise = new Q.Promise(function (resolve, reject, notify) {
            var opts = {
                url: self.baseUrl + '/GetDatabaseInfo',
                method: 'POST',
                json: { cntx: typeof input.cntx === 'undefined' || !input.cntx ? cntx : input.cntx }
            };
            req(opts, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    var data; 
                    if (typeof config.inProcessDatabase.wcfBackendService === 'undefined' || config.inProcessDatabase.wcfBackendService) {
                        data = body.GetDatabaseInfoResult;
                    } else {
                        data = body;
                    }
                    resolve(data);
                } else {
                    if (response)
                        reject({ err: error, httpCode: response.statusCode, msg: body });
                    else
                        reject({ err: error, httpCode: -1 });
                }
            });
        });
        return __promise;
    };


    /**
     * <summary>
     *   If the targeting database does not exist or is an empty one, create the database and/or the tables and other constructs. 
     * </summary>
     * <remarks>
     *   Depending on the type of the relational data source attached, this method may not be relevent. 
     * For real relational database stores, it is safer to create an empty database named "Northwind" inside the targeting database server and
     * then call this method to create the tables and other constructs.
     * </remarks>
     * <param name="cntx">Authenticated caller context object. If cannot be null.</param>
     * <returns>
     *   Whether or not the call is successful.
     * </returns>
     */

/* input parameter schema reference template
{
    "$schema": "http://localhost:11333/NorthwindService?db=Northwind&subdoc=CreateDatabase"
}
*/
    self.CreateDatabase = function (input) {
        var __promise = new Q.Promise(function (resolve, reject, notify) {
            var opts = {
                url: self.baseUrl + '/CreateDatabase',
                method: 'POST',
                json: { cntx: typeof input.cntx === 'undefined' || !input.cntx ? cntx : input.cntx }
            };
            req(opts, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    var data; 
                    if (typeof config.inProcessDatabase.wcfBackendService === 'undefined' || config.inProcessDatabase.wcfBackendService) {
                        data = body.CreateDatabaseResult;
                    } else {
                        data = body;
                    }
                    resolve(data);
                } else {
                    if (response)
                        reject({ err: error, httpCode: response.statusCode, msg: body });
                    else
                        reject({ err: error, httpCode: -1 });
                }
            });
        });
        return __promise;
    };


    /**
     * <summary>
     *   Load persisted database information from local storage. 
     * </summary>
     * <remarks>
     *   Depending on the type of the relational data source attached, this method may not be relevant. 
     * For self loading relational data stores, calling this method will not have any effect.
     * </remarks>
     * <param name="cntx">Authenticated caller context object. If cannot be null.</param>
     * <param name="basePath">The path from where the database will be loaded. The default path is the "App_Data" directory
     * under the <see cref="System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath" />, if it is available to the hosting environment.</param>
     * <returns>
     *   Whether or not the call is successful.
     * </returns>
     */

/* input parameter schema reference template
{
    "$schema": "http://localhost:11333/NorthwindService?db=Northwind&subdoc=LoadDatabase"
}
*/
    self.LoadDatabase = function (input) {
        var __promise = new Q.Promise(function (resolve, reject, notify) {
            var opts = {
                url: self.baseUrl + '/LoadDatabase',
                method: 'POST',
                json: { cntx: typeof input.cntx === 'undefined' || !input.cntx ? cntx : input.cntx }
            };
            req(opts, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    var data; 
                    if (typeof config.inProcessDatabase.wcfBackendService === 'undefined' || config.inProcessDatabase.wcfBackendService) {
                        data = body.LoadDatabaseResult;
                    } else {
                        data = body;
                    }
                    resolve(data);
                } else {
                    if (response)
                        reject({ err: error, httpCode: response.statusCode, msg: body });
                    else
                        reject({ err: error, httpCode: -1 });
                }
            });
        });
        return __promise;
    };


    /**
     * <summary>
     *   Save database information to local storage. 
     * </summary>
     * <remarks>
     *   Depending on the type of the relational data source attached, this method may not be relevant. 
     * For self loading relational data stores, calling this method will not have any effect.
     * </remarks>
     * <param name="cntx">Authenticated caller context object. If cannot be null.</param>
     * <param name="basePath">The path from where the database will be saved.The default path is the "App_Data" directory
     * under the <see cref="System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath" />, if it is available to the hosting environment.</param>
     * <returns>
     *   Whether or not the call is successful.
     * </returns>
     */

/* input parameter schema reference template
{
    "$schema": "http://localhost:11333/NorthwindService?db=Northwind&subdoc=SaveDatabase"
}
*/
    self.SaveDatabase = function (input) {
        var __promise = new Q.Promise(function (resolve, reject, notify) {
            var opts = {
                url: self.baseUrl + '/SaveDatabase',
                method: 'POST',
                json: { cntx: typeof input.cntx === 'undefined' || !input.cntx ? cntx : input.cntx }
            };
            req(opts, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    var data; 
                    if (typeof config.inProcessDatabase.wcfBackendService === 'undefined' || config.inProcessDatabase.wcfBackendService) {
                        data = body.SaveDatabaseResult;
                    } else {
                        data = body;
                    }
                    resolve(data);
                } else {
                    if (response)
                        reject({ err: error, httpCode: response.statusCode, msg: body });
                    else
                        reject({ err: error, httpCode: -1 });
                }
            });
        });
        return __promise;
    };

};

//api.prototype.__proto__ = events.EventEmitter.prototype;

module.exports = api;
