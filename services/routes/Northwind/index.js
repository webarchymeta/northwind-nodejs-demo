/* ------------------------------------------------------------------------------
 *
 *     This code was generated by CGW X-Script Code Generator.
 *
 *     Archymeta Information Technologies Co., Ltd.
 *
 *     Changes to this file, especially those bit flags, may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * 
 ------------------------------------------------------------------------------ */

var root = process.cwd(), path = require('path'),
    exprs = require(path.join(root, 'node_modules/express')),
    router = exprs.Router();
var dbcontext, dbsets = {};

router.use('/__templates', function (req, res, next) {
    if (req.url === '/widgets/QueryComposer.html') {
        res.render(router.vpath + '/widget_templates/QueryComposer.html');
    } else {
        next();
    }
});

router.use('/:type', function (req, res, next) {
    if (typeof router.filter === 'undefined' || !router.filter.allowed) {
        res.writeHead(403);
        res.end();
        return;
    }
    if (router.filter.authenticate && (typeof req.isAuthenticated !== 'function' || !req.isAuthenticated())) {
        res.writeHead(401);
        res.end();
        return;
    }
    switch(req.params.type) {
        case 'NorthwindDatabase.svc':
        case 'DbContext': {
                if (typeof router.filter !== 'undefined' && router.filter !== null && typeof router.filter.DbContext !== 'undefined' && router.filter.DbContext !== null && router.filter.DbContext.allowed) {
                    var r = exprs.Router();
                    if (!dbcontext) {
                        dbcontext = require(path.join(__dirname, '../../controllers/Northwind/default/DbContext'));
                    }
                    var mthdr = dbcontext.router;
                    mthdr.vpath = router.vpath + '/DbContext';
                    r.use('/', mthdr);
                    if (typeof router.filter !== 'undefined' && router.filter !== null && typeof router.filter.DbContext === 'object') {
                        mthdr.filter = router.filter.DbContext;
                        mthdr.filter.parent = router.filter;
                    }
                    r.handle(req, res, next);
                } else {
                    res.writeHead(403);
                    res.end();
                }
            }
            break;
        default: {
                var types = [ 'Category', 'CustomerCustomerDemo', 'CustomerDemographic', 'Customer', 'Employee', 'EmployeeTerritory', 'Order_Detail', 'Order', 'Product', 'Region', 'Shipper', 'Supplier', 'Territory' ];
                var handled = false;
                if (/\.svc$/.test(req.params.type)) {
                    req.params.type = req.params.type.substring(0, req.params.type.lastIndexOf('.'));
                }
                for (var i = 0; i < types.length; i++) {
                    if (types[i] + 'Set' === req.params.type) {
                        if (typeof router.filter !== 'undefined' && router.filter !== null && typeof router.filter[req.params.type] !== 'undefined' && router.filter[req.params.type] !== null && router.filter[req.params.type].allowed) {
                            var r = exprs.Router();
                            var dbset = dbsets[req.params.type];
                            if (!dbset) {
                                dbset = require(path.join(__dirname, '../../controllers/Northwind/default/sets/' + req.params.type));
                                dbsets[req.params.type] = dbset;
                            }
                            var mthdr = dbset.router;
                            mthdr.vpath = router.vpath + '/sets/' + req.params.type;
                            r.use('/', mthdr);
                            if (typeof router.filter !== 'undefined' && router.filter !== null && typeof router.filter[req.params.type] === 'object') {
                                mthdr.filter = router.filter[req.params.type];
                                mthdr.filter.parent = router.filter;
                            }
                            r.handle(req, res, next);
                        } else {
                            res.writeHead(403);
                            res.end();
                        }
                        handled = true;
                        break;
                    }
                }
                if (!handled) {
                    res.writeHead(404);
                    res.end();
                }
            }
            break;
    }
});

router.use('/', function (req, res, next) {
    next();
});

module.exports.router = router;